<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>写给java开发的运维笔记（中级篇）</title>
      <link href="/2019/01/01/yunwei2/"/>
      <url>/2019/01/01/yunwei2/</url>
      
        <content type="html"><![CDATA[<h2 id="中级篇"><a href="#中级篇" class="headerlink" title="中级篇"></a>中级篇</h2><ol><li>配置tomcat为服务</li><li>配置tomcat+nginx反向代理</li><li>使用jemeter测试tomcat性能</li><li>优化tomcat8</li><li>配置多个tomcat</li><li>优化nginx配置</li><li>优化mysql配置</li><li>nginx+startssl配置https</li></ol><h1 id="配置tomcat为服务"><a href="#配置tomcat为服务" class="headerlink" title="配置tomcat为服务"></a>配置tomcat为服务</h1><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/init.d/tomcat8</span></code></pre><p><em>tomcat服务脚本</em></p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># description: Apache Tomcat init script</span><span class="token comment" spellcheck="true"># processname: tomcat  </span><span class="token comment" spellcheck="true"># chkconfig: 234 20 80  </span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Copyright (C) 2014 Miglen Evlogiev</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This program is free software: you can redistribute it and/or modify it under</span><span class="token comment" spellcheck="true"># the terms of the GNU General Public License as published by the Free Software</span><span class="token comment" spellcheck="true"># Foundation, either version 3 of the License, or (at your option) any later</span><span class="token comment" spellcheck="true"># version.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This program is distributed in the hope that it will be useful, but WITHOUT</span><span class="token comment" spellcheck="true"># ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS</span><span class="token comment" spellcheck="true"># FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># You should have received a copy of the GNU General Public License along with</span><span class="token comment" spellcheck="true"># this program.  If not, see &lt;http://www.gnu.org/licenses/>.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Initially forked from: gist.github.com/valotas/1000094</span><span class="token comment" spellcheck="true"># Source: gist.github.com/miglen/5590986</span><span class="token comment" spellcheck="true">#Location of JAVA_HOME (bin files)</span><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/local/java/jdk1.8.0_102<span class="token function">export</span> JRE_HOME<span class="token operator">=</span>/usr/local/java/jdk1.8.0_102/jre<span class="token comment" spellcheck="true">#Add Java binary files to PATH</span><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$PATH</span><span class="token comment" spellcheck="true">#CATALINA_HOME is the location of the bin files of Tomcat  </span><span class="token function">export</span> CATALINA_HOME<span class="token operator">=</span>/usr/local/tomcat8<span class="token comment" spellcheck="true">#CATALINA_BASE is the location of the configuration files of this instance of Tomcat</span><span class="token function">export</span> CATALINA_BASE<span class="token operator">=</span>/usr/local/tomcat8<span class="token comment" spellcheck="true">#TOMCAT_USAGE is the message if this script is called without any options</span>TOMCAT_USAGE<span class="token operator">=</span><span class="token string">"Usage: <span class="token variable">$0</span> {\e[00;32mstart\e[00m|\e[00;31mstop\e[00m|\e[00;31mkill\e[00m|\e[00;32mstatus\e[00m|\e[00;31mrestart\e[00m}"</span><span class="token comment" spellcheck="true">#SHUTDOWN_WAIT is wait time in seconds for java proccess to stop</span>SHUTDOWN_WAIT<span class="token operator">=</span>20tomcat_pid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> `ps -fe <span class="token operator">|</span> <span class="token function">grep</span> <span class="token variable">$CATALINA_BASE</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">tr</span> -s <span class="token string">" "</span><span class="token operator">|</span><span class="token function">cut</span> -d<span class="token string">" "</span> -f2`<span class="token punctuation">}</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  pid<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>tomcat_pid<span class="token variable">)</span></span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$pid</span>"</span> <span class="token punctuation">]</span>  <span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31mTomcat is already running (pid: <span class="token variable">$pid</span>)\e[00m"</span>  <span class="token keyword">else</span>    <span class="token comment" spellcheck="true"># Start tomcat</span>    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;32mStarting tomcat\e[00m"</span>    <span class="token comment" spellcheck="true">#ulimit -n 100000</span>    <span class="token comment" spellcheck="true">#umask 007</span>    <span class="token comment" spellcheck="true">#/bin/su -p -s /bin/sh $TOMCAT_USER</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span>user_exists $TOMCAT_USER<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>                /bin/su <span class="token variable">$TOMCAT_USER</span> -c <span class="token variable">$CATALINA_HOME</span>/bin/startup.sh        <span class="token keyword">else</span>                <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31mTomcat user <span class="token variable">$TOMCAT_USER</span> does not exists. Starting with <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span><span class="token variable">)</span></span>\e[00m"</span>                sh <span class="token variable">$CATALINA_HOME</span>/bin/startup.sh        <span class="token keyword">fi</span>        status  <span class="token keyword">fi</span>  <span class="token keyword">return</span> 0<span class="token punctuation">}</span>status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          pid<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>tomcat_pid<span class="token variable">)</span></span>          <span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$pid</span>"</span> <span class="token punctuation">]</span>            <span class="token keyword">then</span> <span class="token keyword">echo</span> -e <span class="token string">"\e[00;32mTomcat is running with pid: <span class="token variable">$pid</span>\e[00m"</span>          <span class="token keyword">else</span>            <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31mTomcat is not running\e[00m"</span>            <span class="token keyword">return</span> 3          <span class="token keyword">fi</span><span class="token punctuation">}</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31mTerminating Tomcat\e[00m"</span>    <span class="token function">kill</span> -9 <span class="token variable"><span class="token variable">$(</span>tomcat_pid<span class="token variable">)</span></span><span class="token punctuation">}</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  pid<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>tomcat_pid<span class="token variable">)</span></span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$pid</span>"</span> <span class="token punctuation">]</span>  <span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31mStoping Tomcat\e[00m"</span>    <span class="token comment" spellcheck="true">#/bin/su -p -s /bin/sh $TOMCAT_USER</span>        sh <span class="token variable">$CATALINA_HOME</span>/bin/shutdown.sh    <span class="token keyword">let</span> kwait<span class="token operator">=</span><span class="token variable">$SHUTDOWN_WAIT</span>    count<span class="token operator">=</span>0<span class="token punctuation">;</span>    <span class="token keyword">until</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> -p $pid <span class="token operator">|</span> <span class="token function">grep</span> -c $pid<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token variable">$count</span> -gt <span class="token variable">$kwait</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>      <span class="token keyword">echo</span> -n -e <span class="token string">"\n\e[00;31mwaiting for processes to exit\e[00m"</span><span class="token punctuation">;</span>      <span class="token function">sleep</span> 1      <span class="token keyword">let</span> count<span class="token operator">=</span><span class="token variable">$count</span>+1<span class="token punctuation">;</span>    <span class="token keyword">done</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$count</span> -gt <span class="token variable">$kwait</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token keyword">echo</span> -n -e <span class="token string">"\n\e[00;31mkilling processes didn't stop after <span class="token variable">$SHUTDOWN_WAIT</span> seconds\e[00m"</span>      terminate    <span class="token keyword">fi</span>  <span class="token keyword">else</span>    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31mTomcat is not running\e[00m"</span>  <span class="token keyword">fi</span>  <span class="token keyword">return</span> 0<span class="token punctuation">}</span>user_exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">id</span> -u <span class="token variable">$1</span> <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"1"</span>        <span class="token keyword">else</span>                <span class="token keyword">echo</span> <span class="token string">"0"</span>        <span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>    start<span class="token punctuation">)</span>      start    <span class="token punctuation">;</span><span class="token punctuation">;</span>    stop<span class="token punctuation">)</span>        stop    <span class="token punctuation">;</span><span class="token punctuation">;</span>    restart<span class="token punctuation">)</span>      stop      start    <span class="token punctuation">;</span><span class="token punctuation">;</span>    status<span class="token punctuation">)</span>        status        <span class="token keyword">exit</span> <span class="token variable">$?</span>      <span class="token punctuation">;</span><span class="token punctuation">;</span>    kill<span class="token punctuation">)</span>        terminate    <span class="token punctuation">;</span><span class="token punctuation">;</span>            *<span class="token punctuation">)</span>        <span class="token keyword">echo</span> -e <span class="token variable">$TOMCAT_USAGE</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>esac    <span class="token keyword">exit</span> 0</code></pre><p>这个脚本中需要注意你的jdk,jre位置和tomcat所在位置, 修改正确后保存。</p><h2 id="给服务授权"><a href="#给服务授权" class="headerlink" title="给服务授权"></a>给服务授权</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod +x /etc/init.d/tomcat8</span></code></pre><h2 id="使用服务"><a href="#使用服务" class="headerlink" title="使用服务"></a>使用服务</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service tomcat8 status</span>Tomcat is not running<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service tomcat8 start</span>Starting tomcatUsing CATALINA_BASE:   /usr/local/tomcat8Using CATALINA_HOME:   /usr/local/tomcat8Using CATALINA_TMPDIR: /usr/local/tomcat8/tempUsing JRE_HOME:        /usr/local/java/jdk1.8.0_102/jreUsing CLASSPATH:       /usr/local/tomcat8/bin/bootstrap.jar:/usr/local/tomcat8/bin/tomcat-juli.jarTomcat started.Tomcat is running with pid: 15282<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service tomcat8 stop</span>Stoping TomcatUsing CATALINA_BASE:   /usr/local/tomcat8Using CATALINA_HOME:   /usr/local/tomcat8Using CATALINA_TMPDIR: /usr/local/tomcat8/tempUsing JRE_HOME:        /usr/local/java/jdk1.8.0_102/jreUsing CLASSPATH:       /usr/local/tomcat8/bin/bootstrap.jar:/usr/local/tomcat8/bin/tomcat-juli.jarwaiting <span class="token keyword">for</span> processes to <span class="token keyword">exit</span></code></pre><h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chkconfig --add tomcat8</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chkconfig</span>auditd             0:off    1:off    2:on    3:on    4:on    5:on    6:offblk-availability    0:off    1:on    2:on    3:on    4:on    5:on    6:offcrond              0:off    1:off    2:on    3:on    4:on    5:on    6:offip6tables          0:off    1:off    2:on    3:on    4:on    5:on    6:offiptables           0:off    1:off    2:on    3:on    4:on    5:on    6:offiscsi              0:off    1:off    2:off    3:on    4:on    5:on    6:offiscsid             0:off    1:off    2:off    3:on    4:on    5:on    6:offlvm2-monitor       0:off    1:on    2:on    3:on    4:on    5:on    6:offmdmonitor          0:off    1:off    2:on    3:on    4:on    5:on    6:offmultipathd         0:off    1:off    2:off    3:off    4:off    5:off    6:offmysqld             0:off    1:off    2:on    3:on    4:on    5:on    6:offnetconsole         0:off    1:off    2:off    3:off    4:off    5:off    6:offnetfs              0:off    1:off    2:off    3:on    4:on    5:on    6:offnetwork            0:off    1:off    2:on    3:on    4:on    5:on    6:offnginx              0:off    1:off    2:on    3:on    4:on    5:on    6:offpostfix            0:off    1:off    2:on    3:on    4:on    5:on    6:offrdisc              0:off    1:off    2:off    3:off    4:off    5:off    6:offredis_6379         0:off    1:off    2:on    3:on    4:on    5:on    6:offrestorecond        0:off    1:off    2:off    3:off    4:off    5:off    6:offrsyslog            0:off    1:off    2:on    3:on    4:on    5:on    6:offsaslauthd          0:off    1:off    2:off    3:off    4:off    5:off    6:offsshd               0:off    1:off    2:on    3:on    4:on    5:on    6:offtomcat8            0:off    1:off    2:on    3:on    4:on    5:off    6:offudev-post          0:off    1:on    2:on    3:on    4:on    5:on    6:off</code></pre><h1 id="配置tomcat-nginx反向代理"><a href="#配置tomcat-nginx反向代理" class="headerlink" title="配置tomcat+nginx反向代理"></a>配置tomcat+nginx反向代理</h1><p>一般我们服务器对外只暴力22, 443, 80端口，其他的尽量都在内网访问，那么tomcat的8080端口是不应该对外访问的，<br>nginx作为一个性能卓越的web服务器提供了反向代理的功能，可以做到转发。</p><p>假设我们现在有一个域名绑定在服务器的80端口上，使用tomcat搭建的程序，但是我又不想修改tomcat端口，该怎么办呢？</p><p>nginx默认监听了80端口，配置文件在 <code>/usr/local/nginx/conf</code>文件夹下的 <code>nginx.conf</code>。</p><h2 id="取消默认站点"><a href="#取消默认站点" class="headerlink" title="取消默认站点"></a>取消默认站点</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /usr/local/nginx/conf</span><span class="token punctuation">[</span>root@localhost conf<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim nginx.conf</span></code></pre><p>将 <code>server</code> 块注释即可。然后我们在 <code>conf</code> 文件夹下创建一个 <code>vhost</code> 目录存储虚拟主机配置文件。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost conf<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir vhost</span></code></pre><p>创建一个tomcat的虚拟主机配置文件。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost conf<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim vhost/tomcat8.conf</span></code></pre><p>加入以下配置</p><pre class=" language-bash"><code class="language-bash">server <span class="token punctuation">{</span>  listen       80<span class="token punctuation">;</span>  server_name localhost<span class="token punctuation">;</span>  location / <span class="token punctuation">{</span>    proxy_pass http://127.0.0.1:8080<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 <code>nginx.conf</code> 中将 <code>vhost</code> 文件夹下的配置文件引入，只需在 <code>http</code> 块中加入一行 <code>include vhost/*.conf</code> 保存即可。</p><p>重启nginx</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost conf<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service nginx restart</span>Stopping Nginx:                                            <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>Starting Nginx:                                            <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span></code></pre><p>查看tomcat是否已经启动，如果关闭将它开启，然后访问 <a href="http://192.168.100.128/" target="_blank" rel="noopener">http://192.168.100.128/</a></p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d260a9a1004.png" alt=""></p><p>这样tomcat的8080端口就被nginx转发了，我们此时用域名直接绑定到80端口即可！</p><h1 id="使用jemeter测试tomcat性能"><a href="#使用jemeter测试tomcat性能" class="headerlink" title="使用jemeter测试tomcat性能"></a>使用jemeter测试tomcat性能</h1><p>JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 </p><p>下载地址：<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">http://jmeter.apache.org/download_jmeter.cgi</a></p><p>安装启动即可。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d26181a3bbc.png" alt=""></p><h2 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h2><ul><li>CPU：Intel(R) Core(TM) i5-4590 CPU @ 3.30GHz</li><li>内存：1G</li><li>操作系统：CentOS6.8_x64</li><li>JDK：1.8.0_102</li><li>Tomcat：8.5.5</li></ul><p>下面所有测试都是基于1000个请求做的，且都是访问Tomcat默认的ROOT首页</p><h2 id="创建测试计划"><a href="#创建测试计划" class="headerlink" title="创建测试计划"></a>创建测试计划</h2><p><img src="https://ooo.0o0.ooo/2016/09/09/57d262594f2ec.png" alt=""><br><img src="https://ooo.0o0.ooo/2016/09/09/57d262640c284.png" alt=""><br><img src="https://ooo.0o0.ooo/2016/09/09/57d2626eddf57.png" alt=""></p><p>配置参数，这里我们进行多次测试.</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d262af81eaf.png" alt=""><br><img src="https://ooo.0o0.ooo/2016/09/09/57d262b9a7fe3.png" alt=""></p><table><thead><tr><th style="text-align:center">并发用户数</th><th style="text-align:center">吞吐量/每秒</th><th style="text-align:center">请求等待时间/毫秒</th><th style="text-align:center">错误请求数/百分比</th></tr></thead><tbody><tr><td style="text-align:center">10</td><td style="text-align:center">1999</td><td style="text-align:center">8</td><td style="text-align:center">0.00</td></tr><tr><td style="text-align:center">20</td><td style="text-align:center">2667</td><td style="text-align:center">11</td><td style="text-align:center">0.00</td></tr><tr><td style="text-align:center">30</td><td style="text-align:center">2746</td><td style="text-align:center">13</td><td style="text-align:center">0.00</td></tr><tr><td style="text-align:center">40</td><td style="text-align:center">2730</td><td style="text-align:center">16</td><td style="text-align:center">0.00</td></tr><tr><td style="text-align:center">50</td><td style="text-align:center">2682</td><td style="text-align:center">20</td><td style="text-align:center">0.00</td></tr><tr><td style="text-align:center">60</td><td style="text-align:center">2756</td><td style="text-align:center">23</td><td style="text-align:center">0.00</td></tr><tr><td style="text-align:center">70</td><td style="text-align:center">2764</td><td style="text-align:center">27</td><td style="text-align:center">0.00</td></tr><tr><td style="text-align:center">80</td><td style="text-align:center">2714</td><td style="text-align:center">32</td><td style="text-align:center">0.00</td></tr><tr><td style="text-align:center">90</td><td style="text-align:center">2131</td><td style="text-align:center">35</td><td style="text-align:center">0.00</td></tr><tr><td style="text-align:center">100</td><td style="text-align:center">2739</td><td style="text-align:center">38</td><td style="text-align:center">0.00</td></tr><tr><td style="text-align:center">200</td><td style="text-align:center">1404</td><td style="text-align:center">43</td><td style="text-align:center">0.34%</td></tr><tr><td style="text-align:center">300</td><td style="text-align:center">1066</td><td style="text-align:center">50</td><td style="text-align:center">0.77%</td></tr><tr><td style="text-align:center">400</td><td style="text-align:center">995</td><td style="text-align:center">52</td><td style="text-align:center">1.23%</td></tr><tr><td style="text-align:center">500</td><td style="text-align:center">1086</td><td style="text-align:center">46</td><td style="text-align:center">1.42%</td></tr><tr><td style="text-align:center">1000</td><td style="text-align:center">1163</td><td style="text-align:center">59</td><td style="text-align:center">2.83%</td></tr></tbody></table><p><img src="https://ooo.0o0.ooo/2016/09/09/57d276759cccc.png" alt=""></p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d2768276105.png" alt=""></p><p>从上面的测试结果来看，在90-100个并发的时候出现不稳定，其他都比较平缓，请求时间一直在上涨。CPU负载均在60%左右。</p><p>在聚合报告中，会显示一行数据，共有10个字段，含义分别如下。</p><ul><li><p>Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值</p></li><li><h1 id="Samples：表示你这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100"><a href="#Samples：表示你这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100" class="headerlink" title="Samples：表示你这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100"></a>Samples：表示你这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100</h1></li><li><p>Average：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，也可以以Transaction 为单位显示平均响应时间</p></li><li><p>Median：中位数，也就是 50％ 用户的响应时间</p></li><li><p>90% Line：90％ 用户的响应时间</p></li><li><p>Min：最小响应时间</p></li><li><p>Max：最大响应时间</p></li><li><p>Error%：本次测试中出现错误的请求的数量/请求的总数</p></li><li><p>Throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second）</p></li><li><p>KB/Sec：每秒从服务器端接收到的数据量，相当于LoadRunner中的Throughput/Sec</p></li></ul><p>在下一章节我们介绍对tomcat8的优化。</p><h1 id="优化tomcat8"><a href="#优化tomcat8" class="headerlink" title="优化tomcat8"></a>优化tomcat8</h1><p>我们优化tomcat的目的是提高并发性，即在多线程环境下能够快速响应，提高吞吐量。</p><p>首先在tomcat的bin目录下新建一个名为 <code>setenv.sh</code> 的文件，tomcat启动时会自动加载该文件。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim setenv.sh</span></code></pre><p>加入tomcat基础配置</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#!/usr/bin</span><span class="token function">export</span> CATALINA_HOME<span class="token operator">=</span>/usr/local/tomcat8<span class="token function">export</span> CATALINA_BASE<span class="token operator">=</span>/usr/local/tomcat8</code></pre><h2 id="JAVA-OPTS"><a href="#JAVA-OPTS" class="headerlink" title="JAVA_OPTS"></a>JAVA_OPTS</h2><p>加入如下配置，我们服务器的内存是1G。这里我设置最大占用768</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_OPTS<span class="token operator">=</span><span class="token string">"<span class="token variable">$JAVA_OPTS</span>\ -server\ -Xms768m\ -Xmx768m\ -Xss512k\ -Djava.awt.headless=true\ -Dfile.encoding=utf-8\ -Djava.net.preferIPv4Stack=true\ -Djava.security.egd=file:/dev/./urandom"</span></code></pre><ul><li>-server：表示这是应用于服务器的配置，JVM 内部会有特殊处理的</li><li>-Xms768m：设置JVM最大可用内存为768MB</li><li>-Xmx768m：设置JVM最小内存为768MB。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。</li><li>-Dfile.encoding：默认文件编码</li><li>-Djava.net.preferIPv4Stack：使用IPV4</li><li>-Djava.security.egd：<a href="http://fengbin2005.iteye.com/blog/2313845" target="_blank" rel="noopener">详细解释</a></li></ul><h2 id="优化server-xml"><a href="#优化server-xml" class="headerlink" title="优化server.xml"></a>优化<code>server.xml</code></h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span>  <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span>     <span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8000<span class="token punctuation">"</span></span>        <span class="token attr-name">minSpareThreads</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>215<span class="token punctuation">"</span></span>        <span class="token attr-name">maxSpareThreads</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2048<span class="token punctuation">"</span></span>        <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>        <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span>    <span class="token attr-name">acceptCount</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>        <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>    <span class="token attr-name">enableLookups</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>    <span class="token attr-name">disableUploadTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">useBodyEncodingForURI</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><strong>maxThreads 连接数限制</strong></p><p>maxThreads 是 Tomcat 所能接受最大连接数。一般设置不要超过8000以上，如果你的网站访问量非常大可能使用运行多个Tomcat实例的方法。</p><h2 id="安装apr"><a href="#安装apr" class="headerlink" title="安装apr"></a>安装apr</h2><p>安装依赖</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y openssl-devel</span></code></pre><p>下载apr相关包</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget http://mirrors.tuna.tsinghua.edu.cn/apache//apr/apr-1.5.2.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget http://mirrors.tuna.tsinghua.edu.cn/apache//apr/apr-util-1.5.4.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget http://mirrors.tuna.tsinghua.edu.cn/apache//apr/apr-iconv-1.2.1.tar.gz</span><span class="token comment" spellcheck="true"># 安装apr</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zxvf apr-1.5.2.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd apr-1.5.2</span><span class="token punctuation">[</span>root@localhost apr-1.5.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure &amp;&amp; make &amp;&amp; make install</span><span class="token comment" spellcheck="true"># 安装apr-util</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zxvf apr-util-1.5.4.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd apr-util-1.5.4</span><span class="token punctuation">[</span>root@localhost apr-util-1.5.4<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure --with-apr=/usr/local/apr &amp;&amp; make &amp;&amp; make install</span><span class="token comment" spellcheck="true"># 安装apr-iconv</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd apr-iconv-1.2.1</span><span class="token punctuation">[</span>root@localhost apr-iconv-1.2.1<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure --with-apr=/usr/local/apr &amp;&amp; make &amp;&amp; make install</span></code></pre><p>配置tomcat</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost apr-iconv-1.2.1<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /usr/local/tomcat8/bin/</span><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zxf tomcat-native.tar.gz</span><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd tomcat-native-1.2.8-src/native/</span><span class="token punctuation">[</span>root@localhost native<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure --with-apr=/usr/local/apr &amp;&amp; make &amp;&amp; make install</span></code></pre><p>这是提示我</p><pre class=" language-bash"><code class="language-bash">configure: error: Your version of OpenSSL is not compatible with this version of tcnative</code></pre><p>由于centos 当前的yum 库只有1.0.1 的OpenSSL，所以我们需要手工安装1.0.2</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget https://www.openssl.org/source/openssl-1.0.2-latest.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zxf openssl-1.0.2-latest.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd openssl-1.0.2h</span><span class="token punctuation">[</span>root@localhost openssl-1.0.2h<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./config --prefix=/usr/local/openssl -fPIC</span></code></pre><blockquote><p>注意这里需要加入 -fPIC参数，否则后面在安装tomcat native 组件会出错<br>注意：不要按照提示去运行 make depend</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost openssl-1.0.2h<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make</span><span class="token punctuation">[</span>root@localhost openssl-1.0.2h<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make install</span><span class="token punctuation">[</span>root@localhost openssl-1.0.2h<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mv /usr/bin/openssl ~</span><span class="token punctuation">[</span>root@localhost openssl-1.0.2h<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl</span><span class="token punctuation">[</span>root@localhost openssl-1.0.2h<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># openssl version</span>OpenSSL 1.0.2h  3 May 2016</code></pre><p>重新安装 tomcat-native组件</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost openssl-1.0.2h<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /usr/local/tomcat8/bin/tomcat-native-1.2.8-src/native/</span><span class="token punctuation">[</span>root@localhost native<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure --with-apr=/usr/local/apr --with-ssl=/usr/local/openssl</span><span class="token punctuation">[</span>root@localhost native<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make &amp;&amp; make install</span></code></pre><p>在 <code>setenv.sh</code> 文件中添加</p><pre class=" language-bash"><code class="language-bash">LD_LIBRARY_PATH<span class="token operator">=</span><span class="token variable">$LD_LIBRARY_PATH</span>:/usr/local/apr/lib<span class="token function">export</span> LD_LIBRARY_PATH</code></pre><p>在 <code>server.xml</code> 中加</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span>  <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span>             <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.coyote.http11.Http11AprProtocol<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>启动tomcat，打开控制台日志可以看到如图所示的日志</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d281093d907.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>写给java开发的运维笔记（初级篇）</title>
      <link href="/2019/01/01/yunwei1/"/>
      <url>/2019/01/01/yunwei1/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>在虚拟机里安装centos6</li><li>初始化操作系统</li><li>安装jdk环境</li><li>安装tomcat</li><li>安装mysql及配置</li><li>安装nginx</li><li>安装redis3</li><li>安装svn服务</li></ol><h1 id="在虚拟机里安装centos6"><a href="#在虚拟机里安装centos6" class="headerlink" title="在虚拟机里安装centos6"></a>在虚拟机里安装centos6</h1><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ul><li>操作系统：Win7操作系统</li><li>虚拟机：VMware® Workstation 12 Pro</li><li>Linux系统：CentOS 64位</li></ul><p>接下里我们创建一个Linux虚拟机。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21ba70219e.png" alt=""></p><p>这里选择自定义配置</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21bcabe68c.png" alt=""></p><p>我们选择了Workstation 8x, 为了兼容低版本的vmvware</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21bd500c46.png" alt=""></p><p>稍后安装操作系统</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21bdd67f7f.png" alt=""></p><p>选择Linux -&gt; centos64位</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21be618ba3.png" alt=""></p><p>保存虚拟机到本地文件夹</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21bf02cb1f.png" alt=""></p><p>选择处理器数量和核心数，这里我选择默认的，根据你的机器情况可适当调整。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21bf903216.png" alt=""></p><p>设置Centos内存，我设置1G</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21c048caba.png" alt=""></p><p>如果你在局域网环境并且希望其他人可以访问到你的centos，可以选择桥接模式，<br>这里我只有宿主机访问虚拟机，就设置了NAT模式，桥接的时候会和宿主机处于同一IP段。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21c5b16bc8.png" alt=""><br><img src="https://ooo.0o0.ooo/2016/09/09/57d21c63c49fa.png" alt=""></p><p>这里选择默认即可。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21c70a4f1e.png" alt=""><br><img src="https://ooo.0o0.ooo/2016/09/09/57d21c7a64405.png" alt=""></p><p>磁盘大小设置20G，用到更多可以累加上去，然后将虚拟磁盘存储为单文件，防止磁盘碎片。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21ccc2db15.png" alt=""></p><p>点击完成。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21cd385b5a.png" alt=""></p><p>选择你的IOS镜像文件，如果没有可以在 <a href="http://isoredirect.centos.org/centos/6/isos/x86_64/" target="_blank" rel="noopener">这里</a> 下载</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21cd94a75e.png" alt=""></p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21ce210877.png" alt=""></p><p>安装操作系统</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21cf139606.png" alt=""></p><p>这里要检查硬件，可以直接跳过。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21cf8bbfb7.png" alt=""></p><p>选择语言环境，我选择英文，避免在以后的操作中遇到未知的错误。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21de293453.png" alt=""><br><img src="https://ooo.0o0.ooo/2016/09/09/57d21de9279bf.png" alt=""></p><p>确定将配置写入到磁盘</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21def353cf.png" alt=""></p><p>这里就默认把，暂时用不到</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21dfa1624b.png" alt=""></p><p>选择时区，我们选择Asia/shanghai</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21dffbd0ac.png" alt=""></p><p>设置你的ROOT用户密码，请牢记以后会经常用到。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21e06b65c4.png" alt=""></p><p>使用全部空间，就不分区了。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21e0c94266.png" alt=""></p><p>将修改写入到磁盘。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21e21e909f.png" alt=""></p><p>等待CentOS为你安装基础软件环境。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d21e687d0de.png" alt=""></p><p>看到这个界面你的CentOS就安装完成了，点击REBOOT即重启机器。<br>可以进行下一关了，上车！</p><h1 id="初始化操作系统"><a href="#初始化操作系统" class="headerlink" title="初始化操作系统"></a>初始化操作系统</h1><p>Ok，我们安装好了CentOS系统，可以使用SSH工具连接上去进行尝试了，我推荐使用 [XShell] 这款工具，支持中文，还有一些主题使用。</p><p>现在我们还不知道CentOS的IP是无法连接的，所以先在虚拟机中启动CentOS。</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d225f429a16.png" alt=""></p><p>这里账户输入 <code>root</code> 密码是你在安装的时候设置的。</p><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>这时候我们键入 <code>ifconfig</code>  查看ip</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig </span>lo        Link encap:Local Loopback            inet addr:127.0.0.1  Mask:255.0.0.0          inet6 addr: ::1/128 Scope:Host          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:0 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0           RX bytes:0 <span class="token punctuation">(</span>0.0 b<span class="token punctuation">)</span>  TX bytes:0 <span class="token punctuation">(</span>0.0 b<span class="token punctuation">)</span></code></pre><p>发现还没有，我们需要设置一下网卡配置。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vi /etc/sysconfig/network-scripts/ifcfg-eth0</span></code></pre><p>使用 <code>vi</code> 命令编辑第一块网卡的配置</p><pre class=" language-bash"><code class="language-bash">DEVICE<span class="token operator">=</span>eth0HWADDR<span class="token operator">=</span>00:0C:29:50:58:BETYPE<span class="token operator">=</span>EthernetUUID<span class="token operator">=</span>58f93b51-314d-49bb-9db2-036bf91161fbONBOOT<span class="token operator">=</span>noNM_CONTROLLED<span class="token operator">=</span>yesBOOTPROTO<span class="token operator">=</span>dhcp</code></pre><p>只需要将 <code>ONBOOT</code> 修改为 <code>yes</code> ,然后保存。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service network restart</span>Shutting down interface eth0:                              <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>Shutting down loopback interface:                          <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>Bringing up loopback interface:                            <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>Bringing up interface eth0:  Determining IP information <span class="token keyword">for</span> eth0<span class="token punctuation">..</span>. done.                                                           <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span></code></pre><p>这时候我们再查看一下ip</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig </span>eth0      Link encap:Ethernet  HWaddr 00:0C:29:50:58:BE            inet addr:192.168.100.128  Bcast:192.168.100.255  Mask:255.255.255.0          inet6 addr: fe80::20c:29ff:fe50:58be/64 Scope:Link          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:302 errors:0 dropped:0 overruns:0 frame:0          TX packets:189 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000           RX bytes:33591 <span class="token punctuation">(</span>32.8 KiB<span class="token punctuation">)</span>  TX bytes:29591 <span class="token punctuation">(</span>28.8 KiB<span class="token punctuation">)</span>lo        Link encap:Local Loopback            inet addr:127.0.0.1  Mask:255.0.0.0          inet6 addr: ::1/128 Scope:Host          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:0 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0           RX bytes:0 <span class="token punctuation">(</span>0.0 b<span class="token punctuation">)</span>  TX bytes:0 <span class="token punctuation">(</span>0.0 b<span class="token punctuation">)</span></code></pre><p>网卡的配置已经被应用到了，我们CentOS的IP是 <code>192.168.100.128</code> 你的可能和我不一样，那这个192.168.100开头的网段是在哪里设置的呢？</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d2293d28fe5.png" alt=""></p><p>点击虚拟网络编辑器</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d229a2311f4.png" alt=""></p><p>如果你在执行 <code>service network restart</code> 的时候失败可以在这里修改一个网段试试。</p><p>此时你已经可以使用SSH工具连接到你的CenOS主机了。</p><p>关于更详细的网络设置大家可以参考这2篇文章：</p><ul><li><a href="http://www.centoscn.com/CentOS/config/2014/1112/4112.html" target="_blank" rel="noopener">虚拟机下CentOS 6.5配置IP地址的三种方法</a></li><li><a href="http://www.centoscn.com/CentosBug/osbug/2015/1224/6568.html" target="_blank" rel="noopener">Vmware安装Centos NAT方式设置静态IP</a></li></ul><h2 id="yum源设置"><a href="#yum源设置" class="headerlink" title="yum源设置"></a>yum源设置</h2><p>先安装 <code>wget</code> 工具，我们安装的操作系统mini版的，默认没有wget命令,执行以下命令：</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">wget</span></code></pre><p>然后设置yum源，我选择的是网易的源，你也可以设置阿里的或者其他。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/yum.repos.d<span class="token function">mv</span> CentOS-Base.repo bak-CentOS-Base.repo<span class="token function">wget</span> http://mirrors.163.com/.help/CentOS6-Base-163.repoyum clean allyum makecache</code></pre><p>安全性的配置在这里先不讲解，我们先用 <code>root</code>账户来操作。</p><h1 id="安装jdk环境"><a href="#安装jdk环境" class="headerlink" title="安装jdk环境"></a>安装jdk环境</h1><p>服务器上如果不需要编码实际应该不安装JDK只安装JRE，我们考虑到以后可能安装其他软件就直接装JDK了。</p><h2 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h2><p><a href="http://stackoverflow.com/questions/10268583/downloading-java-jdk-on-linux-via-wget-is-shown-license-page-instead" target="_blank" rel="noopener">下载jdk</a></p><p>上面的连接是stackoverflow有开发者写的不使用cookie下载jdk和jre的命令。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget -c --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz</span></code></pre><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zxvf jdk-8u171-linux-x64.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /usr/local/java</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mv jdk1.8.0_171/ /usr/local/java/</span></code></pre><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/profile</span></code></pre><p>在最后一行添加</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># java</span><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/local/java/jdk1.8.0_171<span class="token function">export</span> JRE_HOME<span class="token operator">=</span>/usr/local/java/jdk1.8.0_171/jre<span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">$JRE_HOME</span>/lib/dt.jar:<span class="token variable">$JRE_HOME</span>/lib/tools.jar<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$JRE_HOME</span>/bin:<span class="token variable">$PATH</span></code></pre><h2 id="生效"><a href="#生效" class="headerlink" title="生效"></a>生效</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># source /etc/profile</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># java -version</span>java version <span class="token string">"1.8.0_171"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build 1.8.0_171-b11<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> 64-Bit Server VM <span class="token punctuation">(</span>build 25.171-b11, mixed mode<span class="token punctuation">)</span></code></pre><p>这里我安装的是最新版的JDK。</p><h1 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h1><p>上一章节我们安装了JDK的环境，Tomcat运行的前提是要有JDK环境。</p><h2 id="下载Tomcat"><a href="#下载Tomcat" class="headerlink" title="下载Tomcat"></a>下载Tomcat</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.5/bin/apache-tomcat-8.5.5.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zxvf apache-tomcat-8.5.5.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mv apache-tomcat-8.5.5 /usr/local/tomcat8</span></code></pre><h2 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /usr/local/tomcat8/bin/</span><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./startup.sh </span>Using CATALINA_BASE:   /usr/local/tomcat8Using CATALINA_HOME:   /usr/local/tomcat8Using CATALINA_TMPDIR: /usr/local/tomcat8/tempUsing JRE_HOME:        /usr/local/java/jdk1.8.0_102/jreUsing CLASSPATH:       /usr/local/tomcat8/bin/bootstrap.jar:/usr/local/tomcat8/bin/tomcat-juli.jarTomcat started.</code></pre><p>现在打开 <a href="http://192.168.100.128:8080" target="_blank" rel="noopener">http://192.168.100.128:8080</a> 应该就可以看到Tomcat的汤姆猫页面。<br>而事实是你看到这个:</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d23ea8c353e.png" alt=""></p><p>哦草。。。为什么，机智的同学已经想到了，防火墙啊。对我们没有对防火墙进行任何配置，实际上8080端口是不对外开放的，<br>那么如何解决呢？</p><ul><li>关闭防火墙</li><li>开放8080端口</li></ul><h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><p>在CentOS上关闭防火墙是非常简单的</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service iptables stop</span>iptables: Setting chains to policy ACCEPT: filter          <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>iptables: Flushing firewall rules:                         <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>iptables: Unloading modules:                               <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span></code></pre><p>这时候你再访问 <a href="http://192.168.100.128:8080" target="_blank" rel="noopener">http://192.168.100.128:8080</a> 就可以看到</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d23f752bfce.png" alt=""></p><p>当然这种方式是简单粗暴的，我们在真实服务器上不可能这么做，怎么做呢？</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/sysconfig/iptables</span></code></pre><p>我们看到 <code>iptables</code> 的默认配置是这样的：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Firewall configuration written by system-config-firewall</span><span class="token comment" spellcheck="true"># Manual customization of this file is not recommended.</span>*filter:INPUT ACCEPT <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>:FORWARD ACCEPT <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>:OUTPUT ACCEPT <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -j REJECT --reject-with icmp-host-prohibitedCOMMIT</code></pre><p>只需要添加一行和 <code>22</code> 端口一样的配置：</p><pre class=" language-bash"><code class="language-bash">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</code></pre><p>这样既把8080的TCP端口对外开放了，然后重启防火墙</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service iptables restart</span>iptables: Setting chains to policy ACCEPT: filter          <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>iptables: Flushing firewall rules:                         <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>iptables: Unloading modules:                               <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>iptables: Applying firewall rules:                         <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span></code></pre><p>可以达到同样的效果。</p><h1 id="安装mysql及配置"><a href="#安装mysql及配置" class="headerlink" title="安装mysql及配置"></a>安装mysql及配置</h1><h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><p>查找本机是否已经安装mysql</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -qa | grep mysql</span>mysql-libs-5.1.73-7.el6.x86_64</code></pre><p>卸载</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -e --nodeps mysql-libs-5.1.73-7.el6.x86_64</span></code></pre><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>这里我们使用yum方式进行安装，编译安装比较慢也很繁琐，查看系统里面有没有mysql的repo</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum repolist all | grep mysql</span>Repository base is listed <span class="token function">more</span> than once <span class="token keyword">in</span> the configurationRepository updates is listed <span class="token function">more</span> than once <span class="token keyword">in</span> the configurationRepository extras is listed <span class="token function">more</span> than once <span class="token keyword">in</span> the configurationRepository centosplus is listed <span class="token function">more</span> than once <span class="token keyword">in</span> the configurationRepository contrib is listed <span class="token function">more</span> than once <span class="token keyword">in</span> the configuration</code></pre><p>先执行如下语句，安装相关依赖</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install gcc-c++ jemalloc-devel openssl-devel openssl -y</span></code></pre><p>安装mysql的yum源</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget http://dev.mysql.com/get/mysql57-community-release-el6-8.noarch.rpm</span></code></pre><p>然后更新</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo rpm -Uvh  mysql57-community-release-el6-8.noarch.rpm </span>warning: mysql57-community-release-el6-8.noarch.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEYPreparing<span class="token punctuation">..</span>.                <span class="token comment" spellcheck="true">########################################### [100%]</span>   1:mysql57-community-relea<span class="token comment" spellcheck="true">########################################### [100%]</span></code></pre><p>更新源，将mysql56的 <code>enable</code> 置为1，其余置为0</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/yum.repos.d/mysql-community.repo</span></code></pre><p>修改后是这样</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/yum.repos.d/mysql-community.repo</span><span class="token punctuation">[</span>mysql-connectors-community<span class="token punctuation">]</span>name<span class="token operator">=</span>MySQL Connectors Communitybaseurl<span class="token operator">=</span>http://repo.mysql.com/yum/mysql-connectors-community/el/6/<span class="token variable">$basearch</span>/enabled<span class="token operator">=</span>0gpgcheck<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<span class="token punctuation">[</span>mysql-tools-community<span class="token punctuation">]</span>name<span class="token operator">=</span>MySQL Tools Communitybaseurl<span class="token operator">=</span>http://repo.mysql.com/yum/mysql-tools-community/el/6/<span class="token variable">$basearch</span>/enabled<span class="token operator">=</span>0gpgcheck<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<span class="token comment" spellcheck="true"># Enable to use MySQL 5.5</span><span class="token punctuation">[</span>mysql55-community<span class="token punctuation">]</span>name<span class="token operator">=</span>MySQL 5.5 Community Serverbaseurl<span class="token operator">=</span>http://repo.mysql.com/yum/mysql-5.5-community/el/6/<span class="token variable">$basearch</span>/enabled<span class="token operator">=</span>0gpgcheck<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<span class="token comment" spellcheck="true"># Enable to use MySQL 5.6</span><span class="token punctuation">[</span>mysql56-community<span class="token punctuation">]</span>name<span class="token operator">=</span>MySQL 5.6 Community Serverbaseurl<span class="token operator">=</span>http://repo.mysql.com/yum/mysql-5.6-community/el/6/<span class="token variable">$basearch</span>/enabled<span class="token operator">=</span>1gpgcheck<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<span class="token punctuation">[</span>mysql57-community<span class="token punctuation">]</span>name<span class="token operator">=</span>MySQL 5.7 Community Serverbaseurl<span class="token operator">=</span>http://repo.mysql.com/yum/mysql-5.7-community/el/6/<span class="token variable">$basearch</span>/enabled<span class="token operator">=</span>0gpgcheck<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<span class="token punctuation">[</span>mysql-tools-preview<span class="token punctuation">]</span>name<span class="token operator">=</span>MySQL Tools Previewbaseurl<span class="token operator">=</span>http://repo.mysql.com/yum/mysql-tools-preview/el/6/<span class="token variable">$basearch</span>/enabled<span class="token operator">=</span>0gpgcheck<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</code></pre><p>执行安装</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y mysql-community-server</span></code></pre><h2 id="启动Mysql"><a href="#启动Mysql" class="headerlink" title="启动Mysql"></a>启动Mysql</h2><p>ok,安装完成了，我们启动mysql</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service mysqld start</span></code></pre><h2 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h2><p>yum安装的时候会把mysql的配置文件存放在 <code>/etc/my.cnf</code> 这个位置，在第一次启动的时候可以看到。</p><h3 id="设置mysql-root密码"><a href="#设置mysql-root密码" class="headerlink" title="设置mysql root密码"></a>设置mysql root密码</h3><p>有两种方式可以设置mysql的root密码</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># /usr/bin/mysqladmin -u root password 'new-password'</span></code></pre><p>或者通过该命令给root账号设置密码</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysqladmin -u root password 'new-password'</span></code></pre><p>此时我们就可以使用刚才设置的密码进行登录了</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -uroot -p</span>Enter password: Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or \g.Your MySQL connection <span class="token function">id</span> is 4Server version: 5.6.33 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000, 2016, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span> </code></pre><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><p>我们可以 通过 <code>chkconfig mysqld on</code> 命令来设置mysql开机启动</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chkconfig mysqld on</span></code></pre><p>看一下</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chkconfig --list | grep mysqld</span>mysqld             0:off    1:off    2:on    3:on    4:on    5:on    6:off</code></pre><p>在这一步Mysql的安装就已经完成了，我们先步入下一个软件的安装，在之后的章节中还会继续讲解Mysql的配置。</p><h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><p>在安装nginx前，需要确保系统安装了g++、gcc、openssl-devel、pcre-devel和zlib-devel软件。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum -y install gcc-c++ zlib zlib-devel openssl openssl-devel pcre pcre-devel</span></code></pre><h2 id="下载nginx"><a href="#下载nginx" class="headerlink" title="下载nginx"></a>下载nginx</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget http://nginx.org/download/nginx-1.10.1.tar.gz</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zxvf nginx-1.10.1.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd nginx-1.10.1</span><span class="token punctuation">[</span>root@localhost nginx-1.10.1<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure --prefix=/usr/local/nginx --with-http_ssl_module</span></code></pre><p>上面 <code>--prefix</code> 配置nginx所在目录，<code>--with-http_ssl_module</code>配置nginx支持ssl，配置https会用到。</p><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost nginx-1.10.1<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make &amp;&amp; make install</span></code></pre><p>来看看</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost nginx-1.10.1<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll /usr/local/nginx/</span>total 16drwxr-xr-x. 2 root root 4096 Sep  9 22:07 confdrwxr-xr-x. 2 root root 4096 Sep  9 22:07 htmldrwxr-xr-x. 2 root root 4096 Sep  9 22:07 logsdrwxr-xr-x. 2 root root 4096 Sep  9 22:07 sbin</code></pre><h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost nginx-1.10.1<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /usr/local/nginx/sbin/</span><span class="token punctuation">[</span>root@localhost sbin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./nginx</span></code></pre><p>这样就启动nginx，nginx默认监听在80端口，但是我们不要忘了把80端口对外开放。</p><p>在 <code>/etc/sysconfig/iptables</code> 中添加80端口</p><pre class=" language-bash"><code class="language-bash">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</code></pre><p>保存后重启一下防火墙</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost sbin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service iptables restart</span>iptables: Setting chains to policy ACCEPT: filter          <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>iptables: Flushing firewall rules:                         <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>iptables: Unloading modules:                               <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>iptables: Applying firewall rules:                         <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span></code></pre><p>访问 <a href="http://192.168.100.128/" target="_blank" rel="noopener">http://192.168.100.128/</a> 你将看到</p><p><img src="https://ooo.0o0.ooo/2016/09/09/57d253381cff7.png" alt=""></p><h2 id="关闭nginx"><a href="#关闭nginx" class="headerlink" title="关闭nginx"></a>关闭nginx</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查询nginx主进程号 </span><span class="token punctuation">[</span>root@localhost sbin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -ef | grep nginx</span><span class="token comment" spellcheck="true">#停止进程 </span><span class="token punctuation">[</span>root@localhost sbin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kill -QUIT 主进程号 </span><span class="token comment" spellcheck="true">#快速停止 </span><span class="token punctuation">[</span>root@localhost sbin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kill -TERM 主进程号 </span><span class="token comment" spellcheck="true">#强制停止 </span><span class="token punctuation">[</span>root@localhost sbin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pkill -9 nginx</span></code></pre><h2 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># /usr/local/nginx/sbin/nginx -s reload</span></code></pre><h2 id="配置nginx为服务"><a href="#配置nginx为服务" class="headerlink" title="配置nginx为服务"></a>配置nginx为服务</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/init.d/nginx</span></code></pre><p>将服务脚本粘贴进去</p><p><em>服务脚本</em></p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>  <span class="token comment" spellcheck="true"># chkconfig: 2345 85 15  </span><span class="token comment" spellcheck="true"># description:Nginx Server  </span>NGINX_HOME<span class="token operator">=</span>/usr/local/nginx  NGINX_SBIN<span class="token operator">=</span><span class="token variable">$NGINX_HOME</span>/sbin/nginx  NGINX_CONF<span class="token operator">=</span><span class="token variable">$NGINX_HOME</span>/conf/nginx.conf  NGINX_PID<span class="token operator">=</span><span class="token variable">$NGINX_HOME</span>/logs/nginx.pid  NGINX_NAME<span class="token operator">=</span><span class="token string">"Nginx"</span>  <span class="token keyword">.</span> /etc/rc.d/init.d/functions  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -f <span class="token variable">$NGINX_SBIN</span> <span class="token punctuation">]</span>  <span class="token keyword">then</span>      <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$NGINX_NAME</span> startup: <span class="token variable">$NGINX_SBIN</span> not exists! "</span>      <span class="token keyword">exit</span>  <span class="token keyword">fi</span>  start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$NGINX_SBIN</span> -c <span class="token variable">$NGINX_CONF</span>      ret<span class="token operator">=</span><span class="token variable">$?</span>      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$ret</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>          action $<span class="token string">"Starting <span class="token variable">$NGINX_NAME</span>: "</span> /bin/true      <span class="token keyword">else</span>          action $<span class="token string">"Starting <span class="token variable">$NGINX_NAME</span>: "</span> /bin/false      <span class="token keyword">fi</span>  <span class="token punctuation">}</span>  stop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">kill</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> $NGINX_PID<span class="token variable">`</span></span>      ret<span class="token operator">=</span><span class="token variable">$?</span>      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$ret</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>          action $<span class="token string">"Stopping <span class="token variable">$NGINX_NAME</span>: "</span> /bin/true      <span class="token keyword">else</span>          action $<span class="token string">"Stopping <span class="token variable">$NGINX_NAME</span>: "</span> /bin/false      <span class="token keyword">fi</span>  <span class="token punctuation">}</span>  restart<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stop      start  <span class="token punctuation">}</span>  check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$NGINX_SBIN</span> -c <span class="token variable">$NGINX_CONF</span> -t  <span class="token punctuation">}</span>  reload<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">kill</span> -HUP <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> $NGINX_PID<span class="token variable">`</span></span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> <span class="token string">"reload success!"</span>  <span class="token punctuation">}</span>  relog<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">kill</span> -USR1 <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> $NGINX_PID<span class="token variable">`</span></span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> <span class="token string">"relog success!"</span>  <span class="token punctuation">}</span>  <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>      start<span class="token punctuation">)</span>          start          <span class="token punctuation">;</span><span class="token punctuation">;</span>      stop<span class="token punctuation">)</span>          stop          <span class="token punctuation">;</span><span class="token punctuation">;</span>      restart<span class="token punctuation">)</span>          restart          <span class="token punctuation">;</span><span class="token punctuation">;</span>      check<span class="token operator">|</span>chk<span class="token punctuation">)</span>          check          <span class="token punctuation">;</span><span class="token punctuation">;</span>      status<span class="token punctuation">)</span>          status -p <span class="token variable">$NGINX_PID</span>          <span class="token punctuation">;</span><span class="token punctuation">;</span>      reload<span class="token punctuation">)</span>          reload          <span class="token punctuation">;</span><span class="token punctuation">;</span>      relog<span class="token punctuation">)</span>          relog          <span class="token punctuation">;</span><span class="token punctuation">;</span>      *<span class="token punctuation">)</span>          <span class="token keyword">echo</span> $<span class="token string">"Usage: <span class="token variable">$0</span> {start|stop|restart|reload|status|check|relog}"</span>          <span class="token keyword">exit</span> 1  esac</code></pre><p>给脚本可执行权限</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod +x /etc/init.d/nginx</span></code></pre><p>然后你就可以使用 <code>service nginx start</code> 的方式启动nginx了</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service nginx</span>Usage: /etc/init.d/nginx <span class="token punctuation">{</span>start<span class="token operator">|</span>stop<span class="token operator">|</span>restart<span class="token operator">|</span>reload<span class="token operator">|</span>status<span class="token operator">|</span>check<span class="token operator">|</span>relog<span class="token punctuation">}</span></code></pre><h2 id="添加到开机项"><a href="#添加到开机项" class="headerlink" title="添加到开机项"></a>添加到开机项</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chkconfig --add nginx</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chkconfig</span>auditd             0:off    1:off    2:on    3:on    4:on    5:on    6:offblk-availability    0:off    1:on    2:on    3:on    4:on    5:on    6:offcrond              0:off    1:off    2:on    3:on    4:on    5:on    6:offip6tables          0:off    1:off    2:on    3:on    4:on    5:on    6:offiptables           0:off    1:off    2:on    3:on    4:on    5:on    6:offiscsi              0:off    1:off    2:off    3:on    4:on    5:on    6:offiscsid             0:off    1:off    2:off    3:on    4:on    5:on    6:offlvm2-monitor       0:off    1:on    2:on    3:on    4:on    5:on    6:offmdmonitor          0:off    1:off    2:on    3:on    4:on    5:on    6:offmultipathd         0:off    1:off    2:off    3:off    4:off    5:off    6:offmysqld             0:off    1:off    2:on    3:on    4:on    5:on    6:offnetconsole         0:off    1:off    2:off    3:off    4:off    5:off    6:offnetfs              0:off    1:off    2:off    3:on    4:on    5:on    6:offnetwork            0:off    1:off    2:on    3:on    4:on    5:on    6:offnginx              0:off    1:off    2:on    3:on    4:on    5:on    6:offpostfix            0:off    1:off    2:on    3:on    4:on    5:on    6:offrdisc              0:off    1:off    2:off    3:off    4:off    5:off    6:offrestorecond        0:off    1:off    2:off    3:off    4:off    5:off    6:offrsyslog            0:off    1:off    2:on    3:on    4:on    5:on    6:offsaslauthd          0:off    1:off    2:off    3:off    4:off    5:off    6:offsshd               0:off    1:off    2:on    3:on    4:on    5:on    6:offudev-post          0:off    1:on    2:on    3:on    4:on    5:on    6:off</code></pre><p>我们可以看到nginx已经被添加到开机启动了。</p><h1 id="安装redis3"><a href="#安装redis3" class="headerlink" title="安装redis3"></a>安装redis3</h1><h2 id="安装依赖软件"><a href="#安装依赖软件" class="headerlink" title="安装依赖软件"></a>安装依赖软件</h2><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y gcc*yum <span class="token function">install</span> -y tcl</code></pre><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget http://download.redis.io/releases/redis-3.2.3.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zxvf redis-3.2.3.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd redis-3.2.3</span><span class="token punctuation">[</span>root@localhost redis-3.2.3<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make</span><span class="token punctuation">[</span>root@localhost redis-3.2.3<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make test</span><span class="token punctuation">[</span>root@localhost redis-3.2.3<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make install</span><span class="token punctuation">[</span>root@localhost redis-3.2.3<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd utils</span><span class="token punctuation">[</span>root@localhost redis-3.2.3<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod +x install_server.sh</span><span class="token punctuation">[</span>root@localhost redis-3.2.3<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./install_server.sh</span></code></pre><p>在install的时候提示选项，全部选择默认即可，你看到如下画面表示安装成功</p><pre class=" language-bash"><code class="language-bash">Please <span class="token keyword">select</span> the redis port <span class="token keyword">for</span> this instance: <span class="token punctuation">[</span>6379<span class="token punctuation">]</span> Selecting default: 6379Please <span class="token keyword">select</span> the redis config <span class="token function">file</span> name <span class="token punctuation">[</span>/etc/redis/6379.conf<span class="token punctuation">]</span> Selected default - /etc/redis/6379.confPlease <span class="token keyword">select</span> the redis log <span class="token function">file</span> name <span class="token punctuation">[</span>/var/log/redis_6379.log<span class="token punctuation">]</span> Selected default - /var/log/redis_6379.logPlease <span class="token keyword">select</span> the data directory <span class="token keyword">for</span> this instance <span class="token punctuation">[</span>/var/lib/redis/6379<span class="token punctuation">]</span> Selected default - /var/lib/redis/6379Please <span class="token keyword">select</span> the redis executable path <span class="token punctuation">[</span>/usr/local/bin/redis-server<span class="token punctuation">]</span> Selected config:Port           <span class="token keyword">:</span> 6379Config <span class="token function">file</span>    <span class="token keyword">:</span> /etc/redis/6379.confLog <span class="token function">file</span>       <span class="token keyword">:</span> /var/log/redis_6379.logData <span class="token function">dir</span>       <span class="token keyword">:</span> /var/lib/redis/6379Executable     <span class="token keyword">:</span> /usr/local/bin/redis-serverCli Executable <span class="token keyword">:</span> /usr/local/bin/redis-cliIs this ok? Then press ENTER to go on or Ctrl-C to abort.Copied /tmp/6379.conf <span class="token operator">=</span><span class="token operator">></span> /etc/init.d/redis_6379Installing service<span class="token punctuation">..</span>.Successfully added to chkconfig<span class="token operator">!</span>Successfully added to runlevels 345<span class="token operator">!</span>Starting Redis server<span class="token punctuation">..</span>.Installation successful<span class="token operator">!</span></code></pre><h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># redis-cli</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> name jackOK127.0.0.1:6379<span class="token operator">></span> get name<span class="token string">"jack"</span></code></pre><h2 id="查看redis状态"><a href="#查看redis状态" class="headerlink" title="查看redis状态"></a>查看redis状态</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service redis_6379 status</span>Redis is running <span class="token punctuation">(</span>14927<span class="token punctuation">)</span></code></pre><h2 id="启动-关闭redis"><a href="#启动-关闭redis" class="headerlink" title="启动/关闭redis"></a>启动/关闭redis</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service redis_6379 stop</span>Stopping <span class="token punctuation">..</span>.Waiting <span class="token keyword">for</span> Redis to <span class="token function">shutdown</span> <span class="token punctuation">..</span>.Redis stopped<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service redis_6379 start</span>Starting Redis server<span class="token punctuation">..</span>.</code></pre><h2 id="设置redis认证密码"><a href="#设置redis认证密码" class="headerlink" title="设置redis认证密码"></a>设置redis认证密码</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/redis/6379.conf</span></code></pre><p>找到 <code># requirepass foobared</code> 将 <code>#</code> 去掉，设置一个密码。</p><p>然后重启redis</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service redis_6379 restart</span>Stopping <span class="token punctuation">..</span>.Redis stoppedStarting Redis server<span class="token punctuation">..</span>.</code></pre><p>wow，你已经完成初级篇的所有任务了，接下里我们会玩点有趣的 :)</p><h1 id="安装svn服务"><a href="#安装svn服务" class="headerlink" title="安装svn服务"></a>安装svn服务</h1><p>Subversion是一个自由，开源的版本控制系统。Subversion将文件存放在中心版本库里。这个版本库很像一个普通的文件服务器，不同的是，它可以记录每一次文件和目录的修改情况。这样就可以籍此将数据恢复到以前的版本，并可以查看数据的更改细节。Subversion是Apache基金会下的一个项目，官网 <a href="https://subversion.apache.org" target="_blank" rel="noopener">https://subversion.apache.org</a></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install sqlite sqlite-devel apr-util apr-util-devel -y</span></code></pre><h2 id="安装subversion"><a href="#安装subversion" class="headerlink" title="安装subversion"></a>安装subversion</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget http://mirrors.cnnic.cn/apache/subversion/subversion-1.8.16.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zxvf subversion-1.8.16.tar.gz</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd subversion-1.8.16</span><span class="token punctuation">[</span>root@localhost subversion-1.8.16<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure --prefix=/usr/local/subversion</span><span class="token punctuation">[</span>root@localhost subversion-1.8.16<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make &amp;&amp; make install</span></code></pre><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/profile</span></code></pre><p>加入 <code>PATH=$PATH:/usr/local/subversion/bin</code></p><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># svn --version</span>svn, version 1.8.16 <span class="token punctuation">(</span>r1740329<span class="token punctuation">)</span>   compiled Sep 26 2016, 06:42:53 on x86_64-unknown-linux-gnuCopyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> 2016 The Apache Software Foundation.This software consists of contributions made by many people<span class="token punctuation">;</span>see the NOTICE <span class="token function">file</span> <span class="token keyword">for</span> <span class="token function">more</span> information.Subversion is <span class="token function">open</span> <span class="token function">source</span> software, see http://subversion.apache.org/The following repository access <span class="token punctuation">(</span>RA<span class="token punctuation">)</span> modules are available:* ra_svn <span class="token keyword">:</span> Module <span class="token keyword">for</span> accessing a repository using the svn network protocol.  - with Cyrus SASL authentication  - handles <span class="token string">'svn'</span> scheme* ra_local <span class="token keyword">:</span> Module <span class="token keyword">for</span> accessing a repository on local disk.  - handles <span class="token string">'file'</span> scheme</code></pre><h2 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h2><h3 id="建立仓库目录"><a href="#建立仓库目录" class="headerlink" title="建立仓库目录"></a>建立仓库目录</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /data/svn/repos</span></code></pre><h3 id="创建版本"><a href="#创建版本" class="headerlink" title="创建版本"></a>创建版本</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># svnadmin create /data/svn/repos/</span></code></pre><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /data/svn/repos/conf/svnserve.conf</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>general<span class="token punctuation">]</span>anon-access <span class="token operator">=</span> noneauth-access <span class="token operator">=</span> <span class="token function">write</span>password-db <span class="token operator">=</span> <span class="token function">passwd</span>  <span class="token comment" spellcheck="true">#用户密码文件</span>authz-db <span class="token operator">=</span> authz  <span class="token comment" spellcheck="true">#授权登录文件</span>realm <span class="token operator">=</span> repos</code></pre><p>修改<code>/data/svn/repos/conf/passwd</code>文件，添加用户及密码：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /data/svn/repos/conf/passwd</span><span class="token punctuation">[</span>users<span class="token punctuation">]</span>username<span class="token operator">=</span>password <span class="token comment" spellcheck="true">#用户名=密码　　　一行一个</span></code></pre><p>修改<code>/data/svn/repos/conf/authz</code>文件，控制用户权限</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /data/svn/repos/conf/authz</span></code></pre><blockquote><p>注意：</p></blockquote><ul><li>权限配置文件中出现的用户名必须已在用户配置文件中定义。</li><li>对权限配置文件的修改立即生效，不必重启svn。</li></ul><p>用户组格式：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>groups<span class="token punctuation">]</span><span class="token operator">=</span> ,</code></pre><p>其中，1个用户组可以包含1个或多个用户，用户间以逗号分隔。<br>版本库目录格式：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token operator">&lt;</span>版本库<span class="token operator">></span>:/项目/目录<span class="token punctuation">]</span>@<span class="token operator">&lt;</span>用户组名<span class="token operator">></span> <span class="token operator">=</span> <span class="token operator">&lt;</span>权限<span class="token operator">></span><span class="token operator">&lt;</span>用户名<span class="token operator">></span> <span class="token operator">=</span> <span class="token operator">&lt;</span>权限<span class="token operator">></span></code></pre><p>其中，方框号内部分可以有多种写法:</p><ul><li>[/],表示根目录及以下，根目录是svnserve启动时指定的，我们指定为/home/svndata，[/]就是表示对全部版本库设置权限。</li><li>[repos:/] 表示对版本库repos设置权限；</li><li>[repos:/abc] 表示对版本库repos中的abc项目设置权限；</li><li>[repos:/abc/aaa] 表示对版本库repos中的abc项目的aaa目录设置权限；</li><li>权限主体可以是<code>用户组</code>、<code>用户</code>或<code>*</code>，用户组在前面加<code>@</code>，<code>*</code>表示全部用户。<br>权限可以是<code>w</code>、<code>r</code>、<code>wr</code>和空，空表示没有任何权限。</li></ul><h2 id="启动SVN"><a href="#启动SVN" class="headerlink" title="启动SVN"></a>启动SVN</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># svnserve -d --listen-port 10901 -r /data/svn</span></code></pre><ul><li>-d ：表示以daemon方式（后台运行）运行；</li><li>–listen-port 10901 ：表示使用10901端口，可以换成你需要的端口。但注意，使用1024以下的端口需要root权限；</li><li>-r /data/svn ：指定根目录是/data/svn。</li></ul><h2 id="将svn作为服务"><a href="#将svn作为服务" class="headerlink" title="将svn作为服务"></a>将svn作为服务</h2><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># build this file in /etc/init.d/svn</span><span class="token comment" spellcheck="true"># chmod 755 /etc/init.d/svn</span><span class="token comment" spellcheck="true"># centos下可以用如下命令管理svn: service svn start(restart/stop)</span>SVN_HOME<span class="token operator">=</span>/home/svn<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -f <span class="token string">"/usr/local/subversion/bin/svnserve"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"svnserver startup: cannot start"</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span><span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>    start<span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"Starting svnserve..."</span>        /usr/local/subversion/bin/svnserve -d --listen-port 10901 -r <span class="token variable">$SVN_HOME</span>        <span class="token keyword">echo</span> <span class="token string">"Finished!"</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    stop<span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"Stoping svnserve..."</span>        <span class="token function">killall</span> svnserve        <span class="token keyword">echo</span> <span class="token string">"Finished!"</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    restart<span class="token punctuation">)</span>        <span class="token variable">$0</span> stop        <span class="token variable">$0</span> start        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"Usage: svn { start | stop | restart } "</span>        <span class="token keyword">exit</span> 1esac</code></pre><p>wow，你已经完成初级篇的所有任务了，接下里我们会玩点有趣的 :)</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux下安装、卸载Tomcat脚本</title>
      <link href="/2019/01/01/tomcat-install/"/>
      <url>/2019/01/01/tomcat-install/</url>
      
        <content type="html"><![CDATA[<h2 id="linux下安装Tomcat脚本"><a href="#linux下安装Tomcat脚本" class="headerlink" title="linux下安装Tomcat脚本"></a>linux下安装Tomcat脚本</h2><pre class=" language-shell"><code class="language-shell">#!/bin/bashbase_dir=$(cd "$(dirname "$0")";pwd)JDK_FILE=$(ls | grep jdk-*-linux-*.tar.gz)TOMCAT_FILE=$(ls | grep apache-tomcat-*.tar.gz)#下载JDKdownload(){    os_version=`uname -a`    echo $os_version    architecture="64"    echo "$os_version" | grep -q "$architecture"    if [ $? -eq 0 ]    then        # 不存在即去外网下载jdk文件        if [ ! -f "$JDK_FILE" ]; then            echo "您正在使用64位操作系统，为您选择64位JDK"            wget http://7xls9k.dl1.z0.glb.clouddn.com/jdk-8u60-linux-x64.tar.gz        fi    else        # 不存在即去外网下载jdk文件        if [ ! -f "$JDK_FILE" ]; then            echo "您正在使用32位操作系统，为您选择32位JDK"            wget http://7xls9k.dl1.z0.glb.clouddn.com/jdk-8u60-linux-i586.tar.gz        fi    fi    #下载tomcat    if [ ! -f "$TOMCAT_FILE" ]; then        wget http://7xls9k.dl1.z0.glb.clouddn.com/apache-tomcat-8.0.26.tar.gz    fi    JDK_FILE=$(ls | grep jdk-*-linux-*.tar.gz)    TOMCAT_FILE=$(ls | grep apache-tomcat-*.tar.gz)}#安装JDKinstall_jdk(){    JAVA_DIR=/usr/local/java    JDK_DIR="jdk1.8.0_60"    JDK_PATH="$JAVA_DIR"/"$JDK_DIR"    tar xzf $JDK_FILE    mkdir -p $JAVA_DIR    mv $JDK_DIR  $JAVA_DIR    #配置环境变量    cp ~/.bashrc ~/.bashrc.backup.java    if [ ! -n "$JAVA_HOME" ]; then        echo "export JAVA_HOME=\"$JDK_PATH\"" >> ~/.bashrc    fi    if [ ! -n "$JRE_HOME" ]; then        echo "export JRE_HOME=\"\$JAVA_HOME/jre\"" >> ~/.bashrc    fi       if [ ! -n "$CLASSPATH" ]; then        echo "export CLASSPATH=.:\$JDK_PATH/lib/dt.jar:\$JDK_PATH/lib/tools.jar" >> ~/.bashrc    fi    echo "export PATH=\$JAVA_HOME/bin:\$JRE_HOME/bin:\$PATH" >> ~/.bashrc    source ~/.bashrc    echo "JDK install success!"}#安装tomcatinstall_tomcat(){    TOMCAT_DIR=/usr/local/tomcat8    mkdir -p $TOMCAT_DIR    tar xzf $TOMCAT_FILE    mv apache-tomcat-8.0.26 tomcat8    mv tomcat8 /usr/local/    cp ~/.bashrc ~/.bashrc.backup.tomcat8    if [ ! -n "$TOMCAT_HOME" ]; then        echo "export TOMCAT_HOME=$TOMCAT_DIR" >> ~/.bashrc    fi    if [ ! -n "$CATALINA_HOME" ]; then        echo "export CATALINA_HOME=$TOMCAT_DIR" >> ~/.bashrc    fi    source ~/.bashrc    echo "Tomact install success!"}main(){    download    if [ $? != 0 ]; then        echo "tomcat & JDK download  failed"        exit 1    fi    install_jdk    if [ $? != 0 ]; then        echo "JDK install failed"        exit 1    fi    install_tomcat    if [ $? != 0 ]; then        echo "Tomcat install failed"        exit 1    fi}main</code></pre><h2 id="Linux下卸载Tomcat脚本"><a href="#Linux下卸载Tomcat脚本" class="headerlink" title="Linux下卸载Tomcat脚本"></a>Linux下卸载Tomcat脚本</h2><pre class=" language-shell"><code class="language-shell">#!/bin/bash#卸载JDKuninstall_jdk(){    JAVA_DIR=/usr/local/java/jdk1.8.0_60    TOMCAT_DIR=/usr/local/tomcat8    if [ -d "$JAVA_DIR" ]; then        rm -rf $JAVA_DIR    fi    if [ -d "$TOMCAT_DIR" ]; then        rm -rf $TOMCAT_DIR    fi    #环境变量    if [ -f "~/.bashrc.backup.tomcat8" ]; then        mv ~/.bashrc.backup.tomcat8 ~/.bashrc    fi    if [ -f "~/.bashrc.backup.java" ]; then        mv ~/.bashrc.backup.java ~/.bashrc    fi    source ~/.bashrc    echo "JDK,Tomcat uninstall success!"    cd}main(){    uninstall_jdk    if [ $? != 0 ]; then        echo "JDK,Tomcat uninstall failed"        exit 1    fi}main</code></pre><pre class=" language-shell"><code class="language-shell">#!/bin/bash  # Source function library.  . /etc/rc.d/init.d/functions  export JAVA_HOME=export JRE_HOME=# tomcat名字tcName=tomcat-$1basedir=/data/program/tomcat/$tcNametclog=${basedir}/logs/catalina.outRETVAL=0  start(){         checkrun          if [ $RETVAL -eq 0 ]; then                  echo "###### Tomcat正在启动 ######"                  $basedir/bin/startup.sh                  touch /var/lock/subsys/${tcNo}                checklog                 status        else                  echo "###### Tomcat启动成功 ######"          fi  }  # 停止某一台tomcat，如果是重启则带re参数，表示不查看日志，等待启动时再提示查看  stop(){        checkrun          if [ $RETVAL -eq 1 ]; then                  echo "###### Tomcat正在关闭 ######"                  $basedir/bin/shutdown.sh                  if [ "$1" != "re" ]; then                  checklog                else                  sleep 5                fi                rm -f /var/lock/subsys/${tcNo}                 status        else                  echo "###### Tomcat关闭成功 ######"          fi  }  status(){        checkrun        if [ $RETVAL -eq 1 ]; then                echo -n "-- Tomcat ( pid "                  ps ax --width=1000 |grep ${tcName}|grep "org.apache.catalina.startup.Bootstrap start" | awk '{printf $1 " "}'                echo -n ") 正在运行"                  echo          else                echo "###### Tomcat未运行 ######"          fi        #echo "---------------------------------------------"  }# 查看tomcat日志，带vl参数log(){        status        checklog yes}# 如果tomcat正在运行，强行杀死tomcat进程，关闭tomcatkill(){        checkrun        if [ $RETVAL -eq 1 ]; then            read -p "###### 确定要杀死 ${tcName} 的进程吗?[no])" answer            case $answer in                Y|y|YES|yes|Yes)                    ps ax --width=1000 |grep ${tcName}|grep "org.apache.catalina.startup.Bootstrap start" | awk '{printf $1 " "}'|xargs kill -9                      status                ;;                *);;            esac        else            echo "###### 退出 [$tcName] ######"        fi}checkrun(){          ps ax --width=1000 |grep ${tcName}| grep "[o]rg.apache.catalina.startup.Bootstrap start" | awk '{printf $1 " "}' | wc | awk '{print $2}' >/tmp/tomcat_process_count.txt          read line < /tmp/tomcat_process_count.txt          if [ $line -gt 0 ]; then                  RETVAL=1                  return $RETVAL          else                  RETVAL=0                  return $RETVAL          fi  }  # 如果是直接查看日志viewlog，则不提示输入[yes]，否则就是被stop和start调用，需提示是否查看日志checklog(){        answer=$1        if [ "$answer" != "yes" ]; then            read -p "###### 查看 <catalina.out> 日志吗 $2?[yes])" answer        fi        case $answer in            Y|y|YES|yes|Yes|"")                tail -f ${tclog}            ;;            *)            #    status            #    exit 0            ;;        esac}checkexist(){        if [ ! -d $basedir ]; then            echo "###### tomcat $basedir 不存在 ######"            exit 0        fi}case "$2" in  start)          checkexist        start          exit 0        ;;  stop)          checkexist        stop          exit 0        ;;  restart)          checkexist        stop re         start         exit 0        ;;  status)          checkexist        status          #$basedir/bin/catalina.sh version          exit 0        ;;  log)        checkexist        log        exit 0        ;;kill)        checkexist        status        kill        exit 0        ;;*)          echo "###### 使用方法: service $0 [start|stop|restart|status|log|kill]"          echo "###### 举个栗子-> service tomcat xintr start"        esac  exit 0</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MVC框架实现篇</title>
      <link href="/2019/01/01/mvc/"/>
      <url>/2019/01/01/mvc/</url>
      
        <content type="html"><![CDATA[<h1 id="MVC框架实现篇"><a href="#MVC框架实现篇" class="headerlink" title="MVC框架实现篇"></a>MVC框架实现篇</h1><h1 id="如何设计一个JavaWeb-MVC框架"><a href="#如何设计一个JavaWeb-MVC框架" class="headerlink" title="如何设计一个JavaWeb MVC框架"></a>如何设计一个JavaWeb MVC框架</h1><p>通过使用Java语言实现一个完整的框架设计，这个框架中主要内容有第一小节介绍的Web框架的结构规划，例如采用MVC模式来进行开发，程序的执行流程设计等内容；第二小节介绍框架的第一个功能：路由，如何让访问的URL映射到相应的处理逻辑；第三小节介绍处理逻辑，如何设计一个公共的 <code>调度器</code>，对象继承之后处理函数中如何处理response和request；第四小节至第六小节介绍如何框架的一些辅助功能，例如配置信息，数据库操作等；最后介绍如何基于Web框架实现一个简单的增删改查，包括User的添加、修改、删除、显示列表等操作。</p><p>通过这么一个完整的项目例子，我期望能够让读者了解如何开发Web应用，如何搭建自己的目录结构，如何实现路由，如何实现MVC模式等各方面的开发内容。在框架盛行的今天，MVC也不再是神话。经常听到很多程序员讨论哪个框架好，哪个框架不好， 其实框架只是工具，没有好与不好，只有适合与不适合，适合自己的就是最好的，所以教会大家自己动手写框架，那么不同的需求都可以用自己的思路去实现。</p><p><img src="http://i.imgur.com/QH8SRfB.png" alt=""></p><ul><li>项目源码：<a href="https://github.com/junicorn/mario" target="_blank" rel="noopener">https://github.com/junicorn/mario</a></li><li>示例代码：<a href="https://github.com/junicorn/mario-sample" target="_blank" rel="noopener">https://github.com/junicorn/mario-sample</a></li></ul><p>欢迎Star我写的一个简洁优雅的MVC框架 <a href="https://github.com/biezhi/blade" target="_blank" rel="noopener">Blade</a> :wink:</p><h1 id="项目规划"><a href="#项目规划" class="headerlink" title="项目规划"></a>项目规划</h1><p>做任何事情都需要做好规划，那么我们在开发博客系统之前，同样需要做好项目的规划，如何设置目录结构，如何理解整个项目的流程图，当我们理解了应用的执行过程，那么接下来的设计编码就会变得相对容易了</p><h1 id="创建一个maven项目"><a href="#创建一个maven项目" class="headerlink" title="创建一个maven项目"></a>创建一个maven项目</h1><h2 id="约定一下框架基础信息"><a href="#约定一下框架基础信息" class="headerlink" title="约定一下框架基础信息"></a>约定一下框架基础信息</h2><ul><li>假设我们的web框架名称是 <code>mario</code></li><li>包名是 <code>com.junicorn.mario</code></li></ul><h3 id="命令行创建"><a href="#命令行创建" class="headerlink" title="命令行创建"></a>命令行创建</h3><pre class=" language-sh"><code class="language-sh">mvn archetype:create -DgroupId=com.junicorn -DartifactId=mario -DpackageName=com.junicorn.mario</code></pre><h3 id="Eclipse创建"><a href="#Eclipse创建" class="headerlink" title="Eclipse创建"></a>Eclipse创建</h3><p><img src="http://i.imgur.com/2Spe2n6.png" alt=""></p><p><img src="http://i.imgur.com/ElMZvuG.png" alt=""></p><p>创建好的基本结构是这样的</p><p><img src="http://i.imgur.com/DxHVt9m.png" alt=""></p><p>初始化一下 <code>pom.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.junicorn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mario<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mario<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://github.com/junicorn/mario<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet.version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>OK，项目创建好了，这个将是我们的框架。</p><h1 id="框架流程"><a href="#框架流程" class="headerlink" title="框架流程"></a>框架流程</h1><p>web程序是基于 <code>M(模型)V(视图)C(控制器)</code> 设计的。MVC是一种将应用程序的逻辑层和表现层进行分离的结构方式。在实践中，由于表现层从 Java 中分离了出来，所以它允许你的网页中只包含很少的脚本。</p><ul><li>模型 (Model) 代表数据结构。通常来说，模型类将包含取出、插入、更新数据库资料等这些功能。</li><li>视图 (View) 是展示给用户的信息的结构及样式。一个视图通常是一个网页，但是在Java中，一个视图也可以是一个页面片段，如页头、页尾。它还可以是一个 RSS 页面，或其它类型的“页面”，Jsp已经很好的实现了View层中的部分功能。</li><li>控制器 (Controller) 是模型、视图以及其他任何处理HTTP请求所必须的资源之间的中介，并生成网页。</li></ul><h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><p>mario 是基于servlet实现的mvc，用一个全局的Filter来做核心控制器，使用sql2o框架作为数据库基础访问。<br>使用一个接口 <code>Bootstrap</code> 作为初始化启动，实现它并遵循Filter参数约定即可。</p><p>建立路由、数据库、视图相关的包和类，下面是结构：</p><p><img src="http://i.imgur.com/LEHfXYT.png" alt=""></p><h1 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h1><p>现代 Web 应用的 URL 十分优雅，易于人们辨识记忆。 路由的表现形式如下：</p><pre><code>/resources/:resource/actions/:actionhttp://bladejava.comhttp://bladejava.com/docs/modules/route</code></pre><p>那么我们在java语言中将他定义一个 <code>Route</code> 类, 用于封装一个请求的最小单元，<br>在Mario中我们设计一个路由的对象如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 路由 * @author biezhi */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Route</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 路由path     */</span>    <span class="token keyword">private</span> String path<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 执行路由的方法     */</span>    <span class="token keyword">private</span> Method action<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 路由所在的控制器     */</span>    <span class="token keyword">private</span> Object controller<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> path<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPath</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Method <span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> action<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAction</span><span class="token punctuation">(</span>Method action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>action <span class="token operator">=</span> action<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">getController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> controller<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setController</span><span class="token punctuation">(</span>Object controller<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>controller <span class="token operator">=</span> controller<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>所有的请求在程序中是一个路由，匹配在 <code>path</code> 上，执行靠 <code>action</code>，处于 <code>controller</code> 中。</p><p>Mario使用一个Filter接收所有请求，因为从Filter过来的请求有无数，如何知道哪一个请求对应哪一个路由呢？<br>这时候需要设计一个路由匹配器去查找路由处理我们配置的请求，<br>有了路由匹配器还不够，这么多的路由我们如何管理呢？再来一个路由管理器吧，下面就创建路由匹配器和管理器2个类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 路由管理器，存放所有路由的 * @author biezhi */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Routers</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Routers<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Route<span class="token operator">></span> routes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Route<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Routers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Route<span class="token operator">></span> routes<span class="token punctuation">)</span><span class="token punctuation">{</span>        routes<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>Route route<span class="token punctuation">)</span><span class="token punctuation">{</span>        routes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeRoute</span><span class="token punctuation">(</span>Route route<span class="token punctuation">)</span><span class="token punctuation">{</span>        routes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> Method action<span class="token punctuation">,</span> Object controller<span class="token punctuation">)</span><span class="token punctuation">{</span>        Route route <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        route<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        route<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        route<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Add Route：["</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Route<span class="token operator">></span> <span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> routes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRoutes</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Route<span class="token operator">></span> routes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routes <span class="token operator">=</span> routes<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的代码很简单，这个管理器里用List存储所有路由，公有的 <code>addRoute</code> 方法是给外部调用的。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 路由匹配器，用于匹配路由 * @author biezhi */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteMatcher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Route<span class="token operator">></span> routes<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RouteMatcher</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Route<span class="token operator">></span> routes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routes <span class="token operator">=</span> routes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRoutes</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Route<span class="token operator">></span> routes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routes <span class="token operator">=</span> routes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据path查找路由     * @param path    请求地址     * @return        返回查询到的路由     */</span>    <span class="token keyword">public</span> Route <span class="token function">findRoute</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String cleanPath <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Route<span class="token operator">></span> matchRoutes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Route<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Route route <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchesPath</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cleanPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                matchRoutes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 优先匹配原则</span>        <span class="token function">giveMatch</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> matchRoutes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> matchRoutes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> matchRoutes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">giveMatch</span><span class="token punctuation">(</span><span class="token keyword">final</span> String uri<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Route<span class="token operator">></span> routes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Route<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Route o1<span class="token punctuation">,</span> Route o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">matchesPath</span><span class="token punctuation">(</span>String routePath<span class="token punctuation">,</span> String pathToMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        routePath <span class="token operator">=</span> routePath<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>PathUtil<span class="token punctuation">.</span>VAR_REGEXP<span class="token punctuation">,</span> PathUtil<span class="token punctuation">.</span>VAR_REPLACE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pathToMatch<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"(?i)"</span> <span class="token operator">+</span> routePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">parsePath</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        path <span class="token operator">=</span> PathUtil<span class="token punctuation">.</span><span class="token function">fixPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            URI uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> uri<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">URISyntaxException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>路由匹配器使用了正则去遍历路由列表，匹配合适的路由。当然我不认为这是最好的方法，<br>因为路由的量很大之后遍历的效率会降低，但这样是可以实现的，如果你有更好的方法可以告诉我 :)</p><p>在下一章节我们需要对请求处理做设计了~</p><h1 id="控制器设计"><a href="#控制器设计" class="headerlink" title="控制器设计"></a>控制器设计</h1><p>一个MVC框架里 <code>C</code> 是核心的一块，也就是控制器，每个请求的接收，都是由控制器去处理的。<br>在Mario中我们把控制器放在路由对象的controller字段上，实际上一个请求过来之后最终是落在某个方法去处理的。</p><p>简单的方法我们可以使用反射实现动态调用方法执行，当然这对性能并不友好，你可以用缓存Method或者更高明的技术去做。<br>在这里我们不提及太麻烦的东西，因为初步目标是实现MVC框架，所以给大家提醒一下有些了解即可。</p><p>控制器的处理部分放在了核心Filter中，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Mario MVC核心处理器 * @author biezhi * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MarioFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MarioFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> RouteMatcher routeMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RouteMatcher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Route<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ServletContext servletContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        Mario mario <span class="token operator">=</span> Mario<span class="token punctuation">.</span><span class="token function">me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mario<span class="token punctuation">.</span><span class="token function">isInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String className <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"bootstrap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Bootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBootstrap</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>            bootstrap<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>mario<span class="token punctuation">)</span><span class="token punctuation">;</span>            Routers routers <span class="token operator">=</span> mario<span class="token punctuation">.</span><span class="token function">getRouters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> routers<span class="token punctuation">)</span><span class="token punctuation">{</span>                routeMatcher<span class="token punctuation">.</span><span class="token function">setRoutes</span><span class="token punctuation">(</span>routers<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            servletContext <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mario<span class="token punctuation">.</span><span class="token function">setInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Bootstrap <span class="token function">getBootstrap</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> className<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                Bootstrap bootstrap <span class="token operator">=</span> <span class="token punctuation">(</span>Bootstrap<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> bootstrap<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"init bootstrap class error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 请求的uri</span>        String uri <span class="token operator">=</span> PathUtil<span class="token punctuation">.</span><span class="token function">getRelativePath</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Request URI："</span> <span class="token operator">+</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        Route route <span class="token operator">=</span> routeMatcher<span class="token punctuation">.</span><span class="token function">findRoute</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果找到</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>route <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 实际执行方法</span>            <span class="token function">handle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">,</span> Route route<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化上下文</span>        Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        Response response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>httpServletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        MarioContext<span class="token punctuation">.</span><span class="token function">initContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object controller <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">getController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 要执行的路由方法</span>        Method actionMethod <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行route方法</span>        <span class="token function">executeMethod</span><span class="token punctuation">(</span>controller<span class="token punctuation">,</span> actionMethod<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取方法内的参数     */</span>    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getArgs</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> params<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> paramTypeClazz <span class="token operator">=</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>paramTypeClazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Request<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>paramTypeClazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Response<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> args<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 执行路由方法     */</span>    <span class="token keyword">private</span> Object <span class="token function">executeMethod</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token function">getArgs</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ReflectUtil<span class="token punctuation">.</span><span class="token function">invokeMehod</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> ReflectUtil<span class="token punctuation">.</span><span class="token function">invokeMehod</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里执行的流程是酱紫的：</p><ol><li>接收用户请求</li><li>查找路由</li><li>找到即执行配置的方法</li><li>找不到你看到的应该是404</li></ol><p>看到这里也许很多同学会有点疑问，我们在说路由、控制器、匹配器，可是我怎么让它运行起来呢？<br>您可说到点儿上了，几乎在任何框架中都必须有配置这项，所谓的零配置都是扯淡。不管硬编码还是配置文件方式，<br>没有配置，框架的易用性和快速开发靠什么完成，又一行一行编写代码吗? 如果你说机器学习，至少现在好像没人用吧。</p><p>扯淡完毕，下一节来进入全局配置设计 -&gt;</p><h1 id="配置设计"><a href="#配置设计" class="headerlink" title="配置设计"></a>配置设计</h1><p>Mario中所有的配置都可以在 <code>Mario</code> 全局唯一对象完成，将它设计为单例。</p><p>要运行起来整个框架，Mario对象是核心，看看里面都需要什么吧！</p><ul><li>添加路由</li><li>读取资源文件</li><li>读取配置</li><li>等等</li></ul><p>由此我们简单的设计一个Mario全局对象：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Mario * @author biezhi * */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Mario</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 存放所有路由     */</span>    <span class="token keyword">private</span> Routers routers<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 配置加载器     */</span>    <span class="token keyword">private</span> ConfigLoader configLoader<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 框架是否已经初始化     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> init <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Mario</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        routers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Routers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> init<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> init<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>init <span class="token operator">=</span> init<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MarioHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> Mario ME <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mario</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Mario <span class="token function">me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> MarioHolder<span class="token punctuation">.</span>ME<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mario <span class="token function">addConf</span><span class="token punctuation">(</span>String conf<span class="token punctuation">)</span><span class="token punctuation">{</span>        configLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getConf</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> configLoader<span class="token punctuation">.</span><span class="token function">getConf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mario <span class="token function">addRoutes</span><span class="token punctuation">(</span>Routers routers<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routers<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>routers<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Routers <span class="token function">getRouters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> routers<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加路由     * @param path            映射的PATH     * @param methodName    方法名称     * @param controller    控制器对象     * @return                返回Mario     */</span>    <span class="token keyword">public</span> Mario <span class="token function">addRoute</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> String methodName<span class="token punctuation">,</span> Object controller<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Method method <span class="token operator">=</span> controller<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> Request<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Response<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>routers<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> method<span class="token punctuation">,</span> controller<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样在系统中永远保持一个Mario实例，我们用它来操作所有配置即可。</p><h3 id="在Boostrap的init方法中使用"><a href="#在Boostrap的init方法中使用" class="headerlink" title="在Boostrap的init方法中使用"></a>在<code>Boostrap</code>的<code>init</code>方法中使用</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>Mario mario<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Index index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mario<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"index"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    mario<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">"/html"</span><span class="token punctuation">,</span> <span class="token string">"html"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样，一个简单的MVC后端已经形成了！接下来我们要将结果展现在JSP文件中，要做视图的渲染设计 LET’S GO!</p><h1 id="视图设计"><a href="#视图设计" class="headerlink" title="视图设计"></a>视图设计</h1><p>我们已经完成了MVC中的C层，还有M和V没有做呢。这一小节来对视图进行设计，从后台到前台的渲染是这样的<br>后台给定一个视图位置，输出到前端JSP或者其他模板引擎上，做一个非常简单的接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 视图渲染接口 * @author biezhi * */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Render</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 渲染到视图     * @param view        视图名称     * @param writer    写入对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span>String view<span class="token punctuation">,</span> Writer writer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>具体的实现我们先写一个JSP的，当你在使用Servlet进行开发的时候已经习惯了这句语法：</p><pre class=" language-java"><code class="language-java">servletRequest<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>viewPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么一个JSP的渲染实现就很简单了</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * JSP渲染实现 * @author biezhi * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JspRender</span> <span class="token keyword">implements</span> <span class="token class-name">Render</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span>String view<span class="token punctuation">,</span> Writer writer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String viewPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getViewPath</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest servletRequest <span class="token operator">=</span> MarioContext<span class="token punctuation">.</span><span class="token function">me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRaw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletResponse servletResponse <span class="token operator">=</span> MarioContext<span class="token punctuation">.</span><span class="token function">me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRaw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            servletRequest<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>viewPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">getViewPath</span><span class="token punctuation">(</span>String view<span class="token punctuation">)</span><span class="token punctuation">{</span>        Mario mario <span class="token operator">=</span> Mario<span class="token punctuation">.</span><span class="token function">me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String viewPrfix <span class="token operator">=</span> mario<span class="token punctuation">.</span><span class="token function">getConf</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>VIEW_PREFIX_FIELD<span class="token punctuation">)</span><span class="token punctuation">;</span>        String viewSuffix <span class="token operator">=</span> mario<span class="token punctuation">.</span><span class="token function">getConf</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>VIEW_SUFFIX_FIELD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> viewSuffix <span class="token operator">||</span> viewSuffix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            viewSuffix <span class="token operator">=</span> Const<span class="token punctuation">.</span>VIEW_SUFFIX<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> viewPrfix <span class="token operator">||</span> viewPrfix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            viewPrfix <span class="token operator">=</span> Const<span class="token punctuation">.</span>VIEW_PREFIX<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String viewPath <span class="token operator">=</span> viewPrfix <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> view<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>view<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>viewSuffix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            viewPath <span class="token operator">+=</span> viewSuffix<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> viewPath<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"[/]+"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置 JSP 视图的位置和后缀可以在配置文件或者硬编码中进行，当然这看你的习惯，<br>默认设置了 JSP 在 <code>/WEB-INF/</code> 下，后缀是 <code>.jsp</code> 你懂的！</p><p>怎么用可以参考 <code>mario-sample</code> 这个项目，因为真的很简单 相信你自己。</p><p>在下一节中我们就要和数据库打交道了，尝试新的旅程吧 :)</p><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><p>这一小节是对数据库操作做一个简单的封装，不涉及复杂的事务操作等。</p><p>我选用了Sql2o作为底层数据库框架作为支持，它的简洁易用性让我刮目相看，后面我们也会写如何实现一个ORM框架。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数据库支持 * @author biezhi * */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MarioDb</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Sql2o sql2o <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">MarioDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化数据库配置     * @param url     * @param user     * @param pass     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String user<span class="token punctuation">,</span> String pass<span class="token punctuation">)</span><span class="token punctuation">{</span>        sql2o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sql2o</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化数据库配置     * @param dataSource     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>        sql2o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sql2o</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查询一个对象     * @param sql     * @param clazz     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">get</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查询一个列表     * @param sql     * @param clazz     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getList</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getList</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查询一个对象返回为map类型     * @param sql     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getMap</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查询一个列表并返回为list&lt;map>类型     * @param sql     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">getMapList</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getMapList</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 插入一条记录     * @param sql     * @param params     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Object <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>        StringBuffer sqlBuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlBuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" values ("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String a <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String name <span class="token operator">:</span> fields<span class="token punctuation">)</span><span class="token punctuation">{</span>            sqlBuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">":"</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String newSql <span class="token operator">=</span> sqlBuf<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sqlBuf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> sql2o<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>newSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">executeQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 更新     * @param sql     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 带参数更新     * @param sql     * @param params     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> sql2o<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">executeQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">get</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> sql2o<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">executeQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        T t <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">executeAndFetchFirst</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getMap</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> sql2o<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">executeQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> t <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> query<span class="token punctuation">.</span><span class="token function">executeScalar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">getMapList</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> sql2o<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">executeQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> t <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">executeAndFetchTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getList</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> sql2o<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">executeQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">executeAndFetch</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">executeQuery</span><span class="token punctuation">(</span>Query query<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> params <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>String key <span class="token operator">:</span> keys<span class="token punctuation">)</span><span class="token punctuation">{</span>                query<span class="token punctuation">.</span><span class="token function">addParameter</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>设计MVC框架部分已经完成，下一节是一个增删改查的例子</p><h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用户控制器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用户列表     * @param request     * @param response     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">users</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> MarioDb<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token string">"select * from t_user"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加用户界面     * @param request     * @param response     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show_add</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"user_add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 保存方法     * @param request     * @param response     * @throws ParseException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException<span class="token punctuation">{</span>        String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer age <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">queryAsInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String date <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> name <span class="token operator">||</span> null <span class="token operator">==</span> age <span class="token operator">||</span> null <span class="token operator">==</span> date<span class="token punctuation">)</span><span class="token punctuation">{</span>            request<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"user_add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Date bir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> MarioDb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"insert into t_user(name, age, birthday)"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> bir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String ctx <span class="token operator">=</span> MarioContext<span class="token punctuation">.</span><span class="token function">me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String location <span class="token operator">=</span> ctx <span class="token operator">+</span> <span class="token string">"/users"</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"[/]+"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            request<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"user_add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 编辑页面     * @param request     * @param response     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span><span class="token punctuation">{</span>        Integer id <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">queryAsInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            User user <span class="token operator">=</span> MarioDb<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"select * from t_user where id = :id"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"user_edit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 修改信息     * @param request     * @param response     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span><span class="token punctuation">{</span>        Integer id <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">queryAsInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer age <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">queryAsInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> id <span class="token operator">||</span> null <span class="token operator">==</span> name <span class="token operator">||</span> null <span class="token operator">==</span> age <span class="token punctuation">)</span><span class="token punctuation">{</span>            request<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"user_edit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> MarioDb<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"update t_user set name = :name, age = :age where id = :id"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String ctx <span class="token operator">=</span> MarioContext<span class="token punctuation">.</span><span class="token function">me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String location <span class="token operator">=</span> ctx <span class="token operator">+</span> <span class="token string">"/users"</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"[/]+"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            request<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"user_edit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除     * @param request     * @param response     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span><span class="token punctuation">{</span>        Integer id <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">queryAsInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            MarioDb<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"delete from t_user where id = :id"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String ctx <span class="token operator">=</span> MarioContext<span class="token punctuation">.</span><span class="token function">me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String location <span class="token operator">=</span> ctx <span class="token operator">+</span> <span class="token string">"/users"</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"[/]+"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://i5.tietuku.com/b77fdcfe2cecf753.png" alt=""></p><ul><li><a href="https://github.com/junicorn/mario-sample" target="_blank" rel="noopener">演示程序代码</a></li><li><a href="https://github.com/biezhi/blade" target="_blank" rel="noopener">Blade框架</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用hexo搭建博客系列</title>
      <link href="/2019/01/01/hexo/"/>
      <url>/2019/01/01/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="使用hexo搭建博客系列"><a href="#使用hexo搭建博客系列" class="headerlink" title="使用hexo搭建博客系列"></a>使用hexo搭建博客系列</h2><h4 id="1-分分钟部署一个Hexo环境"><a href="#1-分分钟部署一个Hexo环境" class="headerlink" title="1. 分分钟部署一个Hexo环境"></a>1. 分分钟部署一个Hexo环境</h4><h4 id="2-了解配置"><a href="#2-了解配置" class="headerlink" title="2. 了解配置"></a>2. 了解配置</h4><h2 id="1-安装NodeJS"><a href="#1-安装NodeJS" class="headerlink" title="1. 安装NodeJS"></a>1. 安装NodeJS</h2><p>我的系统环境：Win7_x64<br>去Nodejs的官网下载：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><p>这里我下载的是</p><p><img src="https://i.imgur.com/l1hRF0V.png" alt=""></p><p>然后按照提示一步一步安装即可，我装在了C盘，这个盘装了SSD会快一些。<br>NodeJS会自动将<code>bin</code>写入环境变量，来试试是否安装成功 输入<code>node -v</code>命令查看nodejs版本。</p><p><img src="https://i.imgur.com/Mvxp2C1.png" alt=""></p><h2 id="2-配置淘宝-NPM-镜像"><a href="#2-配置淘宝-NPM-镜像" class="headerlink" title="2. 配置淘宝 NPM 镜像"></a>2. 配置淘宝 NPM 镜像</h2><p>cnpmjs.org是一个非常棒的npm国内镜像。由于其使用量越来越大，加上淘宝内部也有很多项目使用 NodeJS，于是，淘宝正式基于 cnpmjs 推出了镜像服务<br>淘宝的 NPM 镜像是一个完整的npmjs.org镜像。你可以用此代替官方版本(只读)，同步频率目前为 15分钟 一次以保证尽量与官方服务同步。</p><p><img src="https://i.imgur.com/eJFvHTK.png" alt=""></p><p>当前 registry.npm.taobao.org 是从 registry.npmjs.org 进行全量同步的.<br>当前 npm.taobao.org 运行版本是: <a href="mailto:cnpmjs.org@0.4.1" target="_blank" rel="noopener">cnpmjs.org@0.4.1</a><br>系统运行在 <a href="mailto:Node.js@v0.11.12" target="_blank" rel="noopener">Node.js@v0.11.12</a> 上.</p><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>你可以使用淘宝定制的 <a href="https://github.com/cnpm/cnpm" target="_blank" rel="noopener">cnpm</a> (gzip 压缩支持) 命令行工具代替默认的 <code>npm</code>:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre><p>我使用的就是这个。</p><p><img src="https://i.imgur.com/ZIw1Vkr.png" alt=""></p><p>或者你直接通过添加 <code>npm</code> 参数 <code>alias</code> 一个新命令:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">alias</span> cnpm<span class="token operator">=</span><span class="token string">"npm --registry=https://registry.npm.taobao.org \--cache=<span class="token variable">$HOME</span>/.npm/.cache/cnpm \--disturl=https://npm.taobao.org/dist \--userconfig=<span class="token variable">$HOME</span>/.cnpmrc"</span><span class="token comment" spellcheck="true"># Or alias it in .bashrc or .zshrc</span>$ <span class="token keyword">echo</span> <span class="token string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \  --cache=<span class="token variable">$HOME</span>/.npm/.cache/cnpm \  --disturl=https://npm.taobao.org/dist \  --userconfig=<span class="token variable">$HOME</span>/.cnpmrc"'</span> <span class="token operator">>></span> ~/.zshrc <span class="token operator">&amp;&amp;</span> <span class="token function">source</span> ~/.zshrc</code></pre><h3 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h3><p>从 <a href="http://registry.npm.taobao.org/" target="_blank" rel="noopener">registry.npm.taobao.org</a> 安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝 NPM 会自动在后台进行同步, 并且会让你从官方 NPM <a href="http://registry.npmjs.org/" target="_blank" rel="noopener">registry.npmjs.org</a> 进行安装. 下次你再安装这个模块的时候, 就会直接从 淘宝 NPM 安装了.</p><pre class=" language-bash"><code class="language-bash">$ cnpm <span class="token function">install</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span></code></pre><h3 id="同步模块"><a href="#同步模块" class="headerlink" title="同步模块"></a>同步模块</h3><p>直接通过 <code>sync</code> 命令马上同步一个模块, 只有 <code>cnpm</code> 命令行才有此功能:</p><pre class=" language-bash"><code class="language-bash">$ cnpm <span class="token function">sync</span> connect</code></pre><p>当然, 你可以直接通过 web 方式来同步: <a href="http://npm.taobao.org/sync/connect" target="_blank" rel="noopener">/sync/connect</a></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">open</span> https://npm.taobao.org/sync/connect</code></pre><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a> 官网的安装说明是 <code>npm install hexo-cli -g</code></p><p>因为我们安装了淘宝的NPM，所以需要使用 <code>cnpm</code> 命令</p><p><img src="https://i.imgur.com/yPkpF4O.png" alt=""></p><p>这样就安装成功了！</p><h2 id="4-HelloWorld"><a href="#4-HelloWorld" class="headerlink" title="4. HelloWorld"></a>4. HelloWorld</h2><p>按照官方教程(注意使用 <code>cnpm</code> 哦)：</p><pre class=" language-bash"><code class="language-bash">$ hexo init blog$ <span class="token function">cd</span> blog$ cnpm <span class="token function">install</span>$ hexo server</code></pre><p>这样就可以运行一个最简单的博客程序了~</p><h2 id="准备启程"><a href="#准备启程" class="headerlink" title="准备启程"></a>准备启程</h2><p>一旦安装了Hexo,运行以下命令初始化Hexo在<code>目录</code></p><pre class=" language-bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ cnpm <span class="token function">install</span></code></pre><p>一旦初始化，你的项目文件夹是这个样子：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>├── _config.yml├── package.json├── scaffolds├── scripts├── <span class="token function">source</span><span class="token operator">|</span>   ├── _drafts<span class="token operator">|</span>   └── _posts└── themes</code></pre><p>下面依次介绍上面各个文件或者目录的用途：</p><ul><li><code>_config.yml</code>站点配置文件，很多全局配置都在这个文件中。</li><li><code>package.json</code> 应用数据。从它可以看出hexo版本信息，以及它所默认或者说依赖的一些组件。</li><li><code>scaffolds</code> 模版文件。当你创建一篇新的文章时，hexo会依据模版文件进行创建，主要用在你想在每篇文章都添加一些共性的内容的情况下。</li><li><code>scripts</code> 放脚本的文件夹， 就是放js文件的地方</li><li><code>source</code> 这个文件夹就是放文章的地方了，除了文章还有一些主要的资源，比如文章里的图片，文件等等东西。这个文件夹最好定期做一个备份，丢了它，整个站点就废了。</li><li><code>themes</code> 主题文件夹。</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="config-yml配置文件"><a href="#config-yml配置文件" class="headerlink" title="_config.yml配置文件"></a>_config.yml配置文件</h3><p>站点配置文件，你可以在这里进行大多数配置。</p><h3 id="网站设置"><a href="#网站设置" class="headerlink" title="网站设置"></a>网站设置</h3><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>站点名字，也就是html的title，会显示在浏览器标签上</td></tr><tr><td>subtitle</td><td>站点副标题，会显示在首页上，可以不填</td></tr><tr><td>description</td><td>站点描述，可以不填</td></tr><tr><td>author</td><td>作者名称</td></tr><tr><td>language</td><td>语言</td></tr><tr><td>timezone</td><td>站点时区，默认是电脑时间</td></tr></tbody></table><h3 id="链接设置"><a href="#链接设置" class="headerlink" title="链接设置"></a>链接设置</h3><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>站点网址</td></tr><tr><td>root</td><td>站点根目录</td></tr><tr><td>permalink</td><td>文章的永久网址链接，默认是<code>:year/:month/:day/:title/</code>，指的什么意思？比如我一篇叫『love』的文章是在2012年1月1日写的，那么它对应的链接就是<code>http://yoururl/2012/01/01/love/</code></td></tr><tr><td>permalink_default</td></tr></tbody></table><blockquote><p>如果网址是次级目录，比如：<code>http://example.com/blog</code>，那么就要设置url为<code>http://example.com/blog</code>，并且root要设置为<code>/blog/</code>。</p></blockquote><h3 id="目录设置"><a href="#目录设置" class="headerlink" title="目录设置"></a>目录设置</h3><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>source_dir</td><td>source目录，默认值为source</td></tr><tr><td>public_dir</td><td>public目录，静态网站生成的地方，默认值为public</td></tr><tr><td>tag_dir</td><td>tag目录</td></tr><tr><td>archive_dir</td><td>Archive目录</td></tr><tr><td>category_dir</td><td>分类目录</td></tr><tr><td>code_dir</td><td>代码目录</td></tr><tr><td>i18n_dir</td><td>i18n目录</td></tr><tr><td>skip_render</td><td>不想被渲染的路径</td></tr></tbody></table><h3 id="写作设置"><a href="#写作设置" class="headerlink" title="写作设置"></a>写作设置</h3><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>new_post_name</td><td>新建文章默认文件名，默认值为 :title.md，比如你执行命令hexo new hello，就会默认在_post目录下创建一个hello.md的文件</td></tr><tr><td>default_layout</td><td>默认布局</td></tr><tr><td>titlecase</td><td></td></tr><tr><td>external_link</td><td>在新标签中打开一个外部链接，默认为true</td></tr><tr><td>filename_case</td><td>转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大</td></tr><tr><td>render_drafts</td><td>是否渲染_drafts目录下的文章，默认为false</td></tr><tr><td>post_asset_folder</td><td>是否启用Asset Folder，默认为false，至于什么是Asset Folder，后面有讲解</td></tr><tr><td>relative_link</td><td>使链接相对于根文件夹，默认false</td></tr><tr><td>future</td><td>是否显示未来日期文章，默认为true</td></tr><tr><td>highlight</td><td>代码块设置</td></tr></tbody></table><h3 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h3><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>default_category</td><td>默认分类，默认为无分类，当然你可以设置一个默认分类。</td></tr><tr><td>category_map</td><td>分类缩略名</td></tr><tr><td>tag_map</td><td>标签缩略名</td></tr></tbody></table><h3 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h3><p>Hexo使用的<a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a>来处理时间的。</p><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>date_format</td><td>日期格式，默认为MMM D YYYY，一般我们喜欢使用YYYY-MM-DD的格式，其他格式模版可以查看<a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a></td></tr><tr><td>time_format</td><td>时间格式，默认为H:mm:ss</td></tr></tbody></table><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>per_page</td><td>一页显示多少篇文章，0 为不分页，默认值为 10</td></tr><tr><td>pagination_dir</td><td>分页目录，默认值为page</td></tr></tbody></table><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>theme</td><td>主题配置，此处填上主题名就OK了，当然在themes目录下一定要有你配置的主题文件夹</td></tr><tr><td>deploy</td><td>部署配置，将本地public目录也就是网站部署到服务器上的配置</td></tr></tbody></table><h3 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h3><p>应用数据，默认安装了 <code>EJS</code>，<code>Stylus</code> 和 <code>Markdown</code> 来渲染。如果你不需要可以卸载它们。</p><pre class=" language-json"><code class="language-json">package.json<span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"hexo-site"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"hexo"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">""</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"hexo"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-archive"</span><span class="token operator">:</span> <span class="token string">"^0.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-category"</span><span class="token operator">:</span> <span class="token string">"^0.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-index"</span><span class="token operator">:</span> <span class="token string">"^0.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-tag"</span><span class="token operator">:</span> <span class="token string">"^0.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-renderer-ejs"</span><span class="token operator">:</span> <span class="token string">"^0.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-renderer-stylus"</span><span class="token operator">:</span> <span class="token string">"^0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-renderer-marked"</span><span class="token operator">:</span> <span class="token string">"^0.2.4"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-server"</span><span class="token operator">:</span> <span class="token string">"^0.1.2"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p>脚手架文件夹。当你创建一个新文章,Hexo基于<code>scaffolds</code>文件夹里的类型来创建。</p><h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><p>脚本文件夹。扩展Hexo最简单的方法，它会自动执行这个文件夹下的JavaScript文件。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><pre class=" language-bash"><code class="language-bash">$ hexo init <span class="token punctuation">[</span>folder<span class="token punctuation">]</span></code></pre><p>初始化一个网站。如果没有提供<code>folder</code>,Hexo会在当前目录设置网站。</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><p>创建一篇文章，如果不指定layout，那么就使用<code>_config.yml</code>中<code>default_layout</code>的值，标题中如果有空格，将整个<code>title</code>放到引号中。<br>比如，<code>hexo new &quot;hello world&quot;</code>创建一篇叫hello world的文章。</p><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>生成静态文件：</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--deploy</code></td><td>生成完后直接部署</td></tr><tr><td><code>-w</code>, <code>--watch</code></td><td>监控文件的改变</td></tr></tbody></table><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><pre class=" language-bash"><code class="language-bash">$ hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span></code></pre><p>发布为草稿</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>启动一个本地服务，默认情况下访问 <code>http://localhost:4000/</code></p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>指定端口</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>仅服务静态文件</td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>开启日志</td></tr></tbody></table><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>部署你的站点</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>表示在部署前先重新生成一下站点</td></tr></tbody></table><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><pre class=" language-bash"><code class="language-bash">$ hexo render <span class="token operator">&lt;</span>file1<span class="token operator">></span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.</code></pre><p>渲染文件</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-o</code>, <code>--output</code></td><td>输出到指定文件，我没用过</td></tr></tbody></table><h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><pre class=" language-bash"><code class="language-bash">$ hexo migrate <span class="token operator">&lt;</span>type<span class="token operator">></span></code></pre><p><a href="https://hexo.io/docs/migration.html" target="_blank" rel="noopener">迁移</a>到其他模块的命令。</p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><pre class=" language-bash"><code class="language-bash">$ hexo clean</code></pre><p>删除缓存文件<code>db.json</code>以及生成的public目录，当你修改了某些样式或者配置时，如果发现<code>hexo g</code>后也没有反应，就可以执行一下这个命令。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><pre class=" language-bash"><code class="language-bash">$ hexo list <span class="token operator">&lt;</span>type<span class="token operator">></span></code></pre><p>列出所有路由</p><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><pre class=" language-bash"><code class="language-bash">$ hexo version</code></pre><p>显示hexo的版本信息到控制台</p><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><h3 id="Safe-mode"><a href="#Safe-mode" class="headerlink" title="Safe mode"></a>Safe mode</h3><pre class=" language-bash"><code class="language-bash">$ hexo --safe</code></pre><p>安全模式，使所有插件和脚本不生效</p><h3 id="Debug-mode"><a href="#Debug-mode" class="headerlink" title="Debug mode"></a>Debug mode</h3><pre class=" language-bash"><code class="language-bash">$ hexo --debug</code></pre><p>日志详细信息输出到终端。</p><h3 id="Silent-mode"><a href="#Silent-mode" class="headerlink" title="Silent mode"></a>Silent mode</h3><pre class=" language-bash"><code class="language-bash">$ hexo --silent</code></pre><p>静默模式，不在终端上显示任何信息</p><h3 id="Customize-config-file-path"><a href="#Customize-config-file-path" class="headerlink" title="Customize config file path"></a>Customize config file path</h3><pre class=" language-bash"><code class="language-bash">$ hexo --config custom.yml</code></pre><p>使用一个自定义配置文件替换默认<code>_config.yml</code></p><h3 id="Display-drafts"><a href="#Display-drafts" class="headerlink" title="Display drafts"></a>Display drafts</h3><pre class=" language-bash"><code class="language-bash">$ hexo --draft</code></pre><p>显示草稿文章（位于<code>source/_drafts</code>目录下）</p><h3 id="Customize-CWD"><a href="#Customize-CWD" class="headerlink" title="Customize CWD"></a>Customize CWD</h3><pre class=" language-bash"><code class="language-bash">$ hexo --cwd /path/to/cwd</code></pre><p>自定义当前工作目录路径，假如你没在工作目录下，可以使用这个命令指定一下工作目录路径</p><h2 id="1-开始写作"><a href="#1-开始写作" class="headerlink" title="1. 开始写作"></a>1. 开始写作</h2><p>使用下面的命令创建一个新文章：</p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><p>默认的文章布局是<code>post</code>，当然你可用提供自己的布局文件。你可以编辑 <code>_config.yml</code> 修改默认布局。</p><h3 id="Layout（布局）"><a href="#Layout（布局）" class="headerlink" title="Layout（布局）"></a>Layout（布局）</h3><p>Hexo提供了3个默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。不同布局的文章会被保存到不同的目录，这取决于它的布局类型。<br>自定义布局保存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source/_drafts</td></tr></tbody></table><blockquote><h3 id="不处理文章"><a href="#不处理文章" class="headerlink" title="不处理文章!"></a>不处理文章!</h3><p>如果你不希望你的文章被处理，你可以设置 <code>layout:false</code>。</p></blockquote><h3 id="Filename（文件名）"><a href="#Filename（文件名）" class="headerlink" title="Filename（文件名）"></a>Filename（文件名）</h3><p>默认情况下，hexo使用文章标题作为文件名。<br>你可以编辑 <code>_config.yml</code> 的 <code>new_post_name</code> 设置改变默认的文件名。<br>例如 <code>:year-:month-:day-:title.md</code> 将前缀的文件名后创建日期。你可以使用以下的占位符：</p><table><thead><tr><th>占位符</th><th>描述</th></tr></thead><tbody><tr><td><code>:title</code></td><td>文章标题</td></tr><tr><td><code>:year</code></td><td>创建年份</td></tr><tr><td><code>:month</code></td><td>月份，如4月为<code>04</code></td></tr><tr><td><code>:i_month</code></td><td>月份，单数字，比如4月就是<code>4</code></td></tr><tr><td><code>:day</code></td><td>日期</td></tr><tr><td><code>:i_day</code></td><td>日期</td></tr></tbody></table><h3 id="Drafts（草稿）"><a href="#Drafts（草稿）" class="headerlink" title="Drafts（草稿）"></a>Drafts（草稿）</h3><p>前面hexo提到一个特殊的布局：<code>draft</code>。<br>这种布局的帖子保存到 <code>source/_drafts</code> 文件夹。你可以使用 <code>publish</code> 命令移动草稿到 <code>source/_posts</code> 文件夹。<br>这个命令类似于你使用了 <code>new</code>。</p><pre class=" language-bash"><code class="language-bash">$ hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><p>草稿默认不显示，你可以添加 <code>--draft</code> 选项或者设置 <code>_config.yml</code> 中的 <code>render_drafts</code> 使hexo显示草稿。</p><h3 id="Scaffolds（模版）"><a href="#Scaffolds（模版）" class="headerlink" title="Scaffolds（模版）"></a>Scaffolds（模版）</h3><p>当创建一篇文章,Hexo将构建基于 <code>scaffolds</code> 文件夹中的相应文件。例如:</p><pre class=" language-bash"><code class="language-bash">$ hexo new photo <span class="token string">"My Gallery"</span></code></pre><p>当你运行这个命令，要尝试在 <code>scaffolds</code> 文件夹下找到文件名为 <code>photo.md</code> 的模板文件。下面占位符可以使用模板：</p><table><thead><tr><th>占位符</th><th>描述</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>title</code></td><td>文章标题</td></tr><tr><td><code>date</code></td><td>发布时间</td></tr></tbody></table><h2 id="2-前置申明"><a href="#2-前置申明" class="headerlink" title="2. 前置申明"></a>2. 前置申明</h2><p>前置申明的意思是写在文章前面的一块内容，为了对文章进行某些设置。它有两种书写方式：</p><p><strong>YAML方式，以三短线结束</strong></p><pre class=" language-bash"><code class="language-bash">title: Hello Worlddate: 2013/7/13 20:46:25---</code></pre><p><strong>JSON方式，以三分号结束</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"Hello World"</span>,<span class="token string">"date"</span><span class="token keyword">:</span> <span class="token string">"2013/7/13 20:46:25"</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h3 id="设置以及默认值"><a href="#设置以及默认值" class="headerlink" title="设置以及默认值"></a>设置以及默认值</h3><table><thead><tr><th>设置</th><th>描述</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>title</code></td><td>文章标题</td></tr><tr><td><code>date</code></td><td>发布时间，默认为文件创建时间</td></tr><tr><td><code>updated</code></td><td>文件修改时间</td></tr><tr><td><code>comments</code></td><td>是否开启评论，默认为true</td></tr><tr><td><code>tags</code></td><td>文章标签</td></tr><tr><td><code>categories</code></td><td>文章所属分类</td></tr><tr><td><code>permalink</code></td><td>文章永久链接，一般不用写，默认就行</td></tr></tbody></table><p><strong>分类 &amp; 标签</strong></p><p>分类和标签只支持在文章。分类可能会有多层级别。<br>下面是一个例子：</p><pre class=" language-bash"><code class="language-bash">categories:- Sports- Baseballtags:- Injury- Fight- Shocking</code></pre><h2 id="3-标签插件"><a href="#3-标签插件" class="headerlink" title="3. 标签插件"></a>3. 标签插件</h2><p>这里的标签插件不是文章中的标签，它可以帮助你在文章中插入特定的一些内容。</p><h3 id="Block-Quote（块引用）"><a href="#Block-Quote（块引用）" class="headerlink" title="Block Quote（块引用）"></a>Block Quote（块引用）</h3><p>插入引号与作者、来源和文章的标题。<br><strong>别名</strong>：quote</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% blockquote <span class="token punctuation">[</span>author<span class="token punctuation">[</span>, source<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>link<span class="token punctuation">]</span> <span class="token punctuation">[</span>source_link_title<span class="token punctuation">]</span> %<span class="token punctuation">}</span>content<span class="token punctuation">{</span>% endblockquote %<span class="token punctuation">}</span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>没有任何参数，纯输出blockquote</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% blockquote %<span class="token punctuation">}</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur <span class="token function">sed</span> diam eget dolor fermentum semper at eu lorem.<span class="token punctuation">{</span>% endblockquote %<span class="token punctuation">}</span></code></pre><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><p><strong>引用一本书</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% blockquote David Levithan, Wide Awake %<span class="token punctuation">}</span>Do not just seek happiness <span class="token keyword">for</span> yourself. Seek happiness <span class="token keyword">for</span> all. Through kindness. Through mercy.<span class="token punctuation">{</span>% endblockquote %<span class="token punctuation">}</span></code></pre><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.<br><strong><em>David Levithan</em></strong>——<em>Wide Awake</em></p></blockquote><p><strong>引用自Twitter</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %<span class="token punctuation">}</span>NEW: DevDocs now comes with syntax highlighting. http://devdocs.io<span class="token punctuation">{</span>% endblockquote %<span class="token punctuation">}</span></code></pre><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="noopener">http://devdocs.io</a><br><strong><em>@DevDocs</em></strong>——<em><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">twitter.com/devdocs/status/356095192085962752</a></em></p></blockquote><p><strong>引用网络上一篇文章</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %<span class="token punctuation">}</span>Every interaction is both precious and an opportunity to delight.<span class="token punctuation">{</span>% endblockquote %<span class="token punctuation">}</span></code></pre><blockquote><p>Every interaction is both precious and an opportunity to delight.</p></blockquote><blockquote><p><strong><em>Seth Godin</em></strong>——<em><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome to Island Marketing</a></em></p></blockquote><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>文章中插入代码块<br><strong>别名</strong>：code</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% codeblock <span class="token punctuation">[</span>title<span class="token punctuation">]</span> <span class="token punctuation">[</span>lang:language<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span> <span class="token punctuation">[</span>link text<span class="token punctuation">]</span> %<span class="token punctuation">}</span>code snippet<span class="token punctuation">{</span>% endcodeblock %<span class="token punctuation">}</span></code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><strong>普通代码块</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% codeblock %<span class="token punctuation">}</span>alert<span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span>% endcodeblock %<span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">alert<span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>指定语言</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% codeblock lang:objc %<span class="token punctuation">}</span><span class="token punctuation">[</span>rectangle setX: 10 y: 10 width: 20 height: 20<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">{</span>% endcodeblock %<span class="token punctuation">}</span></code></pre><pre class=" language-objc"><code class="language-objc">[rectangle setX: 10 y: 10 width: 20 height: 20];</code></pre><p><strong>Gist</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% gist gist_id <span class="token punctuation">[</span>filename<span class="token punctuation">]</span> %<span class="token punctuation">}</span></code></pre><p><strong>iframe</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% iframe url <span class="token punctuation">[</span>width<span class="token punctuation">]</span> <span class="token punctuation">[</span>height<span class="token punctuation">]</span> %<span class="token punctuation">}</span></code></pre><p><strong>Image</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% img <span class="token punctuation">[</span>class names<span class="token punctuation">]</span> /path/to/image <span class="token punctuation">[</span>width<span class="token punctuation">]</span> <span class="token punctuation">[</span>height<span class="token punctuation">]</span> <span class="token punctuation">[</span>title text <span class="token punctuation">[</span>alt text<span class="token punctuation">]</span><span class="token punctuation">]</span> %<span class="token punctuation">}</span></code></pre><p><strong>Link</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% <span class="token function">link</span> text url <span class="token punctuation">[</span>external<span class="token punctuation">]</span> <span class="token punctuation">[</span>title<span class="token punctuation">]</span> %<span class="token punctuation">}</span></code></pre><h3 id="更多…"><a href="#更多…" class="headerlink" title="更多…"></a><a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="noopener">更多</a>…</h3><h2 id="4-资源目录x"><a href="#4-资源目录x" class="headerlink" title="4. 资源目录x"></a>4. 资源目录x</h2><p>资源是非文章的文件，在<code>source</code>文件夹中，如图片、css、javascript文件等。<br>Hexo提供了一个更加方便的方式来管理资源。你可以修改 <code>post_asset_folder</code> 设置。</p><pre class=" language-bash"><code class="language-bash">post_asset_folder: <span class="token boolean">true</span></code></pre><p>一旦 <code>post_asset_folder</code> 设置启用,在你创建文章的时候，Hexo会创建一个同名目录，<br>你可以将该文章关联的资源全部放到该目录下。这样就可以更加方便的使用它们了。</p><h3 id="标签插件使用"><a href="#标签插件使用" class="headerlink" title="标签插件使用"></a>标签插件使用</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% asset_path slug %<span class="token punctuation">}</span><span class="token punctuation">{</span>% asset_img slug <span class="token punctuation">[</span>title<span class="token punctuation">]</span> %<span class="token punctuation">}</span><span class="token punctuation">{</span>% asset_link slug <span class="token punctuation">[</span>title<span class="token punctuation">]</span> %<span class="token punctuation">}</span></code></pre><h2 id="5-数据文件"><a href="#5-数据文件" class="headerlink" title="5. 数据文件"></a>5. 数据文件</h2><p>有时，你可能会使用一些不在post中的模版数据，或者你想复用这些数据，<br>那么你可以试用一下Hexo3中的『Data files』功能。这个特性加载 <code>source/_data</code> 目录中的YAML或者JSON文件，从而用到你的网站中。</p><p>例如在 <code>source/_data</code> 文件夹中添加 <code>menu.yml</code></p><pre class=" language-bash"><code class="language-bash">Home: /Gallery: /gallery/Archives: /archives/</code></pre><p>你可用在模板中使用它们：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>% <span class="token keyword">for</span> <span class="token function">link</span> <span class="token keyword">in</span> site.data.menu %<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"{{ link }}"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> loop.key <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token punctuation">{</span>% endfor %<span class="token punctuation">}</span></code></pre><h2 id="6-服务器"><a href="#6-服务器" class="headerlink" title="6. 服务器"></a>6. 服务器</h2><h3 id="Hexo-server"><a href="#Hexo-server" class="headerlink" title="Hexo-server"></a>Hexo-server</h3><p>在Hexo3中，服务器模块从主模块中分开了，你可以通过安装 <a href="https://github.com/hexojs/hexo-server" target="_blank" rel="noopener">hexo-server</a> 来使用它。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-server --save</code></pre><p>一旦服务器安装,运行以下命令启动服务器。<br>默认你的网站将会运行在 <code>http://localhost:4000</code>。<br>当服务器正在运行时,Hexo将自动监控文件更改和更新。你不需要重新启动服务器。</p><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>如果你想修改端口或遇到 <code>EADDRINUSE</code> 错误。您可以添加 <code>-p</code> 选项来设置其他端口。</p><pre class=" language-bash"><code class="language-bash">$ hexo server -p 5000</code></pre><h3 id="Static-Mode"><a href="#Static-Mode" class="headerlink" title="Static Mode"></a>Static Mode</h3><p>在静态模式下,<code>public</code> 文件夹的监控的禁用的。你必须运行 <code>hexo generate</code> 之前启动服务器，通常用于生产环境。</p><pre class=" language-bash"><code class="language-bash">$ hexo server -s</code></pre><h3 id="Custom-IP"><a href="#Custom-IP" class="headerlink" title="Custom IP"></a>Custom IP</h3><p>Hexo运行服务器在默认0.0.0.0。你可以覆盖默认的IP设置</p><pre class=" language-bash"><code class="language-bash">$ hexo server -i 192.168.1.1</code></pre><h2 id="7-生成器"><a href="#7-生成器" class="headerlink" title="7. 生成器"></a>7. 生成器</h2><p>Hexo生成静态文件非常简单、高效。</p><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><h3 id="监听文件修改"><a href="#监听文件修改" class="headerlink" title="监听文件修改"></a>监听文件修改</h3><p>Hexo立即可以看到文件更改并重新生成文件。Hexo将比较SHA1校验和文件和只写文件的改变。</p><pre class=" language-bash"><code class="language-bash">$ hexo generate --watch</code></pre><h3 id="部署后生成"><a href="#部署后生成" class="headerlink" title="部署后生成"></a>部署后生成</h3><p>部署生成后,您可以运行以下命令之一，这2个命令使用结果相同。</p><pre class=" language-bash"><code class="language-bash">$ hexo generate --deploy$ hexo deploy --generate</code></pre><h2 id="8-部署"><a href="#8-部署" class="headerlink" title="8. 部署"></a>8. 部署</h2><p>Hexo为部署提供了一个快速、简单的方法。你只需要一个命令将网站部署到服务器。</p><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>在我们开始之前,你必须在 <code>_config.yml</code> 修改设置。一个有效的部署设置必须有 <code>type</code> 字段。例如:</p><pre class=" language-yml"><code class="language-yml">deploy:  type: git</code></pre><p>你可用同时部署到多个<code>type</code>，Hexo将依次执行每个部署。</p><pre class=" language-yml"><code class="language-yml">deploy:- type: git  repo:- type: heroku  repo:</code></pre><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>编辑设置：</p><pre class=" language-yml"><code class="language-yml">deploy:  type: git  repo: <repository url>  branch: [branch]  message: [message]</code></pre><pre><code>| 选项         | 描述|| ----------- |---------------------------------------------|| repo       | github仓库地址 || branch    | 分支名称 || message |定制提交消息(默认为 `Site updated: {{ now("YYYY-MM-DD HH:mm:ss") }}` )|</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IOC容器实现篇</title>
      <link href="/2019/01/01/ioc/"/>
      <url>/2019/01/01/ioc/</url>
      
        <content type="html"><![CDATA[<h1 id="IOC的概念"><a href="#IOC的概念" class="headerlink" title="IOC的概念"></a>IOC的概念</h1><h2 id="什么是IOC？"><a href="#什么是IOC？" class="headerlink" title="什么是IOC？"></a>什么是IOC？</h2><p>IoC(Inversion of Control)，意为控制反转，不是什么技术，而是一种设计思想。Ioc意味着<strong>将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制</strong>。</p><p>如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p><ul><li><strong>谁控制谁，控制什么</strong>：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</li><li><strong>为何是反转，哪些方面反转了</strong>：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</li></ul><p>下面举个例子说明说明是IOC：</p><p>假设我们要设计一个Girl和一个Boy类，其中Girl有kiss方法，即Girl想要Kiss一个Boy。那么，我们的问题是，Girl如何能够认识这个Boy？</p><p>在我们中国，常见的ＭＭ与GG的认识方式有以下几种:</p><ol><li>青梅竹马</li><li>亲友介绍</li><li>父母包办</li></ol><p>那么哪一种才是最好呢？ 　　</p><ol><li><strong>青梅竹马：Girl从小就知道自己的Boy。</strong></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Girl</span> <span class="token punctuation">{</span>　    <span class="token keyword">void</span> <span class="token function">kiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 　　　 Boy boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 　　<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>然而从开始就创建的Boy缺点就是无法在更换。并且要负责Boy的整个生命周期。如果我们的Girl想要换一个怎么办？（笔者严重不支持Girl经常更换Boy）</p><ol><li><strong>亲友介绍：由中间人负责提供Boy来见面</strong></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Girl</span> <span class="token punctuation">{</span> 　 <span class="token keyword">void</span> <span class="token function">kiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 　　　 Boy boy <span class="token operator">=</span> BoyFactory<span class="token punctuation">.</span><span class="token function">createBoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　 <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>亲友介绍，固然是好。如果不满意，尽管另外换一个好了。但是，亲友BoyFactory经常是以Singleton的形式出现，不然就是，存在于Globals，无处不在，无处不能。实在是太繁琐了一点，不够灵活。我为什么一定要这个亲友掺和进来呢？为什么一定要付给她介绍费呢？万一最好的朋友爱上了我的男朋友呢？ </p><ol><li><strong>父母包办：一切交给父母，自己不用费吹灰之力，只需要等着Kiss就好了。</strong></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Girl</span> <span class="token punctuation">{</span> 　  <span class="token keyword">void</span> <span class="token function">kiss</span><span class="token punctuation">(</span>Boy boy<span class="token punctuation">)</span><span class="token punctuation">{</span> 　　　 <span class="token comment" spellcheck="true">// kiss boy　</span>　　　boy<span class="token punctuation">.</span><span class="token function">kiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 　　<span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>Well，这是对Girl最好的方法，只要想办法贿赂了Girl的父母，并把Boy交给他。那么我们就可以轻松的和Girl来Kiss了。看来几千年传统的父母之命还真是有用哦。至少Boy和Girl不用自己瞎忙乎了。 </p><p>这就是IOC，将对象的创建和获取提取到外部。由外部容器提供需要的组件。 </p><h2 id="IoC能做什么"><a href="#IoC能做什么" class="headerlink" title="IoC能做什么"></a>IoC能做什么</h2><p>IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</p><p>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p><h2 id="IoC和DI"><a href="#IoC和DI" class="headerlink" title="IoC和DI"></a>IoC和DI</h2><p>DI—Dependency Injection，即“依赖注入”：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p>理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p><ul><li>谁依赖于谁：当然是应用程序依赖于IoC容器；</li><li>为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源；</li><li>谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；</li><li>注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</li></ul><p>IoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</p><p>对于Spring Ioc这个核心概念，我相信每一个学习Spring的人都会有自己的理解。这种概念上的理解没有绝对的标准答案，仁者见仁智者见智。<br>理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在框架中堆积木而已，下一节来看看Spring是怎么用的</p><h1 id="Spring中怎么用"><a href="#Spring中怎么用" class="headerlink" title="Spring中怎么用"></a>Spring中怎么用</h1><p>我们在Spring中是这样获取对象的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Lol lol <span class="token operator">=</span> <span class="token punctuation">(</span>Lol<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"lol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       lol<span class="token punctuation">.</span><span class="token function">gank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>一起看看Spring如何让它生效呢，在 <code>applicationContext.xml</code> 配置文件中是酱紫的：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lol<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.biezhi.test.Lol<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>剑圣<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  </code></pre><p><code>Lol</code> 类是这样的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lol</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Lol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在gank!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的代码运行结果自然是 <code>剑圣在gank!!</code>。</p><p>Spring更高级的用法，在3.0版本之后有了基于Annotation的注入实现，为毛每次都要配置 <code>Xml</code> 看到都蛋疼。。</p><p>首先还是要在 <code>xml</code> 中配置启用注解方式</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>  </code></pre><p>这样就能使用注解驱动依赖注入了，下面是一个使用场景</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lol</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DuangService duangService <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyDuang</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        duangService<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"duangService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DuangService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>money <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"买了"</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">"毛钱的特效，装逼成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"没钱还想装逼，真是匪夷所思"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这只是一个简单的例子，剑圣打野的时候想要买5毛钱的三杀特效，嗯。。虽然不符合逻辑</p><p>此时 <code>DuangService</code> 已经注入到 <code>Lol</code> 对象中，运行代码的结果（这里是例子，代码不能运行的）就是：</p><pre class=" language-sh"><code class="language-sh">德玛买了5毛钱的特效，装逼成功！</code></pre><p>好了，深入的不说了，我们不是学spring的，只是知道一下ioc在spring中高大上的形象，接下来步入正轨，开始设计一个IOC容器</p><h1 id="设计一个IOC"><a href="#设计一个IOC" class="headerlink" title="设计一个IOC"></a>设计一个IOC</h1><p>我们要自己设计一个IOC，那么目标是什么呢？<br>我们的IOC容器要可以存储对象，还要有注解注入的功能即可。</p><p>Java语言允许通过程序化的方式间接对Class进行操作，Class文件由类装载器装载后，在JVM中将形成一份描述Class结构的元信息对象，通过该元信息对象可以获知Class的结构信息：如构造函数、属性和方法等。Java允许用户借由这个Class相关的元信息对象间接调用Class对象的功能，这就为使用程序化方式操作Class对象开辟了途径。 </p><p>我们将从一个简单例子开始探访Java反射机制的征程，下面的Hero类拥有一个构造函数、五个方法以及两个属性，如代码清单所示：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * LOL英雄 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 英雄名称</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 装备名称</span>    <span class="token keyword">private</span> String outfit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOutfit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> outfit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOutfit</span><span class="token punctuation">(</span>String outfit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>outfit <span class="token operator">=</span> outfit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"购买了"</span> <span class="token operator">+</span> outfit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 通过类装载器获取Hero类对象  </span>        ClassLoader loader <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.biezhi.ioc.Hero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//2. 获取类的默认构造器对象并通过它实例化Hero  </span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cons <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>           Hero hero <span class="token operator">=</span> <span class="token punctuation">(</span>Hero<span class="token punctuation">)</span>cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//3. 通过反射方法设置属性  </span>        Method setBrand <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setBrand<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>hero<span class="token punctuation">,</span> <span class="token string">"小鱼人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method setColor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setOutfit"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setColor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>hero<span class="token punctuation">,</span> <span class="token string">"爆裂魔杖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 运行方法</span>        hero<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出了： <code>小鱼人购买了爆裂魔杖</code></p><p>这说明我们完全可以通过编程方式调用Class的各项功能，这和直接通过构造函数和方法调用类功能的效果是一致的，只不过前者是间接调用，后者是直接调用罢了。 </p><p>在Test中，使用了几个重要的反射类，分别是ClassLoader、Class、Constructor和Method，通过这些反射类就可以间接调用目标Class的各项功能了。在①处，我们获取当前线程的ClassLoader，然后通过指定的全限定类<code>&quot;com.biezhi.ioc.Hero&quot;</code>装载Hero类对应的反射实例。在②处，我们通过Hero的反射类对象获取Hero的构造函数对象cons，通过构造函数对象的newInstrance()方法实例化Hero对象，其效果等同于new Hero()。在③处，我们又通过Hero的反射类对象的getMethod（String methodName,Class paramClass）获取属性的Setter方法对象，第一个参数是目标Class的方法名；第二个参数是方法入参的对象类型。获取方法反射对象后，即可通过invoke（Object obj,Object param）方法调用目标类的方法，该方法的第一个参数是操作的目标类对象实例；第二个参数是目标方法的入参。 </p><p>第三步是通过反射方法操控目标类的元信息，如果我们将这些信息以一个配置文件的方式提供，就可以使用Java语言的反射功能编写一段通用的代码对类似于Hero的类进行实例化及功能调用操作了。 </p><p>简单的例子说完了，我们开始设计一个自己的IOC容器，做出这个东东后再来看那些复杂的原理。</p><p>首先设计接口，一个IOC容器中最核心的当属容器接口，来一个Container。</p><p>那么容器里应该有什么呢，我想它至少要有存储和移除一个对象的能力，其次可以含括更多的获取和注册对象的方法。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * IOC容器 * @author biezhi * */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据Class获取Bean     * @param clazz     * @return     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称获取Bean     * @param name     * @return     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBeanByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 注册一个Bean到容器中     * @param object     */</span>    <span class="token keyword">public</span> Object <span class="token function">registerBean</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 注册一个Class到容器中     * @param clazz     */</span>    <span class="token keyword">public</span> Object <span class="token function">registerBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 注册一个带名称的Bean到容器中     * @param name     * @param bean     */</span>    <span class="token keyword">public</span> Object <span class="token function">registerBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 删除一个bean     * @param clazz     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称删除一个bean     * @param name     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @return    返回所有bean对象名称     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getBeanNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化装配     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那么我写一个简单的实现代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 容器简单实现 * @author biezhi */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleContainer</span> <span class="token keyword">implements</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 保存所有bean对象，格式为 com.xxx.Person : @52x2xa     */</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> beans<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 存储bean和name的关系     */</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> beanKeys<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SampleContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beanKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String name <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object object <span class="token operator">=</span> beans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> object<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> object<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBeanByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String className <span class="token operator">=</span> beankeys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> beans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> object<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> object<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">registerBean</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String name <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanKeys<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        beans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">registerBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String name <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanKeys<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object bean <span class="token operator">=</span> ReflectUtil<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        beans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">registerBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String className <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanKeys<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        beans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getBeanNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanKeys<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String className <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> className <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>className<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            beanKeys<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>            beans<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String className <span class="token operator">=</span> beanKeys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> className <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>className<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            beanKeys<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            beans<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Iterator<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> it <span class="token operator">=</span> beans<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object object <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">injection</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 注入对象     * @param object     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">injection</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 所有字段</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 需要注入的字段</span>                AutoWired autoWired <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>autoWired<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> autoWired<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 要注入的字段</span>                    Object autoWiredField <span class="token operator">=</span> null<span class="token punctuation">;</span>                    String name <span class="token operator">=</span> autoWired<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        String className <span class="token operator">=</span> beanKeys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> className <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>className<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            autoWiredField <span class="token operator">=</span> beans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> autoWiredField<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Unable to load "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>autoWired<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            autoWiredField <span class="token operator">=</span> <span class="token function">recursiveAssembly</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 指定装配的类</span>                            autoWiredField <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>autoWired<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> autoWiredField<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                autoWiredField <span class="token operator">=</span> <span class="token function">recursiveAssembly</span><span class="token punctuation">(</span>autoWired<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> autoWiredField<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Unable to load "</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">boolean</span> accessible <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">isAccessible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> autoWiredField<span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span>accessible<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Object <span class="token function">recursiveAssembly</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> clazz<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里将所有Bean的名称存储在 <code>beanKeys</code> 这个map中，将所有的对象存储在 <code>beans</code> 中，用 <code>beanKeys</code> 维护名称和对象的关系。</p><p>在装配的时候步骤如下：</p><ol><li>判断是否使用了自定义命名的对象（是：根据name查找bean）</li><li>判断是否使用了Class类型Bean（是：根据Class查找Bean，如果查找不到则创建一个无参构造函数的Bean）</li></ol><p>下面是一个测试：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IocTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Container container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SampleContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">baseTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        container<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span>Lol<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化注入</span>        container<span class="token punctuation">.</span><span class="token function">initWired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Lol lol <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Lol<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lol<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">iocClassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        container<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span>Lol2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化注入</span>        container<span class="token punctuation">.</span><span class="token function">initWired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Lol2 lol <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Lol2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lol<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">iocNameTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        container<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">"face"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FaceService2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span>Lol3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化注入</span>        container<span class="token punctuation">.</span><span class="token function">initWired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Lol3 lol <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Lol3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lol<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">baseTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//iocClassTest();</span>        <span class="token comment" spellcheck="true">//iocNameTest();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-sh"><code class="language-sh">剑圣买了5毛钱特效，装逼成功!</code></pre><p><a href="https://github.com/junicorn/easy-ioc/tree/master/src/test/java/com/junicorn/ioc/test" target="_blank" rel="noopener">代码出处</a></p><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><h2 id="类装载器ClassLoader"><a href="#类装载器ClassLoader" class="headerlink" title="类装载器ClassLoader"></a>类装载器ClassLoader</h2><h3 id="类装载器工作机制"><a href="#类装载器工作机制" class="headerlink" title="类装载器工作机制"></a>类装载器工作机制</h3><p>类装载器就是寻找类的节码文件并构造出类在JVM内部表示对象的组件。在Java中，类装载器把一个类装入JVM中，要经过以下步骤： </p><p>[1.]装载：查找和导入Class文件；<br>[2.]链接：执行校验、准备和解析步骤，其中解析步骤是可以选择的：<br>​    [2.1]校验：检查载入Class文件数据的正确性；<br>​    [2.2]准备：给类的静态变量分配存储空间；<br>​    [2.3]解析：将符号引用转成直接引用；<br>[3.]初始化：对类的静态变量、静态代码块执行初始化工作。 </p><p>类装载工作由ClassLoader及其子类负责，ClassLoader是一个重要的Java运行时系统组件，它负责在运行时查找和装入Class字节码文件。JVM在运行时会产生三个ClassLoader：根装载器、ExtClassLoader（扩展类装载器）和AppClassLoader（系统类装载器）。其中，根装载器不是ClassLoader的子类，它使用C++编写，因此我们在Java中看不到它，根装载器负责装载JRE的核心类库，如JRE目标下的rt.jar、charsets.jar等。ExtClassLoader和AppClassLoader都是ClassLoader的子类。其中ExtClassLoader负责装载JRE扩展目录ext中的JAR类包；AppClassLoader负责装载Classpath路径下的类包。 </p><p>这三个类装载器之间存在父子层级关系，即根装载器是ExtClassLoader的父装载器，ExtClassLoader是AppClassLoader的父装载器。默认情况下，使用AppClassLoader装载应用程序的类，我们可以做一个实验： </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassLoader loader <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"current loader:"</span><span class="token operator">+</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parent loader:"</span><span class="token operator">+</span>loader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"grandparent loader:"</span><span class="token operator">+</span>loader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行以上代码，在控制台上将打出以下信息： </p><pre class=" language-sh"><code class="language-sh">current loader:sun.misc.Launcher$AppClassLoader@131f71a parent loader:sun.misc.Launcher$ExtClassLoader@15601ea //①根装载器在Java中访问不到，所以返回null grandparent loader:null</code></pre><p>通过以上的输出信息，我们知道当前的ClassLoader是AppClassLoader，父ClassLoader是ExtClassLoader，祖父ClassLoader是根类装载器，因为在Java中无法获得它的句柄，所以仅返回null。 </p><p>JVM装载类时使用“全盘负责委托机制”，“全盘负责”是指当一个ClassLoader装载一个类的时，除非显式地使用另一个ClassLoader，该类所依赖及引用的类也由这个ClassLoader载入；“委托机制”是指先委托父装载器寻找目标类，只有在找不到的情况下才从自己的类路径中查找并装载目标类。这一点是从安全角度考虑的，试想如果有人编写了一个恶意的基础类（如java.lang.String）并装载到JVM中将会引起多么可怕的后果。但是由于有了“全盘负责委托机制”，java.lang.String永远是由根装载器来装载的，这样就避免了上述事件的发生。 </p><h3 id="ClassLoader重要方法"><a href="#ClassLoader重要方法" class="headerlink" title="ClassLoader重要方法"></a>ClassLoader重要方法</h3><p>在Java中，ClassLoader是一个抽象类，位于java.lang包中。下面对该类的一些重要接口方法进行介绍： </p><ul><li><code>Class loadClass(String name)</code><br>name参数指定类装载器需要装载类的名字，必须使用全限定类名，如com.baobaotao. beans.Car。该方法有一个重载方法loadClass(String name ,boolean resolve)，resolve参数告诉类装载器是否需要解析该类。在初始化类之前，应考虑进行类解析的工作，但并不是所有的类都需要解析，如果JVM只需要知道该类是否存在或找出该类的超类，那么就不需要进行解析。 </li><li><code>Class defineClass(String name, byte[] b, int off, int len)</code><br>将类文件的字节数组转换成JVM内部的java.lang.Class对象。字节数组可以从本地文件系统、远程网络获取。name为字节数组对应的全限定类名。 </li><li><code>Class findSystemClass(String name)</code><br>从本地文件系统载入Class文件，如果本地文件系统不存在该Class文件，将抛出ClassNotFoundException异常。该方法是JVM默认使用的装载机制。 </li><li><code>Class findLoadedClass(String name)</code><br>调用该方法来查看ClassLoader是否已装入某个类。如果已装入，那么返回java.lang.Class对象，否则返回null。如果强行装载已存在的类，将会抛出链接错误。 </li><li><code>ClassLoader getParent()</code><br>获取类装载器的父装载器，除根装载器外，所有的类装载器都有且仅有一个父装载器，ExtClassLoader的父装载器是根装载器，因为根装载器非Java编写，所以无法获得，将返回null。 </li></ul><p>除JVM默认的三个ClassLoader以外，可以编写自己的第三方类装载器，以实现一些特殊的需求。类文件被装载并解析后，在JVM内将拥有一个对应的java.lang.Class类描述对象，该类的实例都拥有指向这个类描述对象的引用，而类描述对象又拥有指向关联ClassLoader的引用，如图所示。 </p><p><img src="http://i.imgur.com/HuLuFXD.png" alt=""></p><p>每一个类在JVM中都拥有一个对应的java.lang.Class对象，它提供了类结构信息的描述。数组、枚举、注解以及基本Java类型（如int、double等），甚至void都拥有对应的Class对象。Class没有public的构造方法。Class对象是在装载类时由JVM通过调用类装载器中的defineClass()方法自动构造的。 </p><h2 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h2><p>Class反射对象描述类语义结构，可以从Class对象中获取构造函数、成员变量、方法类等类元素的反射对象，并以编程的方式通过这些反射对象对目标类对象进行操作。这些反射对象类在java.reflect包中定义，下面是最主要的三个反射类： </p><ul><li><code>Constructor</code>：类的构造函数反射类，通过Class#getConstructors()方法可以获得类的所有构造函数反射对象数组。在JDK5.0中，还可以通过getConstructor(Class… parameterTypes)获取拥有特定入参的构造函数反射对象。Constructor的一个主要方法是newInstance(Object[] initargs)，通过该方法可以创建一个对象类的实例，相当于new关键字。在JDK5.0中该方法演化为更为灵活的形式：newInstance (Object… initargs)。</li><li><code>Method</code>：类方法的反射类，通过Class#getDeclaredMethods()方法可以获取类的所有方法反射类对象数组Method[]。在JDK5.0中可以通过getDeclaredMethod(String name, Class… parameterTypes)获取特定签名的方法，name为方法名；Class…为方法入参类型列表。Method最主要的方法是invoke(Object obj, Object[] args)，obj表示操作的目标对象；args为方法入参，代码清单3 10③处演示了这个反射类的使用方法。在JDK 5.0中，该方法的形式调整为invoke(Object obj, Object… args)。此外，Method还有很多用于获取类方法更多信息的方法：<br>​    1）Class getReturnType()：获取方法的返回值类型；<br>​    2）Class[] getParameterTypes()：获取方法的入参类型数组；<br>​    3）Class[] getExceptionTypes()：获取方法的异常类型数组；<br>​    4）Annotation[][] getParameterAnnotations()：获取方法的注解信息，JDK 5.0中的新方法；</li><li><code>Field</code>：类的成员变量的反射类，通过Class#getDeclaredFields()方法可以获取类的成员变量反射对象数组，通过Class#getDeclaredField(String name)则可获取某个特定名称的成员变量反射对象。Field类最主要的方法是set(Object obj, Object value)，obj表示操作的目标对象，通过value为目标对象的成员变量设置值。如果成员变量为基础类型，用户可以使用Field类中提供的带类型名的值设置方法，如setBoolean(Object obj, boolean value)、setInt(Object obj, int value)等。</li></ul><p>此外，Java还为包提供了Package反射类，在JDK 5.0中还为注解提供了AnnotatedElement反射类。总之，Java的反射体系保证了可以通过程序化的方式访问目标类中所有的元素，对于private或protected的成员变量和方法，只要JVM的安全机制允许，也可以通过反射进行调用，请看下面的例子： </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * LOL英雄 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrivateHero</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 英雄名称</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 装备名称</span>    <span class="token keyword">private</span> String outfit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PrivateHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"购买了"</span> <span class="token operator">+</span> outfit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ClassLoader loader <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.biezhi.ioc.PrivateHero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           PrivateHero hero <span class="token operator">=</span> <span class="token punctuation">(</span>PrivateHero<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field name <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取消Java语言访问检查以访问private变量</span>        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>hero<span class="token punctuation">,</span> <span class="token string">"德玛西亚之力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field outfit <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"outfit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outfit<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outfit<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>hero<span class="token punctuation">,</span> <span class="token string">"神盾"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 运行方法</span>        hero<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行该类，打印出以下信息： </p><pre class=" language-java"><code class="language-java">德玛西亚之力购买了神盾</code></pre><p>在访问private、protected成员变量和方法时必须通过setAccessible(boolean access)方法取消Java语言检查，否则将抛出IllegalAccessException。<br>如果JVM的安全管理器设置了相应的安全机制，调用该方法将抛出SecurityException。 </p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> ioc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库知识点总结</title>
      <link href="/2018/12/31/shu-ju-ku-zhi-shi-dian-zong-jie/"/>
      <url>/2018/12/31/shu-ju-ku-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-范式">1. 范式</a><ul><li><a href="#11-1nf">1.1. 1NF</a></li><li><a href="#12-2nf">1.2. 2NF</a></li><li><a href="#13-3nf">1.3. 3NF</a></li><li><a href="#14-bcnf">1.4. BCNF</a></li><li><a href="#15-4nf">1.5. 4NF</a></li><li><a href="#16-5nf">1.6. 5NF</a></li></ul></li><li><a href="#2-什么是事务">2. 什么是事务</a></li><li><a href="#3-acid">3. ACID</a></li><li><a href="#4-什么是事务隔离事务隔离的级别">4. 什么是事务隔离，事务隔离的级别？</a><ul><li><a href="#41-可序列化">4.1. 可序列化</a></li><li><a href="#42-可重复读">4.2. 可重复读</a></li><li><a href="#43-提交读">4.3. 提交读</a></li><li><a href="#44-未提交读">4.4. 未提交读</a></li></ul></li><li><a href="#5-mysql的myisam引擎与innodb引擎的区别">5. MySQL的MyISAM引擎与InnoDB引擎的区别</a></li><li><a href="#6-悲观锁与乐观锁">6. 悲观锁与乐观锁：</a><ul><li><a href="#61-悲观锁">6.1. 悲观锁</a></li><li><a href="#62-乐观锁">6.2. 乐观锁</a></li></ul></li></ul><!-- /TOC --><h2 id="1-范式"><a href="#1-范式" class="headerlink" title="1. 范式"></a>1. 范式</h2><p>在面向对象的思想指导下，遵循模式建立的表称为模型（Model），具体的记录称为实体（Entity），表字段称为字段，具体的记录的某个字段称为属性（Property）。</p><h3 id="1-1-1NF"><a href="#1-1-1NF" class="headerlink" title="1.1. 1NF"></a>1.1. 1NF</h3><p>实体的每个属性都是原子属性，不存在多值属性。无重复属性。满足1NF才可以称之为关系型数据库。</p><blockquote><p>字段是最小的的单元不可再分</p></blockquote><h3 id="1-2-2NF"><a href="#1-2-2NF" class="headerlink" title="1.2. 2NF"></a>1.2. 2NF</h3><p>在不存在多值属性的基础上。要求定义主属性。实体的属性们要完全依赖于主属性。不存在非主属性对主属性的部分依赖。</p><blockquote><p>满足1NF，表中的字段必须完全依赖于全部主键而非部分主键（一般我们都会做到）</p></blockquote><h3 id="1-3-3NF"><a href="#1-3-3NF" class="headerlink" title="1.3. 3NF"></a>1.3. 3NF</h3><p>在不存在多值属性、不存在实体的属性部分依赖于主属性的基础上。要求任何非主属性不依赖于其他非主属性。这称之为消除传递依赖。</p><blockquote><p>满足2NF，非主键外的所有字段必须互不依赖</p></blockquote><h3 id="1-4-BCNF"><a href="#1-4-BCNF" class="headerlink" title="1.4. BCNF"></a>1.4. BCNF</h3><p>在不存在多值属性、不存在实体的属性部分依赖于主属性、不存在非主属性依赖于其他非主属性的基础上。主属性内部不能有部分或传递依赖。这将消除对主属性子集的依赖，使主属性保持最简。</p><h3 id="1-5-4NF"><a href="#1-5-4NF" class="headerlink" title="1.5. 4NF"></a>1.5. 4NF</h3><p>在不存在多值属性、不存在实体的属性部分依赖于主键、不存在非主属性依赖于其他非主属性、主属性内部不能有部分或传递依赖的基础上。消除多值依赖，只允许函数依赖。</p><blockquote><p>满足3NF，消除表中的多值依赖</p></blockquote><h3 id="1-6-5NF"><a href="#1-6-5NF" class="headerlink" title="1.6. 5NF"></a>1.6. 5NF</h3><p>在不存在多值属性、不存在实体的属性部分依赖于主属性、不存在非主属性依赖于其他非主属性、主属性内部不能有部分或传递依赖、不存在多值依赖的基础上。消除连接依赖，并且必须保证数据完整性。</p><p><a href="http://www.jianshu.com/p/d27db67868b6" target="_blank" rel="noopener">关系型数据库的几种设计范式（1NF 2NF 3NF BCNF 4NF 5NF） - 简书</a></p><h2 id="2-什么是事务"><a href="#2-什么是事务" class="headerlink" title="2. 什么是事务"></a>2. 什么是事务</h2><p>数据库事务（简称：事务）是数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。</p><p>一个数据库事务通常包含了一个序列的对数据库的读/写操作。它的存在包含有以下两个目的：</p><ul><li>为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。</li><li>当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。</li></ul><h2 id="3-ACID"><a href="#3-ACID" class="headerlink" title="3. ACID"></a>3. ACID</h2><p>ACID，是指数据库管理系统（DBMS）在写入或更新资料的过程中，为保证事务（transaction）是正确可靠的，所必须具备的四个特性：</p><ul><li>原子性（atomicity，或称不可分割性）：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li><li>一致性（consistency）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li><li>隔离性（isolation，又称独立性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable）。</li><li>持久性（durability）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><h2 id="4-什么是事务隔离，事务隔离的级别？"><a href="#4-什么是事务隔离，事务隔离的级别？" class="headerlink" title="4. 什么是事务隔离，事务隔离的级别？"></a>4. 什么是事务隔离，事务隔离的级别？</h2><p>事务隔离（Transaction Isolation）定义了数据库系统中一个操作的结果在何时以何种方式对其他并发操作可见。</p><p>并发控制描述了数据库事务隔离以保证数据正确性的机制。为了保证并行事务执行的准确执行，数据库和存储引擎在设计的时候着重强调了并发控制这一点。典型的事务相关机制限制数据的访问顺序（执行调度）以满足可序列化和可恢复性。限制数据访问意味着降低了执行的性能，并发控制机制就是要保证在满足这些限制的前提下提供尽可能高的性能。经常在不损害正确性的情况下，为了达到更好的性能，可序列化的要求会减低一些，但是为了避免数据一致性的破坏，可恢复性必须保证。</p><p>两阶段锁是关系数据库中最常见的提供了可序列化和可恢复性的并发控制机制，为了访问一个数据库对象，事务首先要获得这个对象的锁。对于不同的访问类型（如对对象的读写操作）和锁的类型，如果另外一个事务正持有这个对象的锁，获得锁的过程会被阻塞或者延迟。</p><p>很多数据库管理系统定义了不同的“事务隔离等级”来控制锁的程度。在很多数据库系统中，多数的数据库事务都避免高等级的隔离等级（如可序列化）从而减少对系统的锁定开销。</p><p>ANSI/ISO SQL定义的标准隔离级别如下：</p><h3 id="4-1-可序列化"><a href="#4-1-可序列化" class="headerlink" title="4.1. 可序列化"></a>4.1. 可序列化</h3><p>最高的隔离级别。</p><p>在基于锁机制并发控制的DBMS实现可序列化，要求在选定对象上的读锁和写锁保持直到事务结束后才能释放。在SELECT的查询中使用一个“WHERE”子句来描述一个范围时应该获得一个“范围锁”（range-locks）。这种机制可以避免“幻影读”（phantom reads）现象。</p><p>当采用不基于锁的并发控制时不用获取锁。但当系统探测到几个并发事务有“写冲突”的时候，只有其中一个是允许提交的。</p><h3 id="4-2-可重复读"><a href="#4-2-可重复读" class="headerlink" title="4.2. 可重复读"></a>4.2. 可重复读</h3><p>在可重复读（REPEATABLE READS）隔离级别中，基于锁机制并发控制的DBMS需要对选定对象的读锁（read locks）和写锁（write locks）一直保持到事务结束，但不要求“范围锁”，因此可能会发生“幻影读”。</p><h3 id="4-3-提交读"><a href="#4-3-提交读" class="headerlink" title="4.3. 提交读"></a>4.3. 提交读</h3><p>在提交读（READ COMMITTED）级别中，基于锁机制并发控制的DBMS需要对选定对象的写锁一直保持到事务结束，但是读锁在SELECT操作完成后马上释放（因此“不可重复读”现象可能会发生）。和前一种隔离级别一样，也不要求“范围锁”。</p><h3 id="4-4-未提交读"><a href="#4-4-未提交读" class="headerlink" title="4.4. 未提交读"></a>4.4. 未提交读</h3><p>未提交读（READ UNCOMMITTED）是最低的隔离级别。允许“脏读”（dirty reads），事务可以看到其他事务“尚未提交”的修改。</p><p>通过比低一级的隔离级别要求更多的限制，高一级的级别提供更强的隔离性。标准允许事务运行在更强的事务隔离级别上。(如在可重复读隔离级别上执行提交读的事务是没有问题的)</p><p><a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E5%8B%99%E9%9A%94%E9%9B%A2" target="_blank" rel="noopener">事务隔离 - 维基百科，自由的百科全书</a></p><h2 id="5-MySQL的MyISAM引擎与InnoDB引擎的区别"><a href="#5-MySQL的MyISAM引擎与InnoDB引擎的区别" class="headerlink" title="5. MySQL的MyISAM引擎与InnoDB引擎的区别"></a>5. MySQL的MyISAM引擎与InnoDB引擎的区别</h2><ul><li>设计目标：InnoDB设计目标是处理大容量的数据，而MyISAM追求的是性能，两者产生的差异也是基于这点。InnoDB是MySQL的默认存储引擎。</li><li>事务处理：InnoDB支持事务和外键，MyISAM不支持。MyISAM强调的是性能，InnoDB支持的功能更加完整。InnoDB支持事务带来了一个好处，发生故障时可以通过事务日志来恢复数据库，MyISAM特别要命的一点是崩溃后不能安全恢复，所以对于表比较大的情况不要用。</li><li>效率和锁：两种存储引擎的效率差异来自于锁的方式差异，MyISAM是表锁，对数据库进行写操作时会锁住整个表，效率很低；确定要修改数据的范围时，InnoDB是行锁，只锁一行的数据，写操作很快。</li><li>索引：MyISAM支持全文索引，InnoDB不支持。</li><li><code>COUNT(*)</code>：MyISAM保存了表的行数，InnoDB没有。也就是说，执行<code>SELECT COUNT(*) FROM student</code>的操作时，MyISAM可以直接给出结果，而InnoDB要先扫描全表。不过对于加了where条件的查询操作，效果是一样的。</li><li>AUTO_INCREMENT：InnoDB下只能对自增字段单独建索引，MyISAM下可以和其它列一起建联合索引。</li></ul><h2 id="6-悲观锁与乐观锁："><a href="#6-悲观锁与乐观锁：" class="headerlink" title="6. 悲观锁与乐观锁："></a>6. 悲观锁与乐观锁：</h2><p>乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。</p><h3 id="6-1-悲观锁"><a href="#6-1-悲观锁" class="headerlink" title="6.1. 悲观锁"></a>6.1. 悲观锁</h3><p>悲观并发控制（又名“悲观锁”，Pessimistic Concurrency Control，缩写“PCC”）是一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。如果一个事务执行的操作都某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。</p><p>悲观锁的流程：</p><ul><li>在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。</li><li>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。</li><li>如果成功加锁，那么就可以对记录做修改，事务完成后解锁。</li><li>其间如果有其他对该记录做修改或加排他锁的操作，都会等待解锁或直接抛出异常。</li></ul><h3 id="6-2-乐观锁"><a href="#6-2-乐观锁" class="headerlink" title="6.2. 乐观锁"></a>6.2. 乐观锁</h3><p>乐观并发控制（又名“乐观锁”，Optimistic Concurrency Control，缩写“OCC”）是一种并发控制的方法。它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。</p><p>实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构知识点总结</title>
      <link href="/2018/12/31/shu-ju-jie-gou-zhi-shi-dian-zong-jie/"/>
      <url>/2018/12/31/shu-ju-jie-gou-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-各种排序算法的性质">1. 各种排序算法的性质</a></li><li><a href="#2-二叉搜索树avl树和红黑树的复杂度">2. 二叉搜索树、AVL树和红黑树的复杂度</a></li><li><a href="#3-红黑树的性质">3. 红黑树的性质</a></li><li><a href="#4-图的基本术语">4. 图的基本术语</a></li><li><a href="#5-b树的性质">5. B树的性质</a></li><li><a href="#6-b树的性质">6. B+树的性质</a></li><li><a href="#7-b树和b树的区别">7. B树和B+树的区别</a></li></ul><!-- /TOC --><h2 id="1-各种排序算法的性质"><a href="#1-各种排序算法的性质" class="headerlink" title="1. 各种排序算法的性质"></a>1. 各种排序算法的性质</h2><table><thead><tr><th style="text-align:center">算法种类</th><th style="text-align:center">最好</th><th style="text-align:center">平均</th><th style="text-align:center">最坏</th><th style="text-align:center">空间复杂度</th><th style="text-align:center">是否稳定</th></tr></thead><tbody><tr><td style="text-align:center">直接插入排序</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(1)</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">冒泡排序</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(1)</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">简单选择排序</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(1)</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">快速排序</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">堆排序</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">O(1)</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">二路归并排序</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">O(n)</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">基数排序</td><td style="text-align:center">O(d(n+r))</td><td style="text-align:center">O(d(n+r))</td><td style="text-align:center">O(d(n+r))</td><td style="text-align:center">O(r)</td><td style="text-align:center">是</td></tr></tbody></table><h2 id="2-二叉搜索树、AVL树和红黑树的复杂度"><a href="#2-二叉搜索树、AVL树和红黑树的复杂度" class="headerlink" title="2. 二叉搜索树、AVL树和红黑树的复杂度"></a>2. 二叉搜索树、AVL树和红黑树的复杂度</h2><table><thead><tr><th style="text-align:center">树种类</th><th style="text-align:center">空间</th><th style="text-align:center">空间</th><th style="text-align:center">查找</th><th style="text-align:center">查找</th><th style="text-align:center">插入</th><th style="text-align:center">插入</th><th style="text-align:center">删除</th><th style="text-align:center">删除</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">平均</td><td style="text-align:center">最坏</td><td style="text-align:center">平均</td><td style="text-align:center">最坏</td><td style="text-align:center">平均</td><td style="text-align:center">最坏</td><td style="text-align:center">平均</td><td style="text-align:center">最坏</td></tr><tr><td style="text-align:center">二叉搜索树</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">O(n)</td></tr><tr><td style="text-align:center">AVL树</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">O(logn)</td></tr><tr><td style="text-align:center">红黑树</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">O(logn)</td><td style="text-align:center">O(logn)</td></tr></tbody></table><h2 id="3-红黑树的性质"><a href="#3-红黑树的性质" class="headerlink" title="3. 红黑树的性质"></a>3. 红黑树的性质</h2><p>红黑树在满足二叉搜索树的要求外，还需满足如下要求：</p><ul><li>节点是红色或黑色。</li><li>根是黑色。</li><li>所有叶子都是黑色（叶子是NIL节点）。</li><li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li><li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</li></ul><h2 id="4-图的基本术语"><a href="#4-图的基本术语" class="headerlink" title="4. 图的基本术语"></a>4. 图的基本术语</h2><ul><li>简单图：一个图G如果不存在重复边，也不存在顶点到自身的边，则称图G为简单图。</li><li>无向完全图：在无向图中，如果任意两个顶点之间都存在边，则称该图为无向完全图。含有n个顶点的无向完全图有n(n-1)/2条边。</li><li>有向完全图：在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧，则称该图为有向完全图。含有n个顶点的有向完全图有n(n-1)条有向边。</li><li>连通：在无向图中，若从顶点v到顶点w有路径存在，则称v和w是连通的。</li><li>连通图：若图G中任意两个顶点都是连通的，则称图G为连通图。</li><li>连通分量：无向图的极大连通字图称为连通分量。</li><li>强连通图：在有向图中，若从顶点v到顶点w和从顶点w到顶点v之间都有路径，则称这两个顶点是强连通的。若图中任何一对顶点都是强连通的，则称此图为强连通图。</li><li>强连通分量：有向图中的极大强连通字图称为有向图的强连通分量。</li><li>生成树：连通图的生成树是包含图中全部顶点的一个极小连通字图。</li></ul><h2 id="5-B树的性质"><a href="#5-B树的性质" class="headerlink" title="5. B树的性质"></a>5. B树的性质</h2><p>B树是一种多路平衡查找树，B树中所有结点的孩子结点数的最大值称为B树的阶，通常用m表示。一颗m阶B树，或为空树，或为满足下列特性的m叉树：</p><ul><li>树中每个结点至多有m颗子树（即至多含有m-1个关键字）。</li><li>若根结点不是叶子结点，则至少有两颗子树。</li><li>除根结点外的所有非叶结点至少有⌈m/2⌉颗子树（即至少含有⌈m/2⌉-1个关键字）。</li><li>所有的非终端结点中有以下数据：[n, P0, K1, P1, K2, P2, …, Kn, Pn]。其中，Ki（i = 1, 2, …, n）为结点的关键字，且有K1 &lt; K2 &lt; … &lt; Kn；Pi（i = 0, 1, …, n）为只想子树根结点的指针，且指针Pi-1所指子树中所有结点的关键字均小于Ki，Pn所指子树中所有结点的关键字均大于Kn，n（⌈m/2⌉ - 1 &lt;= n &lt;= m -1）为结点中关键字的个数。</li><li>所有的叶结点都出现在同一层次上，并且不带信息（可以看做是外部结点，实际上这些结点不存在，指向这些结点的指针为空）。</li></ul><h2 id="6-B-树的性质"><a href="#6-B-树的性质" class="headerlink" title="6. B+树的性质"></a>6. B+树的性质</h2><p>B+树是B树的一种变形树，一颗m阶B+树应满足下列条件：</p><ul><li>每个分支结点最多有m颗子树（子结点）。</li><li>根结点或者没有子树，或者至少有两颗子树，其他每个分支结点至少有⌈m/2⌉颗子树。</li><li>根结点的子树个数与关键字个数相等。</li><li>所有叶结点包含全部关键字及其只想相应记录的指针，而且叶结点中将关键字按大小顺序排列，并且相邻叶结点顺序链接起来，所有叶结点在同一层。</li><li>所有分支结点（可以看成是索引的索引）中仅包含其子树（即下一级的索引块）中关键字的最大值及指向其子树的指针。</li></ul><h2 id="7-B树和B-树的区别"><a href="#7-B树和B-树的区别" class="headerlink" title="7. B树和B+树的区别"></a>7. B树和B+树的区别</h2><ul><li>在B+树中，具有n个关键字的结点只含有n颗子树，即每个关键字对应一颗子树；而在B树中，具有n个关键字的结点含有n + 1颗子树。</li><li>在B+树中，每个非根结点关键字个数n的范围是⌈m/2⌉ - 1 &lt;= n &lt;= m - 1（根结点：1 &lt;= n &lt;= m - 1）。</li><li>在B+树中，所有非叶结点仅起到索引作用，即结点中的每个索引项只含有对应子树的最大关键字和指向该子树的指针，不含有该关键字对应记录的存储地址。</li><li>在B+树中，叶结点包含了全部关键字，即其他非叶结点中的关键字包含在叶结点中；而在B树中，叶结点包含的关键字和其他结点包含的关键字是不重复的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式知识点总结</title>
      <link href="/2018/12/31/she-ji-mo-shi-zhi-shi-dian-zong-jie/"/>
      <url>/2018/12/31/she-ji-mo-shi-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-常用设计模式">1. 常用设计模式</a></li><li><a href="#2-设计模式的六大原则">2. 设计模式的六大原则</a></li><li><a href="#3-什么是高内聚低耦合">3. 什么是高内聚、低耦合？</a><ul><li><a href="#31-内聚性">3.1. 内聚性</a></li><li><a href="#32-耦合性">3.2. 耦合性</a></li></ul></li></ul><!-- /TOC --><h2 id="1-常用设计模式"><a href="#1-常用设计模式" class="headerlink" title="1. 常用设计模式"></a>1. 常用设计模式</h2><ul><li>策略模式</li><li>观察者模式</li><li>装饰者模式</li><li>工厂方法</li><li>抽象工厂模式</li><li>单例模式</li><li>命令模式</li><li>适配器模式</li><li>外观模式</li><li>模板方法模式</li><li>迭代器</li><li>组合模式</li><li>状态模式</li><li>代理模式</li><li>建造者模式</li></ul><h2 id="2-设计模式的六大原则"><a href="#2-设计模式的六大原则" class="headerlink" title="2. 设计模式的六大原则"></a>2. 设计模式的六大原则</h2><ul><li>单一职责原则（Single Responsibility Principle，SRP）：不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。</li><li>里氏替换原则（Liskov Substitution Principle，LSP）：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。所有引用基类的地方必须能透明地使用其子类的对象。</li><li>依赖倒置原则（Dependence Inversion Principle，DIP）：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。</li><li>接口隔离原则（Interface Segregation Principle，ISP）：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。</li><li>迪米特法则（Law of Demeter，LoD）：一个对象应该对其他对象保持最少的了解。</li><li>开放封闭原则（Open Close Principle，OCP）：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</li></ul><h2 id="3-什么是高内聚、低耦合？"><a href="#3-什么是高内聚、低耦合？" class="headerlink" title="3. 什么是高内聚、低耦合？"></a>3. 什么是高内聚、低耦合？</h2><h3 id="3-1-内聚性"><a href="#3-1-内聚性" class="headerlink" title="3.1. 内聚性"></a>3.1. 内聚性</h3><p>内聚性又称块内联系。指模块的功能强度的度量，即一个模块内部各个元素彼此结合的紧密程度的度量。若一个模块内各元素（语名之间、程序段之间）联系的越紧密，则它的内聚性就越高。</p><p>内聚性分类（低—-高）：</p><ul><li>偶然内聚：指一个模块内的各处理元素之间没有任何联系。</li><li>逻辑内聚：指模块内执行几个逻辑上相似的功能，通过参数确定该模块完成哪一个功能。</li><li>时间内聚：把需要同时执行的动作组合在一起形成的模块为时间内聚模块。</li><li>通信内聚：指模块内所有处理元素都在同一个数据结构上操作（有时称之为信息内聚），或者指各处理使用相同的输入数据或者产生相同的输出数据。</li><li>顺序内聚：指一个模块中各个处理元素都密切相关于同一功能且必须顺序执行，前一功能元素输出就是下一功能元素的输入。</li><li>功能内聚：这是最强的内聚，指模块内所有元素共同完成一个功能，缺一不可。与其他模块的耦合是最弱的。</li></ul><h3 id="3-2-耦合性"><a href="#3-2-耦合性" class="headerlink" title="3.2. 耦合性"></a>3.2. 耦合性</h3><p>耦合性也称块间联系。指软件系统结构中各模块间相互联系紧密程度的一种度量。模块之间联系越紧密，其耦合性就越强，模块的独立性则越差。模块间耦合高低取决于模块间接口的复杂性、调用的方式及传递的信息。</p><p>耦合性分类（低—-高）：</p><ul><li>无直接耦合:</li><li>数据耦合：指两个模块之间有调用关系，传递的是简单的数据值，相当于高级语言的值传递。</li><li>标记耦合：指两个模块之间传递的是数据结构，如高级语言中的数组名、记录名、文件名等这些名字即标记，其实传递的是这个数据结构的地址。</li><li>控制耦合：指一个模块调用另一个模块时，传递的是控制变量（如开关、标志等），被调模块通过该控制变量的值有选择地执行块内某一功能。</li><li>公共耦合：指通过一个公共数据环境相互作用的那些模块间的耦合。公共耦合的复杂程序随耦合模块的个数增加而增加。</li><li>内容耦合：这是最高程度的耦合，也是最差的耦合。当一个模块直接使用另一个模块的内部数据，或通过非正常入口而转入另一个模块内部。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>零散知识</title>
      <link href="/2018/12/31/ling-san-zhi-shi/"/>
      <url>/2018/12/31/ling-san-zhi-shi/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-xml和json的区别">1. XML和JSON的区别</a><ul><li><a href="#11-xml">1.1. XML</a></li><li><a href="#12-json">1.2. JSON</a></li></ul></li><li><a href="#2-开源协议">2. 开源协议</a></li><li><a href="#3-方法中什么时候需要进行参数校验什么时候不需要">3. 方法中什么时候需要进行参数校验，什么时候不需要</a></li><li><a href="#4-版本号命名方式">4. 版本号命名方式</a></li><li><a href="#5-如何理解非对称加密">5. 如何理解非对称加密</a></li><li><a href="#6-java算法题模板">6. Java算法题模板</a></li></ul><!-- /TOC --><h2 id="1-XML和JSON的区别"><a href="#1-XML和JSON的区别" class="headerlink" title="1. XML和JSON的区别"></a>1. XML和JSON的区别</h2><h3 id="1-1-XML"><a href="#1-1-XML" class="headerlink" title="1.1. XML"></a>1.1. XML</h3><ul><li>应用广泛，可扩展性强，被广泛应用各种场合；</li><li>读取、解析没有JSON快；</li><li>可读性强，可描述复杂结构。</li></ul><h3 id="1-2-JSON"><a href="#1-2-JSON" class="headerlink" title="1.2. JSON"></a>1.2. JSON</h3><ul><li>结构简单，都是键值对；</li><li>读取、解析速度快，很多语言支持；</li><li>传输数据量小，传输速率大大提高；</li><li>描述复杂结构能力较弱。</li></ul><h2 id="2-开源协议"><a href="#2-开源协议" class="headerlink" title="2. 开源协议"></a>2. 开源协议</h2><p><img src="/2018/12/31/ling-san-zhi-shi/free_software_licenses.png" alt="Free Software Licenses"></p><p><a href="https://choosealicense.com/licenses/" target="_blank" rel="noopener">Licenses | Choose a License</a></p><h2 id="3-方法中什么时候需要进行参数校验，什么时候不需要"><a href="#3-方法中什么时候需要进行参数校验，什么时候不需要" class="headerlink" title="3. 方法中什么时候需要进行参数校验，什么时候不需要"></a>3. 方法中什么时候需要进行参数校验，什么时候不需要</h2><p>需要进行参数校验的场景：</p><ul><li>调用频次低的方法。</li><li>执行时间开销很大的方法，参数校验时间几乎可以忽略不计。</li><li>需要极高稳定性和可用性的方法。</li><li>对外提供的开放接口。</li></ul><p>不需要进行参数校验的场景：</p><ul><li>极有可能被循环调用的方法。</li><li>底层方法（调用频率高，且不太可能出错）。</li><li>被声明为private，只会被自己代码调用的方法。</li></ul><h2 id="4-版本号命名方式"><a href="#4-版本号命名方式" class="headerlink" title="4. 版本号命名方式"></a>4. 版本号命名方式</h2><p>版本格式：主版本号.次版本号.修订号</p><p>规则：</p><ol><li>主版本号：当做了不兼容的API修改。</li><li>次版本号：当做了向下兼容的功能性新增。</li><li>修订号：当做了向下兼容的问题修正。</li></ol><h2 id="5-如何理解非对称加密"><a href="#5-如何理解非对称加密" class="headerlink" title="5. 如何理解非对称加密"></a>5. 如何理解非对称加密</h2><p>首先，每个用户都有两把钥匙，一把公钥一把私钥。公钥是对外发布的，所有人都看的到所有人的公钥，私钥是自己保存，每个人都只知道自己的私钥而不知道别人的。</p><p>用该用户的公钥加密后只能该用户的私钥才能解密。这种情况下，公钥是用来加密信息的，确保只有特定的人（用谁的公钥就是谁）才能解密该信息。</p><p>还有第二种情况，公钥是用来解密信息的，确保让别人知道这条信息是真的由我发布的，是完整正确的。接收者由此可知这条信息确实来自于拥有私钥的某人，这被称作数字签名，公钥的形式就是数字证书。</p><h2 id="6-Java算法题模板"><a href="#6-Java算法题模板" class="headerlink" title="6. Java算法题模板"></a>6. Java算法题模板</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机网络知识总结</title>
      <link href="/2018/12/31/ji-suan-ji-wang-luo-zhi-shi-zong-jie/"/>
      <url>/2018/12/31/ji-suan-ji-wang-luo-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-计算机网络分层体系结构">1. 计算机网络分层体系结构</a></li><li><a href="#2-数据进入协议栈时的封装">2. 数据进入协议栈时的封装</a></li><li><a href="#3-tcp传输过程">3. TCP传输过程</a></li><li><a href="#4-http报文">4. HTTP报文</a><ul><li><a href="#41-http请求报文">4.1. HTTP请求报文</a><ul><li><a href="#411-方法method">4.1.1. 方法（Method）</a></li><li><a href="#412-请求urlrequest-url">4.1.2. 请求URL（Request-URL）</a></li><li><a href="#413-版本version">4.1.3. 版本（Version）</a></li><li><a href="#414-首部header-field">4.1.4. 首部（Header Field）</a></li><li><a href="#415-实体主体entity-body">4.1.5. 实体主体（Entity Body）</a></li></ul></li><li><a href="#42-http响应报文">4.2. HTTP响应报文</a><ul><li><a href="#421-版本version">4.2.1. 版本（Version）</a></li><li><a href="#422-状态码status-code和短语phrase">4.2.2. 状态码（Status Code）和短语（Phrase）</a></li><li><a href="#423-首部header-field">4.2.3. 首部（Header Field）</a></li><li><a href="#424-实体主体entity-body">4.2.4. 实体主体（Entity Body）</a></li></ul></li></ul></li><li><a href="#5-mtu最小64b最大1518b的由来">5. MTU最小64B最大1518B的由来</a></li><li><a href="#6-ipv4分组格式">6. IPv4分组格式</a></li><li><a href="#7-http响应码301和302的区别">7. HTTP响应码301和302的区别？</a></li><li><a href="#8-什么是http的长连接和短连接">8. 什么是HTTP的长连接和短连接？</a></li><li><a href="#9-什么是tcp的长连接和短连接">9. 什么是TCP的长连接和短连接？</a></li><li><a href="#10-session和cookie有什么区别">10. session和cookie有什么区别</a></li><li><a href="#11-分布式session如何同步">11. 分布式session如何同步</a></li><li><a href="#12-arp协议">12. ARP协议</a></li><li><a href="#13-https">13. HTTPS</a></li><li><a href="#14-http-10和http-11的区别">14. HTTP 1.0和HTTP 1.1的区别</a></li><li><a href="#15-http-11和http-20的区别">15. HTTP 1.1和HTTP 2.0的区别</a></li><li><a href="#16-traceroute和ping的区别">16. traceroute和ping的区别</a><ul><li><a href="#161-traceroute">16.1. traceroute</a></li><li><a href="#162-ping">16.2. ping</a></li></ul></li></ul><!-- /TOC --><h2 id="1-计算机网络分层体系结构"><a href="#1-计算机网络分层体系结构" class="headerlink" title="1. 计算机网络分层体系结构"></a>1. 计算机网络分层体系结构</h2><p><img src="/2018/12/31/ji-suan-ji-wang-luo-zhi-shi-zong-jie/computer_network_architecture.png" alt="Computer Network Architecture"></p><table><thead><tr><th style="text-align:center">层级</th><th style="text-align:center">功能</th><th style="text-align:center">协议</th></tr></thead><tbody><tr><td style="text-align:center">应用层</td><td style="text-align:center">文件传输、电子邮件、文件服务、虚拟终端</td><td style="text-align:center">TFTP、HTTP、SNMP、FTP、SMTP、DNS、Telnet</td></tr><tr><td style="text-align:center">表示层</td><td style="text-align:center">数据格式化、代码转换、数据加密</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">会话层</td><td style="text-align:center">解除或建立与别的节点的联系</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">传输层</td><td style="text-align:center">提供端对端的接口</td><td style="text-align:center">TCP、UDP</td></tr><tr><td style="text-align:center">网络层</td><td style="text-align:center">为数据报选择路由</td><td style="text-align:center">IP、ICMP、RIP、OSPF、BGP、IGMP</td></tr><tr><td style="text-align:center">数据链路层</td><td style="text-align:center">传输有地址的帧以及错误检测功能</td><td style="text-align:center">SLIP、CSLIP、PPP、ARP、RARP、MTU</td></tr><tr><td style="text-align:center">物理层</td><td style="text-align:center">以二进制数据形式在物理媒体上传输</td><td style="text-align:center">ISO2110、IEEE802</td></tr></tbody></table><h2 id="2-数据进入协议栈时的封装"><a href="#2-数据进入协议栈时的封装" class="headerlink" title="2. 数据进入协议栈时的封装"></a>2. 数据进入协议栈时的封装</h2><p><img src="/2018/12/31/ji-suan-ji-wang-luo-zhi-shi-zong-jie/data_packet_in_protocol_stack.png" alt="Data Packet in Protocol Stack"></p><h2 id="3-TCP传输过程"><a href="#3-TCP传输过程" class="headerlink" title="3. TCP传输过程"></a>3. TCP传输过程</h2><p><img src="/2018/12/31/ji-suan-ji-wang-luo-zhi-shi-zong-jie/tcp_communication.png" alt="Tcp Communication"></p><p><a href="http://coolshell.cn/articles/11564.html" target="_blank" rel="noopener">TCP 的那些事儿（上） | | 酷 壳 - CoolShell</a></p><p><a href="http://coolshell.cn/articles/11609.html" target="_blank" rel="noopener">TCP 的那些事儿（下） | | 酷 壳 - CoolShell</a></p><h2 id="4-HTTP报文"><a href="#4-HTTP报文" class="headerlink" title="4. HTTP报文"></a>4. HTTP报文</h2><h3 id="4-1-HTTP请求报文"><a href="#4-1-HTTP请求报文" class="headerlink" title="4.1. HTTP请求报文"></a>4.1. HTTP请求报文</h3><p><img src="http_request_message.png" alt="Http Request Message"></p><h4 id="4-1-1-方法（Method）"><a href="#4-1-1-方法（Method）" class="headerlink" title="4.1.1. 方法（Method）"></a>4.1.1. 方法（Method）</h4><p>客户端希望服务器对资源执行的动作。是一个单独的词，如GET、HEAD或POST。</p><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th><th style="text-align:center">是否包含主体</th></tr></thead><tbody><tr><td style="text-align:center">GET</td><td style="text-align:center">请求获取Request-URL所标识的资源</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">POST</td><td style="text-align:center">向Request-URL所标识的资源发送需要处理的数据</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">HEAD</td><td style="text-align:center">只请求获取由Request-URL所标识的资源的首部</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">PUT</td><td style="text-align:center">将请求的主体部分存储在服务器，并用Request-URL作为其标识</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">DELETE</td><td style="text-align:center">请求服务器删除Request-URL所标识的资源</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">TRACE</td><td style="text-align:center">请求服务器回送收到的请求信息，主要用于测试或诊断</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">OPTIONS</td><td style="text-align:center">请求服务器告知其支持的各种功能</td><td style="text-align:center">否</td></tr></tbody></table><h4 id="4-1-2-请求URL（Request-URL）"><a href="#4-1-2-请求URL（Request-URL）" class="headerlink" title="4.1.2. 请求URL（Request-URL）"></a>4.1.2. 请求URL（Request-URL）</h4><p>命名了所请求资源，或者URL路径组件的完整URL。</p><h4 id="4-1-3-版本（Version）"><a href="#4-1-3-版本（Version）" class="headerlink" title="4.1.3. 版本（Version）"></a>4.1.3. 版本（Version）</h4><p>报文所使用的HTTP版本，格式为</p><pre class=" language-text"><code class="language-text">HTTP/<major>.<minor></code></pre><p>其中主要版本号（major）和次要版本号（minor）都是整数。</p><h4 id="4-1-4-首部（Header-Field）"><a href="#4-1-4-首部（Header-Field）" class="headerlink" title="4.1.4. 首部（Header Field）"></a>4.1.4. 首部（Header Field）</h4><p>首部和方法配合工作，共同决定了客户端和服务器能做什么事情。</p><h5 id="4-1-4-1-通用首部"><a href="#4-1-4-1-通用首部" class="headerlink" title="4.1.4.1. 通用首部"></a>4.1.4.1. 通用首部</h5><h6 id="4-1-4-1-1-通用信息首部"><a href="#4-1-4-1-1-通用信息首部" class="headerlink" title="4.1.4.1.1. 通用信息首部"></a>4.1.4.1.1. 通用信息首部</h6><table><thead><tr><th style="text-align:center">首部</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Connection</td><td style="text-align:center">允许客户端和服务器指定与请求/响应连接有关的选项</td></tr><tr><td style="text-align:center">Date</td><td style="text-align:center">提供日期和时间标志，说明报文是什么时间创建的</td></tr><tr><td style="text-align:center">MIME-Version</td><td style="text-align:center">给出了发送端使用的MIME版本</td></tr><tr><td style="text-align:center">Trailer</td><td style="text-align:center">如果报文采用了分块传输编码（chunked transfer encoding）方式，就可以使用首部列出位于报文拖挂（trailer）部分的首部集合</td></tr><tr><td style="text-align:center">Transfer-Encoding</td><td style="text-align:center">告知接收端为了保证报文的可靠传输，对报文采用了什么编码方式</td></tr><tr><td style="text-align:center">Update</td><td style="text-align:center">给出了发送端可能想要”升级”使用的新版本或协议</td></tr><tr><td style="text-align:center">Via</td><td style="text-align:center">显示了报文经过的中间节点（代理、网关）</td></tr></tbody></table><h6 id="4-1-4-1-2-通用缓存首部"><a href="#4-1-4-1-2-通用缓存首部" class="headerlink" title="4.1.4.1.2. 通用缓存首部"></a>4.1.4.1.2. 通用缓存首部</h6><table><thead><tr><th style="text-align:center">首部</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Cache-Control</td><td style="text-align:center">用于随报文传送缓存的指示</td></tr><tr><td style="text-align:center">Pragma</td><td style="text-align:center">另一种随报文传送指示的方式，但并不专用于缓存。</td></tr></tbody></table><h5 id="4-1-4-2-请求首部"><a href="#4-1-4-2-请求首部" class="headerlink" title="4.1.4.2. 请求首部"></a>4.1.4.2. 请求首部</h5><p>用于说明是谁或什么在发送请求、请求源自何处，或者客户端的喜好及能力。</p><h6 id="4-1-4-2-1-请求信息首部"><a href="#4-1-4-2-1-请求信息首部" class="headerlink" title="4.1.4.2.1. 请求信息首部"></a>4.1.4.2.1. 请求信息首部</h6><table><thead><tr><th style="text-align:center">首部</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Client-IP</td><td style="text-align:center">提供了运行客户端的机器的IP地址。</td></tr><tr><td style="text-align:center">From</td><td style="text-align:center">提供了客户端用户的E-mail地址。</td></tr><tr><td style="text-align:center">Host</td><td style="text-align:center">提供可接受请求的服务器的主机名和端口号</td></tr><tr><td style="text-align:center">Referer</td><td style="text-align:center">提供了包含当前请求URI的文档的URL</td></tr><tr><td style="text-align:center">UA-Color</td><td style="text-align:center">提供了与客户端显示器的显示颜色有关的信息</td></tr><tr><td style="text-align:center">UA-CPU</td><td style="text-align:center">提供了客户端CPU的类型或制造商</td></tr><tr><td style="text-align:center">UA-Disp</td><td style="text-align:center">提供了与客户端显示器能力有关的信息</td></tr><tr><td style="text-align:center">UA-OS</td><td style="text-align:center">提供了运行在客户端机器上的操作系统的名称及版本</td></tr><tr><td style="text-align:center">UA-Pixels</td><td style="text-align:center">提供了客户端显示器的像素信息</td></tr><tr><td style="text-align:center">User-Agent</td><td style="text-align:center">将发起请求的应用程序名称告知服务器</td></tr></tbody></table><h6 id="4-1-4-2-2-Accept首部"><a href="#4-1-4-2-2-Accept首部" class="headerlink" title="4.1.4.2.2. Accept首部"></a>4.1.4.2.2. Accept首部</h6><p>为客户端提供了一种将其洗好和能力告知服务器的方式。这样服务器就可以根据这些信息，对要发送的内容做出更明智的决定。</p><table><thead><tr><th style="text-align:center">首部</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Accept</td><td style="text-align:center">告诉服务器能够发送哪些媒体类型</td></tr><tr><td style="text-align:center">Accept-Charset</td><td style="text-align:center">告诉服务器发送哪些字符集</td></tr><tr><td style="text-align:center">Accept-Encoding</td><td style="text-align:center">告诉服务器能够发送哪些编码方式</td></tr><tr><td style="text-align:center">Accept-Language</td><td style="text-align:center">告诉服务器能够发送哪些语言</td></tr><tr><td style="text-align:center">TE</td><td style="text-align:center">告诉服务器可以使用哪些扩展传输编码</td></tr></tbody></table><h6 id="4-1-4-2-3-条件请求首部"><a href="#4-1-4-2-3-条件请求首部" class="headerlink" title="4.1.4.2.3. 条件请求首部"></a>4.1.4.2.3. 条件请求首部</h6><p>有时客户端希望为请求加上某些限制。比如，如果客户端已经有了一份文档副本，就希望只在服务器上的文档与客户端拥有的副本有区别时，才请求服务器传输文档。通过条件请求首部添加限制就可以达到目的。</p><table><thead><tr><th style="text-align:center">首部</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Expect</td><td style="text-align:center">允许客户端列出某请求所要求的服务器行为</td></tr><tr><td style="text-align:center">If-Match</td><td style="text-align:center">如果实体标记与文档之前的实体标记相匹配，就获取这份文档</td></tr><tr><td style="text-align:center">If-Modified-Since</td><td style="text-align:center">除非在某个指定的日期之后资源被修改过，否则就限制这个请求</td></tr><tr><td style="text-align:center">If-None-Match</td><td style="text-align:center">如果提供的实体标记与当前文档的实体标记不相符，就获取文档</td></tr><tr><td style="text-align:center">If-Range</td><td style="text-align:center">允许对文档的某个范围进行条件请求</td></tr><tr><td style="text-align:center">If-Unmodified-Since</td><td style="text-align:center">除非在某个日期之后资源没有被修改过，否则就限制这个请求</td></tr><tr><td style="text-align:center">Range</td><td style="text-align:center">如果服务器支持范围请求，就请求资源的指定范围</td></tr></tbody></table><h6 id="4-1-4-2-4-安全请求首部"><a href="#4-1-4-2-4-安全请求首部" class="headerlink" title="4.1.4.2.4. 安全请求首部"></a>4.1.4.2.4. 安全请求首部</h6><p>对请求进行质询／响应认证。</p><table><thead><tr><th style="text-align:center">首部</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Authorization</td><td style="text-align:center">包含了客户端提供给服务器，以便对其自身进行认证的数据</td></tr><tr><td style="text-align:center">Cookie</td><td style="text-align:center">客户端用它向服务器传送一个令牌——它并不是真正的安全首部，但确实隐含了安全功能</td></tr><tr><td style="text-align:center">Cookie2</td><td style="text-align:center">用来说明请求端支持的cookies版本</td></tr></tbody></table><h6 id="4-1-4-2-5-代理请求首部"><a href="#4-1-4-2-5-代理请求首部" class="headerlink" title="4.1.4.2.5. 代理请求首部"></a>4.1.4.2.5. 代理请求首部</h6><table><thead><tr><th style="text-align:center">首部</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Max-Forward</td><td style="text-align:center">在通往源端服务器的路径上，将请求转发给其他代理或网关的最大次数——与TRACE方法一起使用</td></tr><tr><td style="text-align:center">Proxy-Authorization</td><td style="text-align:center">与Authorization首部相同，但这个首部实在与代理进行认证的时候后使用的</td></tr><tr><td style="text-align:center">Proxy-Connection</td><td style="text-align:center">与Connection首部相同，但这个首部是在与代理建立连接时使用的</td></tr></tbody></table><h5 id="4-1-4-3-响应首部"><a href="#4-1-4-3-响应首部" class="headerlink" title="4.1.4.3. 响应首部"></a>4.1.4.3. 响应首部</h5><p>响应首部为客户端提供了一些额外的信息, 并在将来发起更好的请求。</p><table><thead><tr><th style="text-align:center">首部</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Age</td><td style="text-align:center">（从最初创建开始）响应持续的时间</td></tr><tr><td style="text-align:center">Public</td><td style="text-align:center">服务器为其资源支持的请求方法列表</td></tr><tr><td style="text-align:center">Retry-After</td><td style="text-align:center">如果资源不可用的话，在此日期或时间重试</td></tr><tr><td style="text-align:center">Server</td><td style="text-align:center">服务器应用程序软件的名称和版本</td></tr><tr><td style="text-align:center">Title</td><td style="text-align:center">对HTML文档来说，就是HTML文档的源端给出的标题</td></tr><tr><td style="text-align:center">Warning</td><td style="text-align:center">比原因短语中更详细一些的警告报文</td></tr></tbody></table><h6 id="4-1-4-3-1-协商首部"><a href="#4-1-4-3-1-协商首部" class="headerlink" title="4.1.4.3.1. 协商首部"></a>4.1.4.3.1. 协商首部</h6><p>如果资源有多种表示方法——比如，如果服务器上有某文档的法语和德语译稿，HTTP/1.1可以为服务器和客户端提供对资源进行协商的能力。</p><table><thead><tr><th style="text-align:center">首部</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Accept-Range</td><td style="text-align:center">对此资源来说，服务器可接受的范围类型</td></tr><tr><td style="text-align:center">Vary</td><td style="text-align:center">服务器查看的其他首部的列表，可能会使响应发生变化；也就是说，这是一个首部列表，服务器会根据这些首部的内容挑选初最合适的资源版本发送给客户端。</td></tr></tbody></table><h6 id="4-1-4-3-2-安全响应首部"><a href="#4-1-4-3-2-安全响应首部" class="headerlink" title="4.1.4.3.2. 安全响应首部"></a>4.1.4.3.2. 安全响应首部</h6><table><thead><tr><th style="text-align:center">首部</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Proxy-Authenticate</td><td style="text-align:center">来自代理的对客户端的质询列表</td></tr><tr><td style="text-align:center">Set-Cookie</td><td style="text-align:center">不是真正的安全首部，但隐含有安全功能；可以在客户端设置一个令牌，以便服务器对客户端进行标识</td></tr><tr><td style="text-align:center">Set-Cookie2</td><td style="text-align:center">与Set-Cookie类似</td></tr><tr><td style="text-align:center">WWW-Authenticate</td><td style="text-align:center">来自服务器的对客户端的质询列表。</td></tr></tbody></table><h5 id="4-1-4-4-实体首部"><a href="#4-1-4-4-实体首部" class="headerlink" title="4.1.4.4. 实体首部"></a>4.1.4.4. 实体首部</h5><p>实体首部指的是用于应对实体主体部分的首部。比如，可以用实体首部来说明实体主体部分的数据类型。</p><table><thead><tr><th style="text-align:center">首部</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Allow</td><td style="text-align:center">列出了可以对此实体执行的请求方法</td></tr><tr><td style="text-align:center">Location</td><td style="text-align:center">告知客户端实体实际上位于何处，用于将接收端定向到资源的（可能是新的）位置（URL）上去</td></tr></tbody></table><h6 id="4-1-4-4-1-内容首部"><a href="#4-1-4-4-1-内容首部" class="headerlink" title="4.1.4.4.1. 内容首部"></a>4.1.4.4.1. 内容首部</h6><p>内容首部提供了与实体内容相关的特定信息，说明了其类型，尺寸以及处理它所需的其他有用信息。</p><table><thead><tr><th style="text-align:center">首部</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Content-Base</td><td style="text-align:center">解析主体中的相对URL时使用的基础URL</td></tr><tr><td style="text-align:center">Content-Encoding</td><td style="text-align:center">对主体执行的任意编码方式</td></tr><tr><td style="text-align:center">Content-Language</td><td style="text-align:center">理解主体时最适宜使用的自然语言</td></tr><tr><td style="text-align:center">Content-length</td><td style="text-align:center">主体的长度或尺寸</td></tr><tr><td style="text-align:center">Content-Location</td><td style="text-align:center">资源实际所处的位置</td></tr><tr><td style="text-align:center">Content-MD5</td><td style="text-align:center">主体的MD5校验和</td></tr><tr><td style="text-align:center">Content-Range</td><td style="text-align:center">在整个资源中此实体表示的字节范围</td></tr><tr><td style="text-align:center">Content-Type</td><td style="text-align:center">这个主体的对象类型</td></tr></tbody></table><h6 id="4-1-4-4-2-实体缓存首部"><a href="#4-1-4-4-2-实体缓存首部" class="headerlink" title="4.1.4.4.2. 实体缓存首部"></a>4.1.4.4.2. 实体缓存首部</h6><p>通用的缓存首部说明了如何或什么时候进行缓存。实体的缓存首部提供了与被缓存实体有关的信息。</p><table><thead><tr><th style="text-align:center">首部</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">ETag</td><td style="text-align:center">与此实体相关的实体标记</td></tr><tr><td style="text-align:center">Expires</td><td style="text-align:center">实体不再有效，要从原始的源端再次获取此实体的日期和时间</td></tr><tr><td style="text-align:center">Last-Modified</td><td style="text-align:center">这个实体最后一次被修改的日期和时间</td></tr></tbody></table><h4 id="4-1-5-实体主体（Entity-Body）"><a href="#4-1-5-实体主体（Entity-Body）" class="headerlink" title="4.1.5. 实体主体（Entity Body）"></a>4.1.5. 实体主体（Entity Body）</h4><p>实体的主体是HTTP报文的负荷，就是HTTP要传输的内容。</p><h3 id="4-2-HTTP响应报文"><a href="#4-2-HTTP响应报文" class="headerlink" title="4.2. HTTP响应报文"></a>4.2. HTTP响应报文</h3><p><img src="http_response_message.png" alt="Http Response Message"></p><h4 id="4-2-1-版本（Version）"><a href="#4-2-1-版本（Version）" class="headerlink" title="4.2.1. 版本（Version）"></a>4.2.1. 版本（Version）</h4><p>如上所述</p><h4 id="4-2-2-状态码（Status-Code）和短语（Phrase）"><a href="#4-2-2-状态码（Status-Code）和短语（Phrase）" class="headerlink" title="4.2.2. 状态码（Status Code）和短语（Phrase）"></a>4.2.2. 状态码（Status Code）和短语（Phrase）</h4><h5 id="4-2-2-1-状态码分类"><a href="#4-2-2-1-状态码分类" class="headerlink" title="4.2.2.1. 状态码分类"></a>4.2.2.1. 状态码分类</h5><table><thead><tr><th style="text-align:center">整体范围</th><th style="text-align:center">已定义范围</th><th style="text-align:center">分类</th></tr></thead><tbody><tr><td style="text-align:center">100～199</td><td style="text-align:center">100～101</td><td style="text-align:center">消息</td></tr><tr><td style="text-align:center">200～299</td><td style="text-align:center">200～206</td><td style="text-align:center">成功</td></tr><tr><td style="text-align:center">300～399</td><td style="text-align:center">300～305</td><td style="text-align:center">重定向</td></tr><tr><td style="text-align:center">400～499</td><td style="text-align:center">400～415</td><td style="text-align:center">客户端错误</td></tr><tr><td style="text-align:center">500～599</td><td style="text-align:center">500～505</td><td style="text-align:center">服务器错误</td></tr></tbody></table><h5 id="4-2-2-2-常见状态码："><a href="#4-2-2-2-常见状态码：" class="headerlink" title="4.2.2.2. 常见状态码："></a>4.2.2.2. 常见状态码：</h5><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">短语</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">200</td><td style="text-align:center">OK</td><td style="text-align:center">请求已成功，请求所希望的响应头或数据体将随此响应返回。</td></tr><tr><td style="text-align:center">301</td><td style="text-align:center">Moved Permanently</td><td style="text-align:center">被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。</td></tr><tr><td style="text-align:center">400</td><td style="text-align:center">Bad Request</td><td style="text-align:center">由于包含语法错误，当前请求无法被服务器理解。</td></tr><tr><td style="text-align:center">401</td><td style="text-align:center">Unauthorized</td><td style="text-align:center">当前请求需要用户验证。</td></tr><tr><td style="text-align:center">403</td><td style="text-align:center">Forbidden</td><td style="text-align:center">服务器已经理解请求，但是拒绝执行它。</td></tr><tr><td style="text-align:center">404</td><td style="text-align:center">Not Found</td><td style="text-align:center">请求失败，请求所希望得到的资源未被在服务器上发现。</td></tr><tr><td style="text-align:center">408</td><td style="text-align:center">Request Timeout</td><td style="text-align:center">请求超时。</td></tr><tr><td style="text-align:center">500</td><td style="text-align:center">Internal Server Error</td><td style="text-align:center">服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。</td></tr><tr><td style="text-align:center">503</td><td style="text-align:center">Service Unavailable</td><td style="text-align:center">由于临时的服务器维护或者过载，服务器当前无法处理请求。</td></tr></tbody></table><h4 id="4-2-3-首部（Header-Field）"><a href="#4-2-3-首部（Header-Field）" class="headerlink" title="4.2.3. 首部（Header Field）"></a>4.2.3. 首部（Header Field）</h4><p>如上所述</p><h4 id="4-2-4-实体主体（Entity-Body）"><a href="#4-2-4-实体主体（Entity-Body）" class="headerlink" title="4.2.4. 实体主体（Entity Body）"></a>4.2.4. 实体主体（Entity Body）</h4><p>如上所述</p><h2 id="5-MTU最小64B最大1518B的由来"><a href="#5-MTU最小64B最大1518B的由来" class="headerlink" title="5. MTU最小64B最大1518B的由来"></a>5. MTU最小64B最大1518B的由来</h2><p>在CSMA/CD下，每个节点在自己发送数据之后的一小段时间内，存在着遭遇冲突的可能性，只有经过争用期（以太网端到端的往返时延）这段时间还没有检测到冲突，才能确定这次发送不会发生冲突。而争用期为57.6us（以太网支持最大4个中继器，最长2500米），在10Mbps网络中，57.6us内能够传输576bit，即72B；去掉8B的前导符和帧开始符，以太网帧的最小长度是64B。</p><p>由于线路质量差而引起的丢包，发生在大包的概率比小包的概率大得多，所以大包在丢包率较高的线路上不是一个好的选择；但如果选择一个较小的长度，传输效率又不高。如选择以太网长度为218B，则TCP payload = 218 - Ethernet Header - IP Header - TCP Header = 218 - 18 - 20 - 20 = 160B，有效传输率 = 160 / 218 = 73%；而如果选择长度为1518B，则有效传输率 = 1460/1518 = 96%。于是选取一个折中的长度：1518B；其对应的IP数据报长度为1500B。</p><p><a href="https://zhuanlan.zhihu.com/p/21318925" target="_blank" rel="noopener">车小胖谈网络：Ethernet Frame - 知乎专栏</a></p><h2 id="6-IPv4分组格式"><a href="#6-IPv4分组格式" class="headerlink" title="6. IPv4分组格式"></a>6. IPv4分组格式</h2><p><img src="/2018/12/31/ji-suan-ji-wang-luo-zhi-shi-zong-jie/ipv4_packet_structure.png" alt="IPv4 Packet Structure"></p><h2 id="7-HTTP响应码301和302的区别？"><a href="#7-HTTP响应码301和302的区别？" class="headerlink" title="7. HTTP响应码301和302的区别？"></a>7. HTTP响应码301和302的区别？</h2><p>301：永久重定向。是当用户或搜索引擎向网站服务器发出浏览请求时，服务器返回的HTTP数据流中头信息(header)中的状态码的一种，表示本网页永久性转移到另一个地址。</p><p>302：临时重定向。搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回302代码，搜索引擎认为新的网址只是暂时的。</p><h2 id="8-什么是HTTP的长连接和短连接？"><a href="#8-什么是HTTP的长连接和短连接？" class="headerlink" title="8. 什么是HTTP的长连接和短连接？"></a>8. 什么是HTTP的长连接和短连接？</h2><p>在HTTP/1.0中，默认使用的是短连接。也就是说，浏览器和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接。</p><p>但从 HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头中包含有<code>Connection:keep-alive</code>。在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。</p><p>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</p><h2 id="9-什么是TCP的长连接和短连接？"><a href="#9-什么是TCP的长连接和短连接？" class="headerlink" title="9. 什么是TCP的长连接和短连接？"></a>9. 什么是TCP的长连接和短连接？</h2><p>TCP短连接：client向server发起连接请求，server接到请求，然后双方建立连接。client向server发送消息，server回应client，然后一次读写就完成了，这时候双方任何一个都可以发起close操作，不过一般都是client先发起close操作。</p><p>TCP长连接：client向server发起连接，server接受client连接，双方建立连接。Client与server完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。</p><p>长连接可以省去较多的TCP建立和关闭的操作，减少浪费，节约时间；但对server端压力较大。短连接对于服务器来说管理较为简单，存在的连接都是有用的连接，不需要额外的控制手段。但如果客户请求频繁，将在TCP的建立和关闭操作上浪费时间和带宽。</p><p>长连接多用于操作频繁，点对点的通讯，而且连接数不能太多情况。而像Web网站的http服务一般都用短链接。</p><h2 id="10-session和cookie有什么区别"><a href="#10-session和cookie有什么区别" class="headerlink" title="10. session和cookie有什么区别"></a>10. session和cookie有什么区别</h2><ul><li>session在服务器端，cookie在客户端（浏览器）；</li><li>session的运行依赖session id，而session id是保存在cookie中的；</li><li>cookie目的可以跟踪会话，也可以保存用户喜好或者保存用户名密码；</li><li>session用来跟踪会话。</li></ul><h2 id="11-分布式session如何同步"><a href="#11-分布式session如何同步" class="headerlink" title="11. 分布式session如何同步"></a>11. 分布式session如何同步</h2><ul><li>进程间通信传递session数据；</li><li>cookie加密存储session；</li><li>采用统一session接入点</li></ul><h2 id="12-ARP协议"><a href="#12-ARP协议" class="headerlink" title="12. ARP协议"></a>12. ARP协议</h2><p>ARP协议为网络层协议，其工作在数据链路层，适用于局域网。ARP协议工作过程：</p><ol><li>本地主机在局域网中广播ARP请求，ARP请求数据帧中包含目的主机的IP地址。意思是“如果你是这个IP地址的拥有者，请回答你的硬件地址”。</li><li>目的主机的ARP层解析这份广播报文，识别出是询问其硬件地址。于是发送ARP应答包，里面包含IP地址及其对应的硬件地址。</li><li>本地主机收到ARP应答后，知道了目的地址的硬件地址，之后的数据报就可以传送了。</li></ol><h2 id="13-HTTPS"><a href="#13-HTTPS" class="headerlink" title="13. HTTPS"></a>13. HTTPS</h2><p><img src="https_communication.png" alt="HTTPS Communication"></p><p>HTTPS传输过程：</p><ol><li>服务端配置：采用HTTPS协议的服务器必须要有一套数字证书。这套证书其实就是一对公钥和私钥。</li><li>客户端发起HTTPS请求：就是用户在浏览器中输入一个https网址，连接到server的443端口。</li><li>传送证书：即公钥，只是包含了很多信息，如证书的颁发机构，过期时间等。</li><li>客户端解析证书：由客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等。如果证书没有问题，</li><li>传送随机值（私钥）：客户端生成一个随机值，然后用证书对该随机值进行加密并发送给服务端。</li><li>服务端解密随机值（私钥）：服务端用私钥解密后，得到了客户端传过来的随机值。</li><li>服务端传输加密后的信息：服务端将要传送的信息用随机值（私钥）加密后，传送给客户端。</li><li>客户端解密信息：客户端使用随机值（私钥）解密服务端发送的加密信息，获取解密后的信息。</li></ol><p>HTTPS其实就是建构在SSL/TLS之上的HTTP协议：</p><p><img src="https_ssl.png" alt="HTTPS SSL"></p><p>HTTP使用TCP三次握手建立连接，客户端和服务器需要交换3个包；HTTPS除了TCP的三个包，还要加上SSL握手需要的9个包，共是12个包。</p><p>HTTPS和HTTP主要区别：</p><ul><li>HTTPS协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</li><li>HTTP是超文本传输协议，信息是明文传输，HTTPS则是具有安全性的SSL加密传输协议。</li><li>HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li></ul><h2 id="14-HTTP-1-0和HTTP-1-1的区别"><a href="#14-HTTP-1-0和HTTP-1-1的区别" class="headerlink" title="14. HTTP 1.0和HTTP 1.1的区别"></a>14. HTTP 1.0和HTTP 1.1的区别</h2><ul><li>缓存处理：在HTTP 1.0中主要使用header里的<code>If-Modified-Since</code>,<code>Expires</code>来做为缓存判断的标准，HTTP 1.1则引入了更多的缓存控制策略例如<code>Entity tag</code>，<code>If-Unmodified-Since</code>, <code>If-Match</code>, <code>If-None-Match</code>等更多可供选择的缓存头来控制缓存策略。</li><li>带宽优化及网络连接的使用：HTTP 1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP 1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li><li>错误通知的管理：在HTTP 1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</li><li>Host头处理：在HTTP 1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP 1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</li><li>长连接：HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP 1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP 1.0每次请求都要创建连接的缺点。</li></ul><p>参考：<a href="http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/" target="_blank" rel="noopener">HTTP,HTTP2.0,SPDY,HTTPS你应该知道的一些事 | AlloyTeam</a></p><h2 id="15-HTTP-1-1和HTTP-2-0的区别"><a href="#15-HTTP-1-1和HTTP-2-0的区别" class="headerlink" title="15. HTTP 1.1和HTTP 2.0的区别"></a>15. HTTP 1.1和HTTP 2.0的区别</h2><ul><li>新的二进制格式（Binary Format）：HTTP 1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP 2.0的协议解析决定采用二进制格式，实现方便且健壮。</li><li>多路复用（MultiPlexing）：即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的id将request再归属到各自不同的服务端请求里面。</li><li>header压缩：HTTP 1.x的header带有大量信息，而且每次都要重复发送，HTTP 2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</li><li>服务端推送（server push）：server push功能。</li></ul><p>参考：<a href="http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/" target="_blank" rel="noopener">HTTP,HTTP2.0,SPDY,HTTPS你应该知道的一些事 | AlloyTeam</a></p><h2 id="16-traceroute和ping的区别"><a href="#16-traceroute和ping的区别" class="headerlink" title="16. traceroute和ping的区别"></a>16. traceroute和ping的区别</h2><h3 id="16-1-traceroute"><a href="#16-1-traceroute" class="headerlink" title="16.1. traceroute"></a>16.1. traceroute</h3><p>traceroute主要利用了TCP/IP协议族中的两个特性：</p><ul><li>路由器转发IP数据报时需要把TTL减1，当TTL减为0时路由器会向源端发送ICMP超时报文；</li><li>主机（或路由器）处理处理目的地址时本机的UDP报文时，当报文中目的端口字段指定的端口不可用时，将向UDP报文发送端发送ICMP端口不可达报文。</li></ul><p>traceroute的工作流程是源端发送一份TTL为1的UDP报文到目的端，处理这个报文的第一个路由器将TTL减1，丢弃该报文，并向源端发回ICMP超时报文，从而学到第一台路由器地址。然后traceroute发送TTL为2的数据报，这样第二台路由器同样丢弃报文并发回ICMP超时报文，从而学到第二台路由器地址。如此循环直到目的主机（或路由器）接收到该报文，这样就学习到了全路径的路由。</p><p>目的端接收UDP报文以后可能不会像其他路由器一样发回ICMP超时报文，这时在traceroute发送的UDP报文中目的端口号填上一个不可能被使用的值（30000以上），这样目的端收到时会发回ICMP端口不可达报文，这样traceroute就知道已经到达目的端了。</p><h3 id="16-2-ping"><a href="#16-2-ping" class="headerlink" title="16.2. ping"></a>16.2. ping</h3><p>ping发送一份ICMP Echo Request（Echo Request）报文给另一台主机，并等待返回ICMP Echo Reply（Echo Reply）。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python常见代码总结</title>
      <link href="/2018/12/31/python-chang-jian-dai-ma-zong-jie/"/>
      <url>/2018/12/31/python-chang-jian-dai-ma-zong-jie/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-数据结构">1. 数据结构</a><ul><li><a href="#11-单例模式">1.1. 单例模式</a></li><li><a href="#12-排序">1.2. 排序</a><ul><li><a href="#121-快速排序partition过程">1.2.1. 快速排序<code>partition</code>过程</a></li><li><a href="#122-快速排序">1.2.2. 快速排序</a></li><li><a href="#123-非递归">1.2.3. 非递归</a></li><li><a href="#124-插入排序">1.2.4. 插入排序</a></li><li><a href="#125-冒泡排序">1.2.5. 冒泡排序</a></li><li><a href="#126-选择排序">1.2.6. 选择排序</a></li><li><a href="#127-归并排序">1.2.7. 归并排序</a></li><li><a href="#128-堆排序">1.2.8. 堆排序</a></li></ul></li><li><a href="#13-链表">1.3. 链表</a><ul><li><a href="#131-反转链表头插法">1.3.1. 反转链表（头插法）</a></li><li><a href="#132-单链表去重">1.3.2. 单链表去重</a></li><li><a href="#133-合并两个链表">1.3.3. 合并两个链表</a></li><li><a href="#134-链表排序">1.3.4. 链表排序</a></li><li><a href="#135-检查回文链表">1.3.5. 检查回文链表</a></li><li><a href="#136-链表等概率随机抽取元素">1.3.6. 链表等概率随机抽取元素</a></li><li><a href="#137-链表按奇数序号和偶数序号重排">1.3.7. 链表按奇数序号和偶数序号重排</a></li></ul></li><li><a href="#14-二叉树遍历">1.4. 二叉树遍历</a><ul><li><a href="#141-二叉树前序遍历">1.4.1. 二叉树前序遍历</a></li><li><a href="#142-二叉树中序遍历">1.4.2. 二叉树中序遍历</a></li><li><a href="#143-二叉树后序遍历">1.4.3. 二叉树后序遍历</a></li><li><a href="#144-二叉树层次遍历">1.4.4. 二叉树层次遍历</a></li></ul></li><li><a href="#15-图">1.5. 图</a><ul><li><a href="#151-dijkstra算法">1.5.1. Dijkstra算法</a></li><li><a href="#152-floyd-warshall算法">1.5.2. Floyd-Warshall算法</a></li><li><a href="#153-拓扑排序">1.5.3. 拓扑排序</a></li></ul></li><li><a href="#16-查找">1.6. 查找</a><ul><li><a href="#161-二分搜索">1.6.1. 二分搜索</a></li><li><a href="#162-并查集">1.6.2. 并查集</a></li><li><a href="#163-trie树">1.6.3. Trie树</a></li></ul></li><li><a href="#17-回溯">1.7. 回溯</a><ul><li><a href="#171-n皇后问题">1.7.1. N皇后问题</a></li></ul></li><li><a href="#18-栈与队列">1.8. 栈与队列</a><ul><li><a href="#181-栈模拟队列">1.8.1. 栈模拟队列</a></li><li><a href="#182-队列模拟栈">1.8.2. 队列模拟栈</a></li></ul></li><li><a href="#19-同步问题">1.9. 同步问题</a><ul><li><a href="#191-生产者消费者模型">1.9.1. 生产者——消费者模型</a></li></ul></li><li><a href="#110-缓存策略">1.10. 缓存策略</a><ul><li><a href="#1101-lru">1.10.1. LRU</a></li><li><a href="#1102-lfu">1.10.2. LFU</a></li></ul></li><li><a href="#111-斐波拉契数列">1.11. 斐波拉契数列</a><ul><li><a href="#1111-自顶向下">1.11.1. 自顶向下</a></li><li><a href="#1112-自底向上">1.11.2. 自底向上</a></li></ul></li><li><a href="#112-动态规划">1.12. 动态规划</a><ul><li><a href="#1121-背包问题">1.12.1. 背包问题</a></li></ul></li></ul></li><li><a href="#2-经典题目">2. 经典题目</a><ul><li><a href="#21-计算数字二进制表示的1的个数">2.1. 计算数字二进制表示的1的个数</a></li><li><a href="#22-数组中除一个数仅出现一次外其他数均出现两次找出这个数">2.2. 数组中除一个数仅出现一次外，其他数均出现两次，找出这个数</a></li><li><a href="#23-长为n的数组中所有元素在1-n之间元素最多出现两次找出1-n中没出现的元素">2.3. 长为n的数组中所有元素在[1, n]之间，元素最多出现两次，找出[1, n]中没出现的元素</a></li><li><a href="#24-不用和-计算两个数的和">2.4. 不用<code>+</code>和<code>-</code>计算两个数的和</a></li><li><a href="#25-反转二叉树">2.5. 反转二叉树</a></li><li><a href="#26-把数组中所有0移动到尾部数组元素保持相对顺序不变">2.6. 把数组中所有0移动到尾部，数组元素保持相对顺序不变</a></li><li><a href="#27-定义一次move是将长为n的数组中n-1个数均加1最少多少个move可以使得数组中所有元素相等">2.7. 定义一次move是将长为n的数组中n-1个数均加1，最少多少个move可以使得数组中所有元素相等</a></li><li><a href="#28-找出长为n的数组中出现次数大于⌊-n2-⌋的元素">2.8. 找出长为n的数组中出现次数大于⌊ n/2 ⌋的元素</a></li><li><a href="#29-找出长为n的数组中出现次数大于⌊-nk-⌋的元素">2.9. 找出长为n的数组中出现次数大于⌊ n/k ⌋的元素</a></li><li><a href="#210-十进制转换为7进制">2.10. 十进制转换为7进制</a></li><li><a href="#211-指定长度二进制数指定1的个数的所有可能情况">2.11. 指定长度二进制数，指定1的个数的所有可能情况</a></li><li><a href="#212-有序数组转二叉搜索树">2.12. 有序数组转二叉搜索树</a></li><li><a href="#213-最大连续子序列和">2.13. 最大连续子序列和</a><ul><li><a href="#2131-最小值为0">2.13.1. 最小值为0</a></li><li><a href="#2132-最小值为负数">2.13.2. 最小值为负数</a></li></ul></li><li><a href="#214-最大连续子序列积">2.14. 最大连续子序列积</a></li><li><a href="#215-判断一个数是否为2的幂次">2.15. 判断一个数是否为2的幂次</a></li><li><a href="#216-判断一个数是否为4的幂次">2.16. 判断一个数是否为4的幂次</a></li><li><a href="#217-最近公共祖先问题">2.17. 最近公共祖先问题</a><ul><li><a href="#2171-二叉树的最近公共祖先">2.17.1. 二叉树的最近公共祖先</a></li><li><a href="#2172-二叉搜索树的最近公共祖先">2.17.2. 二叉搜索树的最近公共祖先</a></li></ul></li><li><a href="#218-挑选数组中不连续的元素使其和最大">2.18. 挑选数组中不连续的元素，使其和最大</a></li><li><a href="#219-镜像二叉树">2.19. 镜像二叉树</a></li><li><a href="#220-判断二叉树是否平衡">2.20. 判断二叉树是否平衡</a></li><li><a href="#221-二分法求平方根">2.21. 二分法求平方根</a></li><li><a href="#222-n求末尾0的个数">2.22. n!求末尾0的个数</a></li><li><a href="#223-有序数组去重">2.23. 有序数组去重</a></li><li><a href="#224-链表判断环">2.24. 链表判断环</a></li><li><a href="#225-有环链表获取环起始结点">2.25. 有环链表获取环起始结点</a></li><li><a href="#226-判断是否为回文数">2.26. 判断是否为回文数</a></li><li><a href="#227-是否存在二叉树根到叶子节点路径和为指定值">2.27. 是否存在二叉树根到叶子节点路径和为指定值</a></li><li><a href="#228-找出字符串中所有变位词">2.28. 找出字符串中所有变位词</a></li><li><a href="#229-判断两个字符串是否为同构字符串">2.29. 判断两个字符串是否为同构字符串</a></li><li><a href="#230-判断一个数是否为其全部约数的和">2.30. 判断一个数是否为其全部约数的和</a></li><li><a href="#231-打乱数组元素">2.31. 打乱数组元素</a></li><li><a href="#232-生成不重复随机序列">2.32. 生成不重复随机序列</a></li><li><a href="#233-使用随机生成0到5的函数实现随机生成0到7的函数">2.33. 使用随机生成0到5的函数，实现随机生成0到7的函数</a></li><li><a href="#234-计算数组abcd中有多少种i-j-k-l使得ai--bj--ck--dl--0">2.34. 计算数组A、B、C、D中有多少种(i, j, k, l)使得A[i] + B[j] + C[k] + D[l] = 0</a></li><li><a href="#235-计算给出的多个时间中最小的时间差">2.35. 计算给出的多个时间中，最小的时间差</a></li><li><a href="#236-计算\0-10^n中各位数字不同的数的个数">2.36. 计算[0, 10^n)中各位数字不同的数的个数</a></li><li><a href="#237-数组中仅有两个数仅出现一次其余的数均出现两次找出这两个数">2.37. 数组中仅有两个数仅出现一次，其余的数均出现两次，找出这两个数</a></li><li><a href="#238-找出递增数列中第n位的数字">2.38. 找出递增数列中第n位的数字</a></li><li><a href="#239-计算小于n的质数的个数">2.39. 计算小于n的质数的个数</a></li><li><a href="#240-由部分可重复给定数组元素相加得到指定值的情况数">2.40. 由部分（可重复）给定数组元素相加得到指定值的情况数</a></li><li><a href="#241-在有序矩阵中寻找第k大的数">2.41. 在有序矩阵中寻找第k大的数</a></li><li><a href="#242-求n对括号的所有排列情况">2.42. 求n对括号的所有排列情况</a></li><li><a href="#243-给定字符串数组求最大不相交的两个字符串的长度积">2.43. 给定字符串数组，求最大不相交的两个字符串的长度积</a></li><li><a href="#244-在由1-n组成的长为n--1的数组中寻找重复的那个数">2.44. 在由[1, n]组成的长为n + 1的数组中，寻找重复的那个数</a></li><li><a href="#245-求给定数组的所有排列情况">2.45. 求给定数组的所有排列情况</a></li><li><a href="#246-求给定元素可重复数组的所有排列情况">2.46. 求给定（元素可重复）数组的所有排列情况</a></li><li><a href="#247-最长回文子序列">2.47. 最长回文子序列</a></li><li><a href="#248-将1-n的数按字典排序">2.48. 将[1, n]的数按字典排序</a></li><li><a href="#249-二叉搜索树迭代器">2.49. 二叉搜索树迭代器</a></li><li><a href="#250-由1-n组成的二叉搜索树的个数">2.50. 由[1, n]组成的二叉搜索树的个数</a></li><li><a href="#251-格雷码">2.51. 格雷码</a></li><li><a href="#252-从m-x-n棋盘左上角走到右下角的路径总数">2.52. 从m x n棋盘左上角走到右下角的路径总数</a></li><li><a href="#253-求集合的所有子集">2.53. 求集合的所有子集</a></li><li><a href="#254-求元素可重复集合的所有子集">2.54. 求（元素可重复）集合的所有子集</a></li><li><a href="#255-判断数组arr中是否存在arri-lt-arrj-lt-arrk">2.55. 判断数组arr中是否存在arr[i] &lt; arr[j] &lt; arr[k]</a></li><li><a href="#256-查找数组中第k大的数">2.56. 查找数组中第k大的数</a></li><li><a href="#257-链表删除倒数第n个结点">2.57. 链表删除倒数第n个结点</a></li><li><a href="#258-判断数组是否可以拼接为正方形">2.58. 判断数组是否可以拼接为正方形</a></li><li><a href="#259-快速pow">2.59. 快速<code>pow()</code></a></li><li><a href="#260-判断数组是否可以分为相等的两部分">2.60. 判断数组是否可以分为相等的两部分</a></li><li><a href="#261-在矩阵中查找指定值">2.61. 在矩阵中查找指定值</a></li><li><a href="#262-将矩阵顺时针旋转90度">2.62. 将矩阵顺时针旋转90度</a></li><li><a href="#263-最长递增子序列">2.63. 最长递增子序列</a></li><li><a href="#264-求二维矩阵由左上角到右下角的最小和">2.64. 求二维矩阵由左上角到右下角的最小和</a></li><li><a href="#265-将由012组成的数组排序">2.65. 将由0、1、2组成的数组排序</a></li><li><a href="#266-求第n位仅由指定因数组成的数字">2.66. 求第n位仅由指定因数组成的数字</a></li><li><a href="#267-数组中查找极大值">2.67. 数组中查找极大值</a></li><li><a href="#268-判断n能否由平方数的和组成">2.68. 判断n能否由平方数的和组成</a></li><li><a href="#269-删除二叉搜索树中的结点">2.69. 删除二叉搜索树中的结点</a></li><li><a href="#270-检查字符串是否是合法的二叉树前序遍历结果">2.70. 检查字符串是否是合法的二叉树前序遍历结果</a></li><li><a href="#271-中缀表达式转后缀表达式">2.71. 中缀表达式转后缀表达式</a></li><li><a href="#272-排列的下一种情况">2.72. 排列的下一种情况</a></li><li><a href="#273-求旋转有序数组的最小值">2.73. 求旋转有序数组的最小值</a></li><li><a href="#274-在旋转有序数组中查找指定值">2.74. 在旋转有序数组中查找指定值</a></li><li><a href="#275-在旋转元素可重复有序数组中查找指定值">2.75. 在旋转（元素可重复）有序数组中查找指定值</a></li><li><a href="#276-有序数组中查找特定元素的第一个和最后一个索引">2.76. 有序数组中查找特定元素的第一个和最后一个索引</a></li><li><a href="#277-有序数组中查找指定值的插入位置">2.77. 有序数组中查找指定值的插入位置</a></li><li><a href="#278-实现powx-n">2.78. 实现<code>pow(x, n)</code></a></li><li><a href="#279-第k个排列">2.79. 第k个排列</a></li><li><a href="#280-链表向右循环移动k个位置">2.80. 链表向右循环移动k个位置</a></li><li><a href="#281-先序遍历和中序遍历构建二叉树">2.81. 先序遍历和中序遍历构建二叉树</a></li><li><a href="#282-中序遍历和后序遍历构建二叉树">2.82. 中序遍历和后序遍历构建二叉树</a></li><li><a href="#283-求杨辉三角第k行的值">2.83. 求杨辉三角第k行的值</a></li><li><a href="#284-克隆图">2.84. 克隆图</a></li><li><a href="#285-查找数组中的极大值元素">2.85. 查找数组中的极大值元素</a></li><li><a href="#286-将数组合并拼接为最大的数">2.86. 将数组合并拼接为最大的数</a></li><li><a href="#287-计算完全二叉树的结点数">2.87. 计算完全二叉树的结点数</a></li><li><a href="#288-加减乘除无括号计算器">2.88. 加减乘除（无括号）计算器</a></li><li><a href="#289-加减带括号计算器">2.89. 加减（带括号）计算器</a></li><li><a href="#290-二叉搜索树中第k小的数">2.90. 二叉搜索树中第k小的数</a></li><li><a href="#291-求元素可更新数组指定区间的和">2.91. 求（元素可更新）数组指定区间的和</a></li><li><a href="#292-求数组中任意两个元素异或的最大值">2.92. 求数组中任意两个元素异或的最大值</a></li><li><a href="#293-二叉搜索树的序列化和反序列化">2.93. 二叉搜索树的序列化和反序列化</a></li><li><a href="#294-轮流取数判断先取者是否必胜">2.94. 轮流取数判断先取者是否必胜</a></li><li><a href="#295-一串数加上分别加上加号或减号使其结果等于指定值">2.95. 一串数加上分别加上加号或减号使其结果等于指定值</a></li><li><a href="#296-有序数组中除一个数仅出现一次外其他数均出现两次求这个数">2.96. 有序数组中除一个数仅出现一次外，其他数均出现两次，求这个数</a></li><li><a href="#297-最长任意元素差最大为1的子序列">2.97. 最长任意元素差最大为1的子序列</a></li><li><a href="#298-数组中寻找任意三个元素的最大积">2.98. 数组中寻找任意三个元素的最大积</a></li><li><a href="#299-生成结点个数为n的所有二叉搜索树">2.99. 生成结点个数为n的所有二叉搜索树</a></li><li><a href="#2100-数组中除一个数仅出现一次外其他数均出现三次求这个数">2.100. 数组中除一个数仅出现一次外，其他数均出现三次，求这个数</a></li><li><a href="#2101-将一个数拆分为多个数的和并使这些数的积最大">2.101. 将一个数拆分为多个数的和，并使这些数的积最大</a></li><li><a href="#2102-轮流取数先取者是否必胜">2.102. 轮流取数先取者是否必胜</a></li><li><a href="#2103-区间调度问题">2.103. 区间调度问题</a><ul><li><a href="#21031-最多区间调度">2.103.1. 最多区间调度</a></li></ul></li><li><a href="#2104-寻找数组中是否存在numsi和numsj差的绝对值最大为ti和j差的绝对值最大为k">2.104. 寻找数组中是否存在<code>nums[i]</code>和<code>nums[j]</code>差的绝对值最大为t，<code>i</code>和<code>j</code>差的绝对值最大为k</a></li><li><a href="#2105-猜数游戏猜错需要付钱求确保猜中的最小代价">2.105. 猜数游戏，猜错需要付钱，求确保猜中的最小代价</a></li><li><a href="#2106-寻找数组中是否存在i--j--k使得ai--ak--aj">2.106. 寻找数组中是否存在<code>i &lt; j &lt; k</code>使得<code>ai &lt; ak &lt; aj</code></a></li><li><a href="#2107-矩阵上从某一点经过最多n次移动出界外的路径总数">2.107. 矩阵上从某一点经过最多N次移动出界外的路径总数</a></li><li><a href="#2108-每次操作删除一个字符求使得两个字符串相同的最少操作次数">2.108. 每次操作删除一个字符，求使得两个字符串相同的最少操作次数</a></li><li><a href="#2109-求字符串的不同下标回文字串的数目">2.109. 求字符串的（不同下标）回文字串的数目</a></li><li><a href="#2110-打印二叉树">2.110. 打印二叉树</a></li><li><a href="#2111-是否可以仅改变一个元素使得数组为单调递增数组">2.111. 是否可以仅改变一个元素，使得数组为单调递增数组</a></li><li><a href="#2112-仅调换一次一个数的两个数字求最大值">2.112. 仅调换一次一个数的两个数字，求最大值</a></li><li><a href="#2113-检查带有通配符的括号序列是否合法">2.113. 检查带有通配符的括号序列是否合法</a></li><li><a href="#2114-两个有序数组的中位数">2.114. 两个有序数组的中位数</a></li><li><a href="#2115-带有和的正则表达式匹配">2.115. 带有<code>.</code>和<code>*</code>的正则表达式匹配</a></li><li><a href="#2116-合并多个有序链表">2.116. 合并多个有序链表</a></li><li><a href="#2117-最长合法括号字串">2.117. 最长合法括号字串</a></li><li><a href="#2118-带有和的正则表达式匹配">2.118. 带有<code>?</code>和<code>*</code>的正则表达式匹配</a></li><li><a href="#2119-检查字符串是否是合法数字">2.119. 检查字符串是否是合法数字</a></li><li><a href="#2120-通过插入删除和替换最少需要多少次操作可以使得两个字符串相同">2.120. 通过插入、删除和替换，最少需要多少次操作可以使得两个字符串相同</a></li><li><a href="#2121-柱状图中的最大矩形">2.121. 柱状图中的最大矩形</a></li><li><a href="#2122-矩阵中由1组成的最大矩阵">2.122. 矩阵中由1组成的最大矩阵</a></li><li><a href="#2123-判断字符串是否由给定的两个字符串组合而成">2.123. 判断字符串是否由给定的两个字符串组合而成</a></li><li><a href="#2124-一个字符串有多少个子序列可以组成另一个字符串">2.124. 一个字符串有多少个子序列可以组成另一个字符串</a></li><li><a href="#2125-二叉树上最大不需要经过根结点路径和">2.125. 二叉树上最大（不需要经过根结点）路径和</a></li><li><a href="#2126-求将字符串切分为回文字串需要的最少切分次数">2.126. 求将字符串切分为回文字串需要的最少切分次数</a></li><li><a href="#2127-二维坐标系下一条线上最多多少个点">2.127. 二维坐标系下一条线上最多多少个点</a></li><li><a href="#2128-股票交易求最大收益最多可以进行k次交易">2.128. 股票交易求最大收益，最多可以进行k次交易</a></li><li><a href="#2129-在字符串前插入一些字符使得字符串为回文字符串">2.129. 在字符串前插入一些字符使得字符串为回文字符串、</a></li><li><a href="#2130-计算从1到n中含有数字1的数的个数">2.130. 计算从1到n中含有数字1的数的个数</a></li><li><a href="#2131-移动窗口求每个窗口元素最大值">2.131. 移动窗口求每个窗口元素最大值</a></li><li><a href="#2132-数字转换为英文单词组合">2.132. 数字转换为英文单词组合</a></li><li><a href="#2133-二叉树的序列化和反序列化">2.133. 二叉树的序列化和反序列化</a></li><li><a href="#2134-移除字符串中的重复字符并使得最终结果字典序最小">2.134. 移除字符串中的重复字符，并使得最终结果字典序最小</a></li><li><a href="#2135-信封俄罗斯套娃">2.135. 信封俄罗斯套娃</a></li><li><a href="#2136-小矩阵是否能完整拼接为大矩阵">2.136. 小矩阵是否能完整拼接为大矩阵</a></li><li><a href="#2137-将数组划分为m份使得每份和的最大值最小">2.137. 将数组划分为m份，使得每份和的最大值最小</a></li><li><a href="#2138-在1到n中寻找字典序第k小的数">2.138. 在1到n中寻找字典序第k小的数</a></li><li><a href="#2139-滑动窗口中间值">2.139. 滑动窗口中间值</a></li><li><a href="#2140-多个有序数组每个数组挑选至少一个数求能够组成的最小的数组范围">2.140. 多个有序数组，每个数组挑选至少一个数，求能够组成的最小的数组范围</a></li><li><a href="#2141-点游戏">2.141. 点游戏</a></li><li><a href="#2142-数组中寻找三个长为k的不重叠子数组使得其和最大">2.142. 数组中寻找三个长为k的不重叠子数组，使得其和最大</a></li><li><a href="#2143-快速替换10亿条标题中的5万个敏感词">2.143. 快速替换10亿条标题中的5万个敏感词</a></li><li><a href="#2144-轮流取数的必胜策略">2.144. 轮流取数的必胜策略</a></li><li><a href="#2145-最大公约数辗转相除法">2.145. 最大公约数（辗转相除法）</a></li><li><a href="#2146-最小公倍数">2.146. 最小公倍数</a></li></ul></li></ul><!-- /TOC --><h2 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1. 数据结构"></a>1. 数据结构</h2><h3 id="1-1-单例模式"><a href="#1-1-单例模式" class="headerlink" title="1.1. 单例模式"></a>1.1. 单例模式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-排序"><a href="#1-2-排序" class="headerlink" title="1.2. 排序"></a>1.2. 排序</h3><h4 id="1-2-1-快速排序partition过程"><a href="#1-2-1-快速排序partition过程" class="headerlink" title="1.2.1. 快速排序partition过程"></a>1.2.1. 快速排序<code>partition</code>过程</h4><h5 id="2-1-1-方法一"><a href="#2-1-1-方法一" class="headerlink" title="2.1.1. 方法一"></a>2.1.1. 方法一</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>    pivot <span class="token operator">=</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high <span class="token operator">and</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">:</span>            high <span class="token operator">-=</span> <span class="token number">1</span>        array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span>        <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high <span class="token operator">and</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">:</span>            low <span class="token operator">+=</span> <span class="token number">1</span>        array<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span>    array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> pivot    <span class="token keyword">return</span> low</code></pre><h5 id="2-1-2-方法二"><a href="#2-1-2-方法二" class="headerlink" title="2.1.2. 方法二"></a>2.1.2. 方法二</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">partition2</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    pivot <span class="token operator">=</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span>    current <span class="token operator">=</span> low    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">:</span>            swap<span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> current<span class="token punctuation">)</span>            current <span class="token operator">+=</span> <span class="token number">1</span>    swap<span class="token punctuation">(</span>array<span class="token punctuation">,</span> high<span class="token punctuation">,</span> current<span class="token punctuation">)</span>    <span class="token keyword">return</span> current</code></pre><h5 id="2-1-3-方法三"><a href="#2-1-3-方法三" class="headerlink" title="2.1.3. 方法三"></a>2.1.3. 方法三</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">partition3</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    start <span class="token operator">=</span> low    pivot <span class="token operator">=</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span>    low <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>        <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> high <span class="token operator">and</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">:</span>            low <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> high <span class="token operator">and</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">:</span>            high <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">if</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>            swap<span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span>    swap<span class="token punctuation">(</span>array<span class="token punctuation">,</span> start<span class="token punctuation">,</span> high<span class="token punctuation">)</span>    <span class="token keyword">return</span> high</code></pre><h4 id="1-2-2-快速排序"><a href="#1-2-2-快速排序" class="headerlink" title="1.2.2. 快速排序"></a>1.2.2. 快速排序</h4><h5 id="2-2-1-递归"><a href="#2-2-1-递归" class="headerlink" title="2.2.1. 递归"></a>2.2.1. 递归</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> low <span class="token operator">>=</span> high<span class="token punctuation">:</span>        <span class="token keyword">return</span>    mid <span class="token operator">=</span> partition<span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span>    quick_sort<span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    quick_sort<span class="token punctuation">(</span>array<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span></code></pre><h4 id="1-2-3-非递归"><a href="#1-2-3-非递归" class="headerlink" title="1.2.3. 非递归"></a>1.2.3. 非递归</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>low<span class="token punctuation">)</span>    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>high<span class="token punctuation">)</span>    <span class="token keyword">while</span> stack<span class="token punctuation">:</span>        high <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        low <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> low <span class="token operator">>=</span> high<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        mid <span class="token operator">=</span> partition<span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span>        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>low<span class="token punctuation">)</span>        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>high<span class="token punctuation">)</span></code></pre><h4 id="1-2-4-插入排序"><a href="#1-2-4-插入排序" class="headerlink" title="1.2.4. 插入排序"></a>1.2.4. 插入排序</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insertion_sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> temp <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            j <span class="token operator">-=</span> <span class="token number">1</span>        array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp</code></pre><h4 id="1-2-5-冒泡排序"><a href="#1-2-5-冒泡排序" class="headerlink" title="1.2.5. 冒泡排序"></a>1.2.5. 冒泡排序</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                swap<span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> flag<span class="token punctuation">:</span>            <span class="token keyword">break</span></code></pre><h4 id="1-2-6-选择排序"><a href="#1-2-6-选择排序" class="headerlink" title="1.2.6. 选择排序"></a>1.2.6. 选择排序</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_index <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_index <span class="token operator">=</span> j        swap<span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> min_index<span class="token punctuation">)</span></code></pre><h4 id="1-2-7-归并排序"><a href="#1-2-7-归并排序" class="headerlink" title="1.2.7. 归并排序"></a>1.2.7. 归并排序</h4><h5 id="2-6-1-递归"><a href="#2-6-1-递归" class="headerlink" title="2.6.1. 递归"></a>2.6.1. 递归</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> temp_array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>    start1 <span class="token operator">=</span> low    end1 <span class="token operator">=</span> mid    start2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    end2 <span class="token operator">=</span> high    k <span class="token operator">=</span> low    <span class="token keyword">while</span> start1 <span class="token operator">&lt;=</span> end1 <span class="token operator">and</span> start2 <span class="token operator">&lt;=</span> end2<span class="token punctuation">:</span>        <span class="token keyword">if</span> array<span class="token punctuation">[</span>start1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>start2<span class="token punctuation">]</span><span class="token punctuation">:</span>            temp_array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>start1<span class="token punctuation">]</span>            start1 <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp_array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>start2<span class="token punctuation">]</span>            start2 <span class="token operator">+=</span> <span class="token number">1</span>        k <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> start1 <span class="token operator">&lt;=</span> end1<span class="token punctuation">:</span>        temp_array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>start1<span class="token punctuation">]</span>        start1 <span class="token operator">+=</span> <span class="token number">1</span>        k <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> start2 <span class="token operator">&lt;=</span> end2<span class="token punctuation">:</span>        temp_array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>start2<span class="token punctuation">]</span>        start2 <span class="token operator">+=</span> <span class="token number">1</span>        k <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>low<span class="token punctuation">,</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp_array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">merge_sort_real</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> temp_array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> low <span class="token operator">>=</span> high<span class="token punctuation">:</span>        <span class="token keyword">return</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    merge_sort_real<span class="token punctuation">(</span>array<span class="token punctuation">,</span> temp_array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>    merge_sort_real<span class="token punctuation">(</span>array<span class="token punctuation">,</span> temp_array<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span>    merge<span class="token punctuation">(</span>array<span class="token punctuation">,</span> temp_array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">:</span>    merge_sort_real<span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><h5 id="2-6-2-非递归"><a href="#2-6-2-非递归" class="headerlink" title="2.6.2. 非递归"></a>2.6.2. 非递归</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>array<span class="token punctuation">)</span>    temp_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> length    block <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> block <span class="token operator">&lt;</span> length <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> start <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> block<span class="token punctuation">)</span><span class="token punctuation">:</span>            low <span class="token operator">=</span> start            mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> block<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> block<span class="token punctuation">)</span> <span class="token operator">&lt;</span> length <span class="token keyword">else</span> length            high <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> block<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> block<span class="token punctuation">)</span> <span class="token operator">&lt;</span> length <span class="token keyword">else</span> length            start1 <span class="token operator">=</span> low            end1 <span class="token operator">=</span> mid            start2 <span class="token operator">=</span> mid            end2 <span class="token operator">=</span> high            k <span class="token operator">=</span> low            <span class="token keyword">while</span> start1 <span class="token operator">&lt;</span> end1 <span class="token operator">and</span> start2 <span class="token operator">&lt;</span> end2<span class="token punctuation">:</span>                <span class="token keyword">if</span> array<span class="token punctuation">[</span>start1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>start2<span class="token punctuation">]</span><span class="token punctuation">:</span>                    temp_array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>start1<span class="token punctuation">]</span>                    start1 <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    temp_array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>start2<span class="token punctuation">]</span>                    start2 <span class="token operator">+=</span> <span class="token number">1</span>                k <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">while</span> start1 <span class="token operator">&lt;</span> end1<span class="token punctuation">:</span>                temp_array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>start1<span class="token punctuation">]</span>                start1 <span class="token operator">+=</span> <span class="token number">1</span>                k <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">while</span> start2 <span class="token operator">&lt;</span> end2<span class="token punctuation">:</span>                temp_array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>start2<span class="token punctuation">]</span>                start2 <span class="token operator">+=</span> <span class="token number">1</span>                k <span class="token operator">+=</span> <span class="token number">1</span>        array<span class="token punctuation">,</span> temp_array <span class="token operator">=</span> temp_array<span class="token punctuation">,</span> array        block <span class="token operator">*=</span> <span class="token number">2</span></code></pre><h4 id="1-2-8-堆排序"><a href="#1-2-8-堆排序" class="headerlink" title="1.2.8. 堆排序"></a>1.2.8. 堆排序</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">shift_down</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>        root <span class="token operator">=</span> start        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> root <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">if</span> child <span class="token operator">></span> end<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> child <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end <span class="token operator">and</span> array<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                child <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> array<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">:</span>                swap<span class="token punctuation">(</span>array<span class="token punctuation">,</span> root<span class="token punctuation">,</span> child<span class="token punctuation">)</span>                root <span class="token operator">=</span> child            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>    <span class="token keyword">def</span> <span class="token function">build_heap</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>array<span class="token punctuation">)</span>        <span class="token keyword">for</span> start <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            shift_down<span class="token punctuation">(</span>start<span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    build_heap<span class="token punctuation">(</span>array<span class="token punctuation">)</span>    <span class="token keyword">for</span> end <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        swap<span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>        shift_down<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="1-3-链表"><a href="#1-3-链表" class="headerlink" title="1.3. 链表"></a>1.3. 链表</h3><h4 id="1-3-1-反转链表（头插法）"><a href="#1-3-1-反转链表（头插法）" class="headerlink" title="1.3.1. 反转链表（头插法）"></a>1.3.1. 反转链表（头插法）</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reverse_list</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> head<span class="token punctuation">:</span>        <span class="token keyword">return</span> head    new_head <span class="token operator">=</span> head    <span class="token keyword">while</span> head<span class="token punctuation">.</span>next<span class="token punctuation">:</span>        current <span class="token operator">=</span> head<span class="token punctuation">.</span>next        head<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        current<span class="token punctuation">.</span>next <span class="token operator">=</span> new_head        new_head <span class="token operator">=</span> current    <span class="token keyword">return</span> new_head</code></pre><h4 id="1-3-2-单链表去重"><a href="#1-3-2-单链表去重" class="headerlink" title="1.3.2. 单链表去重"></a>1.3.2. 单链表去重</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>next <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> p<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="1-3-3-合并两个链表"><a href="#1-3-3-合并两个链表" class="headerlink" title="1.3.3. 合并两个链表"></a>1.3.3. 合并两个链表</h4><h5 id="3-3-1-不创建临时结点"><a href="#3-3-1-不创建临时结点" class="headerlink" title="3.3.1. 不创建临时结点"></a>3.3.1. 不创建临时结点</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">></span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode temp <span class="token operator">=</span> l1<span class="token punctuation">;</span>        l1 <span class="token operator">=</span> l2<span class="token punctuation">;</span>        l2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ListNode p <span class="token operator">=</span> l1<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l2 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>next <span class="token operator">==</span> null <span class="token operator">||</span> l2<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode temp <span class="token operator">=</span> l2<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l1<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="3-3-2-创建临时结点"><a href="#3-3-2-创建临时结点" class="headerlink" title="3.3.2. 创建临时结点"></a>3.3.2. 创建临时结点</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode fakeHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode tail <span class="token operator">=</span> fakeHead<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tail<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            tail<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    tail<span class="token punctuation">.</span>next <span class="token operator">=</span> l1 <span class="token operator">==</span> null <span class="token operator">?</span> l2 <span class="token operator">:</span> l1<span class="token punctuation">;</span>    <span class="token keyword">return</span> fakeHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="1-3-4-链表排序"><a href="#1-3-4-链表排序" class="headerlink" title="1.3.4. 链表排序"></a>1.3.4. 链表排序</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type head: ListNode    :rtype: ListNode    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> head <span class="token operator">or</span> <span class="token operator">not</span> head<span class="token punctuation">.</span>next<span class="token punctuation">:</span>        <span class="token keyword">return</span> head    slow <span class="token operator">=</span> head    fast <span class="token operator">=</span> head    prev <span class="token operator">=</span> None    <span class="token keyword">while</span> fast <span class="token operator">and</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">:</span>        prev <span class="token operator">=</span> slow        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> None    a <span class="token operator">=</span> sortList<span class="token punctuation">(</span>head<span class="token punctuation">)</span>    b <span class="token operator">=</span> sortList<span class="token punctuation">(</span>slow<span class="token punctuation">)</span>    fake_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> fake_head    <span class="token keyword">while</span> a <span class="token operator">and</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> a<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> a            a <span class="token operator">=</span> a<span class="token punctuation">.</span>next        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> b            b <span class="token operator">=</span> b<span class="token punctuation">.</span>next        temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next    <span class="token keyword">if</span> a<span class="token punctuation">:</span>        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> a    <span class="token keyword">else</span><span class="token punctuation">:</span>        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> b    <span class="token keyword">return</span> fake_head<span class="token punctuation">.</span>next</code></pre><h4 id="1-3-5-检查回文链表"><a href="#1-3-5-检查回文链表" class="headerlink" title="1.3.5. 检查回文链表"></a>1.3.5. 检查回文链表</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type head: ListNode    :rtype: bool    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> head <span class="token operator">or</span> <span class="token operator">not</span> head<span class="token punctuation">.</span>next<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    slow <span class="token operator">=</span> head    fast <span class="token operator">=</span> head    <span class="token keyword">while</span> fast <span class="token operator">and</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">:</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next    temp <span class="token operator">=</span> None    <span class="token keyword">while</span> slow<span class="token punctuation">:</span>        next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next        slow<span class="token punctuation">.</span>next <span class="token operator">=</span> temp        temp <span class="token operator">=</span> slow        slow <span class="token operator">=</span> next    slow <span class="token operator">=</span> temp    <span class="token keyword">while</span> head <span class="token operator">and</span> slow<span class="token punctuation">:</span>        <span class="token keyword">if</span> head<span class="token punctuation">.</span>val <span class="token operator">!=</span> slow<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next    <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><h4 id="1-3-6-链表等概率随机抽取元素"><a href="#1-3-6-链表等概率随机抽取元素" class="headerlink" title="1.3.6. 链表等概率随机抽取元素"></a>1.3.6. 链表等概率随机抽取元素</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRandom</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode node <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="1-3-7-链表按奇数序号和偶数序号重排"><a href="#1-3-7-链表按奇数序号和偶数序号重排" class="headerlink" title="1.3.7. 链表按奇数序号和偶数序号重排"></a>1.3.7. 链表按奇数序号和偶数序号重排</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">oddEvenList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type head: ListNode    :rtype: ListNode    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> head<span class="token punctuation">:</span>        <span class="token keyword">return</span> None    odd <span class="token operator">=</span> head    even <span class="token operator">=</span> head<span class="token punctuation">.</span>next    even_head <span class="token operator">=</span> even    <span class="token keyword">while</span> even <span class="token operator">and</span> even<span class="token punctuation">.</span>next<span class="token punctuation">:</span>        odd<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        even<span class="token punctuation">.</span>next <span class="token operator">=</span> even<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        odd <span class="token operator">=</span> odd<span class="token punctuation">.</span>next        even <span class="token operator">=</span> even<span class="token punctuation">.</span>next    odd<span class="token punctuation">.</span>next <span class="token operator">=</span> even_head    <span class="token keyword">return</span> head</code></pre><h3 id="1-4-二叉树遍历"><a href="#1-4-二叉树遍历" class="headerlink" title="1.4. 二叉树遍历"></a>1.4. 二叉树遍历</h3><h4 id="1-4-1-二叉树前序遍历"><a href="#1-4-1-二叉树前序遍历" class="headerlink" title="1.4.1. 二叉树前序遍历"></a>1.4.1. 二叉树前序遍历</h4><h5 id="4-1-1-递归"><a href="#4-1-1-递归" class="headerlink" title="4.1.1. 递归"></a>4.1.1. 递归</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pre_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> root<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        pre_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        pre_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span></code></pre><h5 id="4-1-2-非递归"><a href="#4-1-2-非递归" class="headerlink" title="4.1.2. 非递归"></a>4.1.2. 非递归</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pre_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> root <span class="token operator">or</span> stack<span class="token punctuation">:</span>        <span class="token keyword">if</span> root<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>left        <span class="token keyword">else</span><span class="token punctuation">:</span>            node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            root <span class="token operator">=</span> node<span class="token punctuation">.</span>right</code></pre><h4 id="1-4-2-二叉树中序遍历"><a href="#1-4-2-二叉树中序遍历" class="headerlink" title="1.4.2. 二叉树中序遍历"></a>1.4.2. 二叉树中序遍历</h4><h5 id="4-2-1-递归"><a href="#4-2-1-递归" class="headerlink" title="4.2.1. 递归"></a>4.2.1. 递归</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">in_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> root<span class="token punctuation">:</span>        in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span></code></pre><h5 id="4-2-2-非递归"><a href="#4-2-2-非递归" class="headerlink" title="4.2.2. 非递归"></a>4.2.2. 非递归</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">in_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> root <span class="token operator">or</span> stack<span class="token punctuation">:</span>        <span class="token keyword">if</span> root<span class="token punctuation">:</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>left        <span class="token keyword">else</span><span class="token punctuation">:</span>            node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            root <span class="token operator">=</span> node<span class="token punctuation">.</span>right</code></pre><h4 id="1-4-3-二叉树后序遍历"><a href="#1-4-3-二叉树后序遍历" class="headerlink" title="1.4.3. 二叉树后序遍历"></a>1.4.3. 二叉树后序遍历</h4><h5 id="4-3-1-递归"><a href="#4-3-1-递归" class="headerlink" title="4.3.1. 递归"></a>4.3.1. 递归</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">post_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> root<span class="token punctuation">:</span>        post_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        post_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span></code></pre><h5 id="4-3-2-非递归"><a href="#4-3-2-非递归" class="headerlink" title="4.3.2. 非递归"></a>4.3.2. 非递归</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">post_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    node <span class="token operator">=</span> root    <span class="token keyword">while</span> node <span class="token operator">or</span> stack<span class="token punctuation">:</span>        <span class="token keyword">if</span> node<span class="token punctuation">:</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>right        <span class="token keyword">else</span><span class="token punctuation">:</span>            node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>left    result<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h4 id="1-4-4-二叉树层次遍历"><a href="#1-4-4-二叉树层次遍历" class="headerlink" title="1.4.4. 二叉树层次遍历"></a>1.4.4. 二叉树层次遍历</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>        <span class="token keyword">return</span>    queue <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">while</span> queue<span class="token punctuation">:</span>        size <span class="token operator">=</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>            node <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span></code></pre><h3 id="1-5-图"><a href="#1-5-图" class="headerlink" title="1.5. 图"></a>1.5. 图</h3><h4 id="1-5-1-Dijkstra算法"><a href="#1-5-1-Dijkstra算法" class="headerlink" title="1.5.1. Dijkstra算法"></a>1.5.1. Dijkstra算法</h4><h5 id="5-1-1-朴素"><a href="#5-1-1-朴素" class="headerlink" title="5.1.1. 朴素"></a>5.1.1. 朴素</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param start: int, [1,n]    :param end: int, [1,n]    :param graph: dict, {from: (to, distance), from: (to, distance)...}    :param n: int    :return: (int, list), minimum distance, path    """</span>    d <span class="token operator">=</span> <span class="token punctuation">[</span>sys<span class="token punctuation">.</span>maxsize<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    previous <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    d<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    candidates <span class="token operator">=</span> set<span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> candidates<span class="token punctuation">:</span>        min_d <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize        u <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> candidate <span class="token keyword">in</span> candidates<span class="token punctuation">:</span>            <span class="token keyword">if</span> min_d <span class="token operator">></span> d<span class="token punctuation">[</span>candidate<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_d <span class="token operator">=</span> d<span class="token punctuation">[</span>candidate<span class="token punctuation">]</span>                u <span class="token operator">=</span> candidate        <span class="token keyword">if</span> u <span class="token operator">==</span> end<span class="token punctuation">:</span>            <span class="token keyword">return</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> previous        candidates<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>u<span class="token punctuation">)</span>        <span class="token keyword">for</span> v<span class="token punctuation">,</span> dist <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">:</span>                d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> dist                previous<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u</code></pre><h5 id="5-1-2-堆优化"><a href="#5-1-2-堆优化" class="headerlink" title="5.1.2. 堆优化"></a>5.1.2. 堆优化</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param start: int, [1,n]    :param end: int, [1,n]    :param graph: dict, {from: (to, distance), from: (to, distance)...}    :param n: int    :return: (int, list), minimum distance, path    """</span>    d <span class="token operator">=</span> <span class="token punctuation">[</span>sys<span class="token punctuation">.</span>maxsize<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    previous <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    d<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    candidates <span class="token operator">=</span> set<span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> candidates<span class="token punctuation">:</span>        distance<span class="token punctuation">,</span> u <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> u <span class="token operator">==</span> end<span class="token punctuation">:</span>            <span class="token keyword">return</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> previous        <span class="token keyword">if</span> u <span class="token operator">not</span> <span class="token keyword">in</span> candidates<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        candidates<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>u<span class="token punctuation">)</span>        <span class="token keyword">for</span> v<span class="token punctuation">,</span> dist <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">:</span>                d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> dist                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>                previous<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u</code></pre><h4 id="1-5-2-Floyd-Warshall算法"><a href="#1-5-2-Floyd-Warshall算法" class="headerlink" title="1.5.2. Floyd-Warshall算法"></a>1.5.2. Floyd-Warshall算法</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">floyd_warshall</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    INF <span class="token operator">=</span> <span class="token number">10000</span>    dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>INF<span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> j<span class="token punctuation">:</span>                dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">elif</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> INF<span class="token punctuation">:</span>                dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k    <span class="token keyword">return</span> dist<span class="token punctuation">,</span> path</code></pre><h4 id="1-5-3-拓扑排序"><a href="#1-5-3-拓扑排序" class="headerlink" title="1.5.3. 拓扑排序"></a>1.5.3. 拓扑排序</h4><h5 id="5-3-1-DFS"><a href="#5-3-1-DFS" class="headerlink" title="5.3.1. DFS"></a>5.3.1. DFS</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">topological_sort</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    order <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    visiting <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n    visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> i<span class="token punctuation">,</span> visiting<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'cycle'</span><span class="token punctuation">)</span>    order<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> order<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> index<span class="token punctuation">,</span> visiting<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">:</span>    visiting<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    visited<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> graph<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> visiting<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> <span class="token operator">not</span> visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> neighbor<span class="token punctuation">,</span> visiting<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>    order<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index<span class="token punctuation">)</span>    visiting<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><h5 id="5-3-2-BFS"><a href="#5-3-2-BFS" class="headerlink" title="5.3.2. BFS"></a>5.3.2. BFS</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">topological_sort</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    in_degrees <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            in_degrees<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    candidates <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> in_degrees<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            candidates<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    order <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> candidates<span class="token punctuation">:</span>        index <span class="token operator">=</span> candidates<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        order<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index<span class="token punctuation">)</span>        <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> graph<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">:</span>            in_degrees<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> in_degrees<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                candidates<span class="token punctuation">.</span>add<span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>order<span class="token punctuation">)</span> <span class="token operator">!=</span> n<span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'cycle'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> order</code></pre><h3 id="1-6-查找"><a href="#1-6-查找" class="headerlink" title="1.6. 查找"></a>1.6. 查找</h3><h4 id="1-6-1-二分搜索"><a href="#1-6-1-二分搜索" class="headerlink" title="1.6.1. 二分搜索"></a>1.6.1. 二分搜索</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    low <span class="token operator">=</span> <span class="token number">0</span>    high <span class="token operator">=</span> len<span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">:</span>            <span class="token keyword">return</span> mid        <span class="token keyword">elif</span> array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">:</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></code></pre><h4 id="1-6-2-并查集"><a href="#1-6-2-并查集" class="headerlink" title="1.6.2. 并查集"></a>1.6.2. 并查集</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UnionFind</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> n        self<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>rank <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">!=</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>num<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        parent_a <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>a<span class="token punctuation">)</span>        parent_b <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token keyword">if</span> parent_a <span class="token operator">==</span> parent_b<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>parent_a<span class="token punctuation">]</span> <span class="token operator">></span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>parent_b<span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>parent_b<span class="token punctuation">]</span> <span class="token operator">=</span> parent_a        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>parent_a<span class="token punctuation">]</span> <span class="token operator">=</span> parent_b            <span class="token keyword">if</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>parent_a<span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>parent_b<span class="token punctuation">]</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>parent_b<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>count <span class="token operator">-=</span> <span class="token number">1</span></code></pre><h4 id="1-6-3-Trie树"><a href="#1-6-3-Trie树" class="headerlink" title="1.6.3. Trie树"></a>1.6.3. Trie树</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">{</span>    TrieNode root<span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isWord <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> val<span class="token punctuation">;</span>        TrieNode<span class="token punctuation">[</span><span class="token punctuation">]</span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TrieNode current <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> letter <span class="token operator">:</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>letter <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>letter <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>letter <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> letter<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>letter <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        current<span class="token punctuation">.</span>isWord <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TrieNode current <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> letter <span class="token operator">:</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>letter <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>letter <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> current<span class="token punctuation">.</span>isWord<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TrieNode current <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> letter <span class="token operator">:</span> prefix<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>letter <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>letter <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-7-回溯"><a href="#1-7-回溯" class="headerlink" title="1.7. 回溯"></a>1.7. 回溯</h3><h4 id="1-7-1-N皇后问题"><a href="#1-7-1-N皇后问题" class="headerlink" title="1.7.1. N皇后问题"></a>1.7.1. N皇后问题</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">n_queens</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: List[List[str]]    """</span>    board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    back_trace<span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">back_trace</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row_index<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> row_index <span class="token operator">==</span> len<span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>convert<span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>board<span class="token punctuation">[</span>row_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> is_valid<span class="token punctuation">(</span>board<span class="token punctuation">,</span> row_index<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>            board<span class="token punctuation">[</span>row_index<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Q'</span>            back_trace<span class="token punctuation">(</span>board<span class="token punctuation">,</span> row_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>            board<span class="token punctuation">[</span>row_index<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> board<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">is_valid</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span> <span class="token operator">and</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> j <span class="token operator">or</span> i <span class="token operator">-</span> x <span class="token operator">==</span> j <span class="token operator">-</span> y <span class="token operator">or</span> i <span class="token operator">-</span> x <span class="token operator">==</span> y <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><h3 id="1-8-栈与队列"><a href="#1-8-栈与队列" class="headerlink" title="1.8. 栈与队列"></a>1.8. 栈与队列</h3><h4 id="1-8-1-栈模拟队列"><a href="#1-8-1-栈模拟队列" class="headerlink" title="1.8.1. 栈模拟队列"></a>1.8.1. 栈模拟队列</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stackA<span class="token punctuation">;</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stackB<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stackA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stackB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stackA<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stackB<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stackA<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stackB<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stackA<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stackB<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stackB<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stackA<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stackB<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stackA<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stackB<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stackA<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stackB<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-8-2-队列模拟栈"><a href="#1-8-2-队列模拟栈" class="headerlink" title="1.8.2. 队列模拟栈"></a>1.8.2. 队列模拟栈</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">{</span>    Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-9-同步问题"><a href="#1-9-同步问题" class="headerlink" title="1.9. 同步问题"></a>1.9. 同步问题</h3><h4 id="1-9-1-生产者——消费者模型"><a href="#1-9-1-生产者——消费者模型" class="headerlink" title="1.9.1. 生产者——消费者模型"></a>1.9.1. 生产者——消费者模型</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        Thread producer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> maxSize<span class="token punctuation">,</span> <span class="token string">"Producer 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread producer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> maxSize<span class="token punctuation">,</span> <span class="token string">"Producer 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread consumer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token string">"Consumer 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread consumer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token string">"Consumer 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue<span class="token punctuation">;</span>        <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>        Random random<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue<span class="token punctuation">,</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>            random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Queue is full, "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> item <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" produced "</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">", queue size is "</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" now"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue<span class="token punctuation">;</span>        Random random<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>            random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Queue is empty, "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> item <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" consumed "</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">", queue size is "</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" now"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-10-缓存策略"><a href="#1-10-缓存策略" class="headerlink" title="1.10. 缓存策略"></a>1.10. 缓存策略</h3><h4 id="1-10-1-LRU"><a href="#1-10-1-LRU" class="headerlink" title="1.10.1. LRU"></a>1.10.1. LRU</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LRUCache</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>key <span class="token operator">=</span> key            self<span class="token punctuation">.</span>val <span class="token operator">=</span> value            self<span class="token punctuation">.</span>prev <span class="token operator">=</span> None            self<span class="token punctuation">.</span>next <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type capacity: int        """</span>        self<span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity        self<span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> self<span class="token punctuation">.</span>Node<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tail <span class="token operator">=</span> self<span class="token punctuation">.</span>Node<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>tail        self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>head    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type key: int        :rtype: int        """</span>        <span class="token keyword">if</span> key <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>memory<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        node <span class="token operator">=</span> self<span class="token punctuation">.</span>memory<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>to_head<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>val    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type key: int        :type value: int        :rtype: void        """</span>        <span class="token keyword">if</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>memory<span class="token punctuation">:</span>            node <span class="token operator">=</span> self<span class="token punctuation">.</span>memory<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            node<span class="token punctuation">.</span>val <span class="token operator">=</span> value            self<span class="token punctuation">.</span>to_head<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>memory<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>capacity<span class="token punctuation">:</span>                <span class="token keyword">del</span> self<span class="token punctuation">.</span>memory<span class="token punctuation">[</span>self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>key<span class="token punctuation">]</span>                self<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>            node <span class="token operator">=</span> self<span class="token punctuation">.</span>Node<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>memory<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> node            self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">to_head</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next        node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>next        self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> node        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>head        node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node</code></pre><h4 id="1-10-2-LFU"><a href="#1-10-2-LFU" class="headerlink" title="1.10.2. LFU"></a>1.10.2. LFU</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LFUCache</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>key <span class="token operator">=</span> key            self<span class="token punctuation">.</span>value <span class="token operator">=</span> value            self<span class="token punctuation">.</span>times <span class="token operator">=</span> times            self<span class="token punctuation">.</span>prev <span class="token operator">=</span> None            self<span class="token punctuation">.</span>next <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type capacity: int        """</span>        self<span class="token punctuation">.</span>init_capacity <span class="token operator">=</span> capacity        self<span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity        self<span class="token punctuation">.</span>memory_nodes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>memory_times <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> self<span class="token punctuation">.</span>Node<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tail <span class="token operator">=</span> self<span class="token punctuation">.</span>Node<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>tail        self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>head    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type key: int        :rtype: int        """</span>        <span class="token keyword">if</span> key <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>memory_nodes<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        self<span class="token punctuation">.</span>put<span class="token punctuation">(</span>key<span class="token punctuation">,</span> self<span class="token punctuation">.</span>memory_nodes<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>memory_nodes<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>value    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type key: int        :type value: int        :rtype: void        """</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>init_capacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>memory_nodes<span class="token punctuation">:</span>            node <span class="token operator">=</span> self<span class="token punctuation">.</span>memory_nodes<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            node<span class="token punctuation">.</span>value <span class="token operator">=</span> value            <span class="token keyword">if</span> node<span class="token punctuation">.</span>times <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">:</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node<span class="token punctuation">.</span>times<span class="token punctuation">]</span> <span class="token operator">==</span> node<span class="token punctuation">:</span>                    <span class="token keyword">if</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>times <span class="token operator">==</span> node<span class="token punctuation">.</span>times<span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node<span class="token punctuation">.</span>times<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>next                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">del</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node<span class="token punctuation">.</span>times<span class="token punctuation">]</span>                node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next                node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node<span class="token punctuation">.</span>times <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>prev                node<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node<span class="token punctuation">.</span>times <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>                node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node                node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node                self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node<span class="token punctuation">.</span>times <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> node            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node<span class="token punctuation">.</span>times<span class="token punctuation">]</span> <span class="token operator">!=</span> node<span class="token punctuation">:</span>                    node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next                    node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev                    node<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node<span class="token punctuation">.</span>times<span class="token punctuation">]</span><span class="token punctuation">.</span>prev                    node<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node<span class="token punctuation">.</span>times<span class="token punctuation">]</span>                    node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node                    node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>times <span class="token operator">==</span> node<span class="token punctuation">.</span>times<span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node<span class="token punctuation">.</span>times<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>next                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">del</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node<span class="token punctuation">.</span>times<span class="token punctuation">]</span>                self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node<span class="token punctuation">.</span>times <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> node            node<span class="token punctuation">.</span>times <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            node <span class="token operator">=</span> self<span class="token punctuation">.</span>Node<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>memory_nodes<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> node            <span class="token keyword">if</span> self<span class="token punctuation">.</span>capacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                node_to_remove <span class="token operator">=</span> self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev                <span class="token keyword">if</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node_to_remove<span class="token punctuation">.</span>times<span class="token punctuation">]</span> <span class="token operator">==</span> node_to_remove<span class="token punctuation">:</span>                    <span class="token keyword">del</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span>node_to_remove<span class="token punctuation">.</span>times<span class="token punctuation">]</span>                node_to_remove<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node_to_remove<span class="token punctuation">.</span>next                node_to_remove<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node_to_remove<span class="token punctuation">.</span>prev                <span class="token keyword">del</span> self<span class="token punctuation">.</span>memory_nodes<span class="token punctuation">[</span>node_to_remove<span class="token punctuation">.</span>key<span class="token punctuation">]</span>                self<span class="token punctuation">.</span>capacity <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> <span class="token number">1</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">:</span>                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>prev                node<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev                node<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>tail            node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node            node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node            self<span class="token punctuation">.</span>memory_times<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> node            self<span class="token punctuation">.</span>capacity <span class="token operator">-=</span> <span class="token number">1</span></code></pre><h3 id="1-11-斐波拉契数列"><a href="#1-11-斐波拉契数列" class="headerlink" title="1.11. 斐波拉契数列"></a>1.11. 斐波拉契数列</h3><h4 id="1-11-1-自顶向下"><a href="#1-11-1-自顶向下" class="headerlink" title="1.11.1. 自顶向下"></a>1.11.1. 自顶向下</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> fibonacci<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fibonacci<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><h4 id="1-11-2-自底向上"><a href="#1-11-2-自底向上" class="headerlink" title="1.11.2. 自底向上"></a>1.11.2. 自底向上</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">1</span>    b <span class="token operator">=</span> <span class="token number">1</span>    n <span class="token operator">-=</span> <span class="token number">2</span>    <span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> a <span class="token operator">+</span> b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> temp        n <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">return</span> b</code></pre><h3 id="1-12-动态规划"><a href="#1-12-动态规划" class="headerlink" title="1.12. 动态规划"></a>1.12. 动态规划</h3><h4 id="1-12-1-背包问题"><a href="#1-12-1-背包问题" class="headerlink" title="1.12.1. 背包问题"></a>1.12.1. 背包问题</h4><h5 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h5><h6 id="求最大价值"><a href="#求最大价值" class="headerlink" title="求最大价值"></a>求最大价值</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">knapsack</span><span class="token punctuation">(</span>max_weight<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>weights<span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_weight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> max_weight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token keyword">if</span> weights<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> weights<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>max_weight<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">knapsack</span><span class="token punctuation">(</span>max_weight<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>weights<span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_weight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>max_weight<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> weights<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> weights<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>max_weight<span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>    values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span>    max_weight <span class="token operator">=</span> <span class="token number">50</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>knapsack<span class="token punctuation">(</span>max_weight<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h6 id="输出价值最大时的方案"><a href="#输出价值最大时的方案" class="headerlink" title="输出价值最大时的方案"></a>输出价值最大时的方案</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">knapsack</span><span class="token punctuation">(</span>max_weight<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>weights<span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_weight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> max_weight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token keyword">if</span> weights<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> weights<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    j <span class="token operator">=</span> max_weight    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            j <span class="token operator">-=</span> weights<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    result<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>    values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>    max_weight <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>knapsack<span class="token punctuation">(</span>max_weight<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="2-经典题目"><a href="#2-经典题目" class="headerlink" title="2. 经典题目"></a>2. 经典题目</h2><h3 id="2-1-计算数字二进制表示的1的个数"><a href="#2-1-计算数字二进制表示的1的个数" class="headerlink" title="2.1. 计算数字二进制表示的1的个数"></a>2.1. 计算数字二进制表示的1的个数</h3><p><a href="https://leetcode.com/problems/hamming-distance/#/description" target="_blank" rel="noopener">Leetcode 461. Hamming Distance</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count_1s</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> num<span class="token punctuation">:</span>        num <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> count</code></pre><h3 id="2-2-数组中除一个数仅出现一次外，其他数均出现两次，找出这个数"><a href="#2-2-数组中除一个数仅出现一次外，其他数均出现两次，找出这个数" class="headerlink" title="2.2. 数组中除一个数仅出现一次外，其他数均出现两次，找出这个数"></a>2.2. 数组中除一个数仅出现一次外，其他数均出现两次，找出这个数</h3><p><a href="https://leetcode.com/problems/single-number/#/description" target="_blank" rel="noopener">Leetcode 136. Single Number</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">single_number</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        result <span class="token operator">^</span><span class="token operator">=</span> num    <span class="token keyword">return</span> result</code></pre><h3 id="2-3-长为n的数组中所有元素在-1-n-之间，元素最多出现两次，找出-1-n-中没出现的元素"><a href="#2-3-长为n的数组中所有元素在-1-n-之间，元素最多出现两次，找出-1-n-中没出现的元素" class="headerlink" title="2.3. 长为n的数组中所有元素在[1, n]之间，元素最多出现两次，找出[1, n]中没出现的元素"></a>2.3. 长为n的数组中所有元素在[1, n]之间，元素最多出现两次，找出[1, n]中没出现的元素</h3><p><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/#/description" target="_blank" rel="noopener">Leetcode 448. Find All Numbers Disappeared in an Array</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_disappeared_numbers</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: List[int]    """</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        index <span class="token operator">=</span> num <span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>num        index <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-4-不用-和-计算两个数的和"><a href="#2-4-不用-和-计算两个数的和" class="headerlink" title="2.4. 不用+和-计算两个数的和"></a>2.4. 不用<code>+</code>和<code>-</code>计算两个数的和</h3><p><a href="https://leetcode.com/problems/sum-of-two-integers/#/description" target="_blank" rel="noopener">Leetcode 371. Sum of Two Integers</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> part <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>part <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> theA <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token keyword">int</span> theB <span class="token operator">=</span> part <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> theA <span class="token operator">^</span> theB<span class="token punctuation">;</span>        part <span class="token operator">=</span> theA <span class="token operator">&amp;</span> theB<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-反转二叉树"><a href="#2-5-反转二叉树" class="headerlink" title="2.5. 反转二叉树"></a>2.5. 反转二叉树</h3><p><a href="https://leetcode.com/problems/invert-binary-tree/#/description" target="_blank" rel="noopener">Leetcode 226. Invert Binary Tree</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type root: TreeNode    :rtype: TreeNode    """</span>    <span class="token keyword">if</span> root <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span>    self<span class="token punctuation">.</span>invertTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>invertTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    temp <span class="token operator">=</span> root<span class="token punctuation">.</span>left    root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right    root<span class="token punctuation">.</span>right <span class="token operator">=</span> temp    <span class="token keyword">return</span> root</code></pre><h3 id="2-6-把数组中所有0移动到尾部，数组元素保持相对顺序不变"><a href="#2-6-把数组中所有0移动到尾部，数组元素保持相对顺序不变" class="headerlink" title="2.6. 把数组中所有0移动到尾部，数组元素保持相对顺序不变"></a>2.6. 把数组中所有0移动到尾部，数组元素保持相对顺序不变</h3><p><a href="https://leetcode.com/problems/move-zeroes/#/description" target="_blank" rel="noopener">Leetcode 283. Move Zeroes</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> nums<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>        currentIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentIndex <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nums<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        currentIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-7-定义一次move是将长为n的数组中n-1个数均加1，最少多少个move可以使得数组中所有元素相等"><a href="#2-7-定义一次move是将长为n的数组中n-1个数均加1，最少多少个move可以使得数组中所有元素相等" class="headerlink" title="2.7. 定义一次move是将长为n的数组中n-1个数均加1，最少多少个move可以使得数组中所有元素相等"></a>2.7. 定义一次move是将长为n的数组中n-1个数均加1，最少多少个move可以使得数组中所有元素相等</h3><p><a href="https://leetcode.com/problems/minimum-moves-to-equal-array-elements/#/description" target="_blank" rel="noopener">Leetcode 453. Minimum Moves to Equal Array Elements</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">minMoves</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: int    """</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> min<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span></code></pre><h3 id="2-8-找出长为n的数组中出现次数大于⌊-n-2-⌋的元素"><a href="#2-8-找出长为n的数组中出现次数大于⌊-n-2-⌋的元素" class="headerlink" title="2.8. 找出长为n的数组中出现次数大于⌊ n/2 ⌋的元素"></a>2.8. 找出长为n的数组中出现次数大于⌊ n/2 ⌋的元素</h3><p><a href="https://leetcode.com/problems/majority-element/#/description" target="_blank" rel="noopener">Leetcode 169. Majority Element</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: int    """</span>    majority <span class="token operator">=</span> None    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            majority <span class="token operator">=</span> num        <span class="token keyword">if</span> majority <span class="token operator">==</span> num<span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            count <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">return</span> majority</code></pre><h3 id="2-9-找出长为n的数组中出现次数大于⌊-n-k-⌋的元素"><a href="#2-9-找出长为n的数组中出现次数大于⌊-n-k-⌋的元素" class="headerlink" title="2.9. 找出长为n的数组中出现次数大于⌊ n/k ⌋的元素"></a>2.9. 找出长为n的数组中出现次数大于⌊ n/k ⌋的元素</h3><p><a href="https://leetcode.com/problems/majority-element-ii/description/" target="_blank" rel="noopener">Leetcode 229. Majority Element II</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">majority_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    counters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token keyword">in</span> counters<span class="token punctuation">:</span>            counters<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> len<span class="token punctuation">(</span>counters<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>            counters<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> key<span class="token punctuation">,</span> count <span class="token keyword">in</span> counters<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">del</span> counters<span class="token punctuation">[</span>key<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    counters<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> counters<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        counters<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token keyword">in</span> counters<span class="token punctuation">:</span>            counters<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    target <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">//</span> k    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> num<span class="token punctuation">,</span> count <span class="token keyword">in</span> counters<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> count <span class="token operator">></span> target<span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-10-十进制转换为7进制"><a href="#2-10-十进制转换为7进制" class="headerlink" title="2.10. 十进制转换为7进制"></a>2.10. 十进制转换为7进制</h3><p><a href="https://leetcode.com/problems/base-7/#/description" target="_blank" rel="noopener">Leetcode 504. Base 7</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">convertToBase7</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> sign <span class="token operator">=</span> num <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num <span class="token operator">/=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-11-指定长度二进制数，指定1的个数的所有可能情况"><a href="#2-11-指定长度二进制数，指定1的个数的所有可能情况" class="headerlink" title="2.11. 指定长度二进制数，指定1的个数的所有可能情况"></a>2.11. 指定长度二进制数，指定1的个数的所有可能情况</h3><p><a href="https://leetcode.com/problems/binary-watch/#/description" target="_blank" rel="noopener">Leetcode 401. Binary Watch</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_combination</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> num_ones<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combination</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> num_ones<span class="token punctuation">,</span> base<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num_ones <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> length <span class="token operator">&lt;</span> num_ones<span class="token punctuation">:</span>            <span class="token keyword">return</span>        combination<span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num_ones <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> base <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>        combination<span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num_ones<span class="token punctuation">,</span> base<span class="token punctuation">,</span> result<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    combination<span class="token punctuation">(</span>length<span class="token punctuation">,</span> num_ones<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-12-有序数组转二叉搜索树"><a href="#2-12-有序数组转二叉搜索树" class="headerlink" title="2.12. 有序数组转二叉搜索树"></a>2.12. 有序数组转二叉搜索树</h3><p><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/#/description" target="_blank" rel="noopener">Leetcode 108. Convert Sorted Array to Binary Search Tree</a></p><pre class=" language-java"><code class="language-java">TreeNode <span class="token function">toBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    TreeNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">toBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">toBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> TreeNode <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">toBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-13-最大连续子序列和"><a href="#2-13-最大连续子序列和" class="headerlink" title="2.13. 最大连续子序列和"></a>2.13. 最大连续子序列和</h3><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/#/description" target="_blank" rel="noopener">Leetcode 121. Best Time to Buy and Sell Stock</a></p><h4 id="2-13-1-最小值为0"><a href="#2-13-1-最小值为0" class="headerlink" title="2.13.1. 最小值为0"></a>2.13.1. 最小值为0</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">max_subarray</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    max_ending_here <span class="token operator">=</span> <span class="token number">0</span>    max_so_far <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        max_ending_here <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> max_ending_here <span class="token operator">+</span> x<span class="token punctuation">)</span>        max_so_far <span class="token operator">=</span> max<span class="token punctuation">(</span>max_so_far<span class="token punctuation">,</span> max_ending_here<span class="token punctuation">)</span>    <span class="token keyword">return</span> max_so_far</code></pre><h4 id="2-13-2-最小值为负数"><a href="#2-13-2-最小值为负数" class="headerlink" title="2.13.2. 最小值为负数"></a>2.13.2. 最小值为负数</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">max_subarray</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    max_ending_here <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    max_so_far <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        max_ending_here <span class="token operator">=</span> max<span class="token punctuation">(</span>x<span class="token punctuation">,</span> max_ending_here <span class="token operator">+</span> x<span class="token punctuation">)</span>        max_so_far <span class="token operator">=</span> max<span class="token punctuation">(</span>max_so_far<span class="token punctuation">,</span> max_ending_here<span class="token punctuation">)</span>    <span class="token keyword">return</span> max_so_far</code></pre><h3 id="2-14-最大连续子序列积"><a href="#2-14-最大连续子序列积" class="headerlink" title="2.14. 最大连续子序列积"></a>2.14. 最大连续子序列积</h3><p><a href="https://leetcode.com/problems/maximum-product-subarray/description/" target="_blank" rel="noopener">Leetcode 152. Maximum Product Subarray</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: int    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    max_here <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    min_here <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    max_so_far <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        max_here <span class="token operator">*=</span> num        min_here <span class="token operator">*=</span> num        max_here<span class="token punctuation">,</span> min_here <span class="token operator">=</span> max<span class="token punctuation">(</span>max_here<span class="token punctuation">,</span> min_here<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">,</span> min<span class="token punctuation">(</span>max_here<span class="token punctuation">,</span> min_here<span class="token punctuation">,</span> num<span class="token punctuation">)</span>        max_so_far <span class="token operator">=</span> max<span class="token punctuation">(</span>max_here<span class="token punctuation">,</span> max_so_far<span class="token punctuation">)</span>    <span class="token keyword">return</span> max_so_far</code></pre><h3 id="2-15-判断一个数是否为2的幂次"><a href="#2-15-判断一个数是否为2的幂次" class="headerlink" title="2.15. 判断一个数是否为2的幂次"></a>2.15. 判断一个数是否为2的幂次</h3><p><a href="https://leetcode.com/problems/power-of-two/#/description" target="_blank" rel="noopener">Leetcode 231. Power of Two</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: bool    """</span>    <span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">0x80000000</span> <span class="token operator">%</span> n <span class="token operator">==</span> <span class="token number">0</span></code></pre><h3 id="2-16-判断一个数是否为4的幂次"><a href="#2-16-判断一个数是否为4的幂次" class="headerlink" title="2.16. 判断一个数是否为4的幂次"></a>2.16. 判断一个数是否为4的幂次</h3><p><a href="https://leetcode.com/problems/power-of-four/#/description" target="_blank" rel="noopener">Leetcode 342. Power of Four</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type num: int    :rtype: bool    """</span>    <span class="token keyword">return</span> num <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> num <span class="token operator">&amp;</span> <span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> num <span class="token operator">&amp;</span> <span class="token number">0x55555555</span> <span class="token operator">==</span> num</code></pre><h3 id="2-17-最近公共祖先问题"><a href="#2-17-最近公共祖先问题" class="headerlink" title="2.17. 最近公共祖先问题"></a>2.17. 最近公共祖先问题</h3><h4 id="2-17-1-二叉树的最近公共祖先"><a href="#2-17-1-二叉树的最近公共祖先" class="headerlink" title="2.17.1. 二叉树的最近公共祖先"></a>2.17.1. 二叉树的最近公共祖先</h4><p><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/" target="_blank" rel="noopener">Leetcode 236. Lowest Common Ancestor of a Binary Tree</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> TreeNode <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null <span class="token operator">||</span> root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    TreeNode left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> left <span class="token operator">==</span> null <span class="token operator">?</span> right <span class="token operator">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-17-2-二叉搜索树的最近公共祖先"><a href="#2-17-2-二叉搜索树的最近公共祖先" class="headerlink" title="2.17.2. 二叉搜索树的最近公共祖先"></a>2.17.2. 二叉搜索树的最近公共祖先</h4><p><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description/" target="_blank" rel="noopener">Leetcode 235. Lowest Common Ancestor of a Binary Search Tree</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> TreeNode <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>val <span class="token operator">></span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">></span> root<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token operator">||</span> p<span class="token punctuation">.</span>val <span class="token operator">==</span> root<span class="token punctuation">.</span>val <span class="token operator">||</span> q<span class="token punctuation">.</span>val <span class="token operator">==</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">></span> root<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>val <span class="token operator">></span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-18-挑选数组中不连续的元素，使其和最大"><a href="#2-18-挑选数组中不连续的元素，使其和最大" class="headerlink" title="2.18. 挑选数组中不连续的元素，使其和最大"></a>2.18. 挑选数组中不连续的元素，使其和最大</h3><p><a href="https://leetcode.com/problems/house-robber/#/description" target="_blank" rel="noopener">Leetcode 198. House Robber</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> results<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> results<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-19-镜像二叉树"><a href="#2-19-镜像二叉树" class="headerlink" title="2.19. 镜像二叉树"></a>2.19. 镜像二叉树</h3><p><a href="https://leetcode.com/problems/symmetric-tree/#/description" target="_blank" rel="noopener">Leetcode 101. Symmetric Tree</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type root: TreeNode    :rtype: bool    """</span>    <span class="token keyword">def</span> <span class="token function">symmetric</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> left <span class="token operator">and</span> <span class="token operator">not</span> right<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> left <span class="token operator">and</span> right <span class="token operator">and</span> left<span class="token punctuation">.</span>val <span class="token operator">==</span> right<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            <span class="token keyword">return</span> symmetric<span class="token punctuation">(</span>left<span class="token punctuation">.</span>left<span class="token punctuation">,</span> right<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">and</span> symmetric<span class="token punctuation">(</span>left<span class="token punctuation">.</span>right<span class="token punctuation">,</span> right<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> symmetric<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span></code></pre><h3 id="2-20-判断二叉树是否平衡"><a href="#2-20-判断二叉树是否平衡" class="headerlink" title="2.20. 判断二叉树是否平衡"></a>2.20. 判断二叉树是否平衡</h3><p><a href="https://leetcode.com/problems/balanced-binary-tree/#/description" target="_blank" rel="noopener">Leetcode 110. Balanced Binary Tree</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type root: TreeNode    :rtype: bool    """</span>    <span class="token keyword">def</span> <span class="token function">balanced</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        left <span class="token operator">=</span> balanced<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        right <span class="token operator">=</span> balanced<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> right <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> abs<span class="token punctuation">(</span>left <span class="token operator">-</span> right<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> max<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token keyword">return</span> balanced<span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span></code></pre><h3 id="2-21-二分法求平方根"><a href="#2-21-二分法求平方根" class="headerlink" title="2.21. 二分法求平方根"></a>2.21. 二分法求平方根</h3><p><a href="https://leetcode.com/problems/valid-perfect-square/#/description" target="_blank" rel="noopener">Leetcode 367. Valid Perfect Square</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> high <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;=</span> x <span class="token operator">/</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> low <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-22-n-求末尾0的个数"><a href="#2-22-n-求末尾0的个数" class="headerlink" title="2.22. n!求末尾0的个数"></a>2.22. n!求末尾0的个数</h3><p><a href="https://leetcode.com/problems/factorial-trailing-zeroes/#/description" target="_blank" rel="noopener">Leetcode 172. Factorial Trailing Zeroes</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span>        i <span class="token operator">*=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-23-有序数组去重"><a href="#2-23-有序数组去重" class="headerlink" title="2.23. 有序数组去重"></a>2.23. 有序数组去重</h3><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/#/description" target="_blank" rel="noopener">Leetcode 26. Remove Duplicates from Sorted Array</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: int    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span></code></pre><h3 id="2-24-链表判断环"><a href="#2-24-链表判断环" class="headerlink" title="2.24. 链表判断环"></a>2.24. 链表判断环</h3><p><a href="https://leetcode.com/problems/linked-list-cycle/#/description" target="_blank" rel="noopener">Leetcode 141. Linked List Cycle</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type head: ListNode    :rtype: bool    """</span>    <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    walker <span class="token operator">=</span> head    runner <span class="token operator">=</span> head<span class="token punctuation">.</span>next    <span class="token keyword">while</span> runner<span class="token punctuation">.</span>next <span class="token operator">and</span> runner<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">:</span>        walker <span class="token operator">=</span> walker<span class="token punctuation">.</span>next        runner <span class="token operator">=</span> runner<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">if</span> walker <span class="token operator">==</span> runner<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h3 id="2-25-有环链表获取环起始结点"><a href="#2-25-有环链表获取环起始结点" class="headerlink" title="2.25. 有环链表获取环起始结点"></a>2.25. 有环链表获取环起始结点</h3><p><a href="https://leetcode.com/problems/linked-list-cycle-ii/description/" target="_blank" rel="noopener">Leetcode 142. Linked List Cycle II</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type head: ListNode    :rtype: ListNode    """</span>    <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> None    walker <span class="token operator">=</span> head    runner <span class="token operator">=</span> head    <span class="token keyword">while</span> runner <span class="token operator">and</span> runner<span class="token punctuation">.</span>next<span class="token punctuation">:</span>        walker <span class="token operator">=</span> walker<span class="token punctuation">.</span>next        runner <span class="token operator">=</span> runner<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">if</span> walker <span class="token operator">==</span> runner<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> runner <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> None    walker <span class="token operator">=</span> head    <span class="token keyword">while</span> walker <span class="token operator">!=</span> runner<span class="token punctuation">:</span>        walker <span class="token operator">=</span> walker<span class="token punctuation">.</span>next        runner <span class="token operator">=</span> runner<span class="token punctuation">.</span>next    <span class="token keyword">return</span> walker</code></pre><h3 id="2-26-判断是否为回文数"><a href="#2-26-判断是否为回文数" class="headerlink" title="2.26. 判断是否为回文数"></a>2.26. 判断是否为回文数</h3><p><a href="https://leetcode.com/problems/palindrome-number/#/description" target="_blank" rel="noopener">Leetcode 9. Palindrome Number</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> palindrome <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>palindrome <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        palindrome <span class="token operator">=</span> palindrome <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> x <span class="token operator">==</span> palindrome <span class="token operator">||</span> x <span class="token operator">==</span> palindrome <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-27-是否存在二叉树根到叶子节点路径和为指定值"><a href="#2-27-是否存在二叉树根到叶子节点路径和为指定值" class="headerlink" title="2.27. 是否存在二叉树根到叶子节点路径和为指定值"></a>2.27. 是否存在二叉树根到叶子节点路径和为指定值</h3><p><a href="https://leetcode.com/problems/path-sum/#/description" target="_blank" rel="noopener">Leetcode 112. Path Sum</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type root: TreeNode    :type sum: int    :rtype: bool    """</span>    <span class="token keyword">if</span> root <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> sum <span class="token operator">and</span> root<span class="token punctuation">.</span>left <span class="token keyword">is</span> None <span class="token operator">and</span> root<span class="token punctuation">.</span>right <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> hasPathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">or</span> hasPathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span></code></pre><h3 id="2-28-找出字符串中所有变位词"><a href="#2-28-找出字符串中所有变位词" class="headerlink" title="2.28. 找出字符串中所有变位词"></a>2.28. 找出字符串中所有变位词</h3><p><a href="https://leetcode.com/problems/find-all-anagrams-in-a-string/#/description" target="_blank" rel="noopener">Leetcode 438. Find All Anagrams in a String</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> p <span class="token operator">==</span> null <span class="token operator">||</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> p<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        hash<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        hash<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">==</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            hash<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-29-判断两个字符串是否为同构字符串"><a href="#2-29-判断两个字符串是否为同构字符串" class="headerlink" title="2.29. 判断两个字符串是否为同构字符串"></a>2.29. 判断两个字符串是否为同构字符串</h3><p><a href="https://leetcode.com/problems/isomorphic-strings/#/description" target="_blank" rel="noopener">Leetcode 205. Isomorphic Strings</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isIsomorphic</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> k1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> k2 <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m1<span class="token punctuation">[</span>k1<span class="token punctuation">]</span> <span class="token operator">!=</span> m2<span class="token punctuation">[</span>k2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        m1<span class="token punctuation">[</span>k1<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        m2<span class="token punctuation">[</span>k2<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-30-判断一个数是否为其全部约数的和"><a href="#2-30-判断一个数是否为其全部约数的和" class="headerlink" title="2.30. 判断一个数是否为其全部约数的和"></a>2.30. 判断一个数是否为其全部约数的和</h3><p><a href="https://leetcode.com/problems/perfect-number/#/description" target="_blank" rel="noopener">Leetcode 507. Perfect Number</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">checkPerfectNumber</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type num: int    :rtype: bool    """</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    result <span class="token operator">=</span> <span class="token number">0</span>    i <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">while</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> i            result <span class="token operator">+=</span> num <span class="token operator">//</span> i        i <span class="token operator">+=</span> <span class="token number">1</span>    result <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> result <span class="token operator">==</span> num</code></pre><h3 id="2-31-打乱数组元素"><a href="#2-31-打乱数组元素" class="headerlink" title="2.31. 打乱数组元素"></a>2.31. 打乱数组元素</h3><p><a href="https://leetcode.com/problems/shuffle-an-array/#/description" target="_blank" rel="noopener">Leetcode 384. Shuffle an Array</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> swapIndex <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>swapIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>swapIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-32-生成不重复随机序列"><a href="#2-32-生成不重复随机序列" class="headerlink" title="2.32. 生成不重复随机序列"></a>2.32. 生成不重复随机序列</h3><pre class=" language-java"><code class="language-java">Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">randomSequence</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sequence <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sequence<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>last <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sequence<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        sequence<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> sequence<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">;</span>        last<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-33-使用随机生成0到5的函数，实现随机生成0到7的函数"><a href="#2-33-使用随机生成0到5的函数，实现随机生成0到7的函数" class="headerlink" title="2.33. 使用随机生成0到5的函数，实现随机生成0到7的函数"></a>2.33. 使用随机生成0到5的函数，实现随机生成0到7的函数</h3><pre class=" language-java"><code class="language-java">Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">random5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">random7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> temp1<span class="token operator">=</span><span class="token function">random5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp2<span class="token operator">=</span><span class="token function">random5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>temp1<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>temp2<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-34-计算数组A、B、C、D中有多少种-i-j-k-l-使得A-i-B-j-C-k-D-l-0"><a href="#2-34-计算数组A、B、C、D中有多少种-i-j-k-l-使得A-i-B-j-C-k-D-l-0" class="headerlink" title="2.34. 计算数组A、B、C、D中有多少种(i, j, k, l)使得A[i] + B[j] + C[k] + D[l] = 0"></a>2.34. 计算数组A、B、C、D中有多少种(i, j, k, l)使得A[i] + B[j] + C[k] + D[l] = 0</h3><p><a href="https://leetcode.com/problems/4sum-ii/#/description" target="_blank" rel="noopener">Leetcode 454. 4Sum II</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fourSumCount</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> D<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type A: List[int]    :type B: List[int]    :type C: List[int]    :type D: List[int]    :rtype: int    """</span>    sumABDict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> A<span class="token punctuation">:</span>        <span class="token keyword">for</span> b <span class="token keyword">in</span> B<span class="token punctuation">:</span>            sumAB <span class="token operator">=</span> a <span class="token operator">+</span> b            <span class="token keyword">if</span> sumAB <span class="token operator">not</span> <span class="token keyword">in</span> sumABDict<span class="token punctuation">:</span>                sumABDict<span class="token punctuation">[</span>sumAB<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            sumABDict<span class="token punctuation">[</span>sumAB<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> C<span class="token punctuation">:</span>        <span class="token keyword">for</span> d <span class="token keyword">in</span> D<span class="token punctuation">:</span>            sumCD <span class="token operator">=</span> <span class="token operator">-</span>c <span class="token operator">-</span> d            <span class="token keyword">if</span> sumCD <span class="token keyword">in</span> sumABDict<span class="token punctuation">:</span>                result <span class="token operator">+=</span> sumABDict<span class="token punctuation">[</span>sumCD<span class="token punctuation">]</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-35-计算给出的多个时间中，最小的时间差"><a href="#2-35-计算给出的多个时间中，最小的时间差" class="headerlink" title="2.35. 计算给出的多个时间中，最小的时间差"></a>2.35. 计算给出的多个时间中，最小的时间差</h3><p><a href="https://leetcode.com/problems/minimum-time-difference/#/description" target="_blank" rel="noopener">Leetcode 539. Minimum Time Difference</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMinDifference</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> timePoints<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mark <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String time <span class="token operator">:</span> timePoints<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> t <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token punctuation">[</span>h <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        mark<span class="token punctuation">[</span>h <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> min <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">int</span> first <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> last <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> i <span class="token operator">-</span> prev<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            first <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            last <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            prev <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">-</span> last <span class="token operator">+</span> first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-36-计算-0-10-n-中各位数字不同的数的个数"><a href="#2-36-计算-0-10-n-中各位数字不同的数的个数" class="headerlink" title="2.36. 计算[0, 10^n)中各位数字不同的数的个数"></a>2.36. 计算[0, 10^n)中各位数字不同的数的个数</h3><p><a href="https://leetcode.com/problems/count-numbers-with-unique-digits/#/description" target="_blank" rel="noopener">Leetcode 357. Count Numbers with Unique Digits</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">countNumbersWithUniqueDigits</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: int    """</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    map <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    map<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> <span class="token number">9</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            count <span class="token operator">*=</span> j        map<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> count    <span class="token keyword">return</span> map<span class="token punctuation">[</span>n<span class="token punctuation">]</span></code></pre><h3 id="2-37-数组中仅有两个数仅出现一次，其余的数均出现两次，找出这两个数"><a href="#2-37-数组中仅有两个数仅出现一次，其余的数均出现两次，找出这两个数" class="headerlink" title="2.37. 数组中仅有两个数仅出现一次，其余的数均出现两次，找出这两个数"></a>2.37. 数组中仅有两个数仅出现一次，其余的数均出现两次，找出这两个数</h3><p><a href="https://leetcode.com/problems/single-number-iii/#/description" target="_blank" rel="noopener">Leetcode 260. Single Number III</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: List[int]    """</span>    mixed_xor <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        mixed_xor <span class="token operator">^</span><span class="token operator">=</span> num    diff <span class="token operator">=</span> mixed_xor <span class="token operator">&amp;</span> <span class="token punctuation">(</span>mixed_xor <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> mixed_xor    first <span class="token operator">=</span> <span class="token number">0</span>    second <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        <span class="token keyword">if</span> diff <span class="token operator">&amp;</span> num<span class="token punctuation">:</span>            first <span class="token operator">^</span><span class="token operator">=</span> num        <span class="token keyword">else</span><span class="token punctuation">:</span>            second <span class="token operator">^</span><span class="token operator">=</span> num    <span class="token keyword">return</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span></code></pre><h3 id="2-38-找出递增数列中第n位的数字"><a href="#2-38-找出递增数列中第n位的数字" class="headerlink" title="2.38. 找出递增数列中第n位的数字"></a>2.38. 找出递增数列中第n位的数字</h3><p><a href="https://leetcode.com/problems/nth-digit/#/description" target="_blank" rel="noopener">Leetcode 400. Nth Digit</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findNthDigit</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: int    """</span>    digits <span class="token operator">=</span> <span class="token number">1</span>    start <span class="token operator">=</span> <span class="token number">1</span>    length <span class="token operator">=</span> <span class="token number">9</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> digits <span class="token operator">*</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">-=</span> digits <span class="token operator">*</span> length        digits <span class="token operator">+=</span> <span class="token number">1</span>        start <span class="token operator">*=</span> <span class="token number">10</span>        length <span class="token operator">*=</span> <span class="token number">10</span>    n <span class="token operator">-=</span> <span class="token number">1</span>    number <span class="token operator">=</span> start <span class="token operator">+</span> n <span class="token operator">//</span> digits    <span class="token keyword">return</span> int<span class="token punctuation">(</span>str<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">[</span>n <span class="token operator">%</span> digits<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="2-39-计算小于n的质数的个数"><a href="#2-39-计算小于n的质数的个数" class="headerlink" title="2.39. 计算小于n的质数的个数"></a>2.39. 计算小于n的质数的个数</h3><p><a href="https://leetcode.com/problems/count-primes/#/description" target="_blank" rel="noopener">Leetcode 204. Count Primes</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: int    """</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    primes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">]</span> <span class="token operator">*</span> n    primes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>    primes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>n <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">*</span> i<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>                primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span>primes<span class="token punctuation">)</span></code></pre><h3 id="2-40-由部分（可重复）给定数组元素相加得到指定值的情况数"><a href="#2-40-由部分（可重复）给定数组元素相加得到指定值的情况数" class="headerlink" title="2.40. 由部分（可重复）给定数组元素相加得到指定值的情况数"></a>2.40. 由部分（可重复）给定数组元素相加得到指定值的情况数</h3><p><a href="https://leetcode.com/problems/combination-sum-iv/#/description" target="_blank" rel="noopener">Leetcode 377. Combination Sum IV</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">combinationSum4</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> num <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> results<span class="token punctuation">[</span>i <span class="token operator">-</span> num<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-41-在有序矩阵中寻找第k大的数"><a href="#2-41-在有序矩阵中寻找第k大的数" class="headerlink" title="2.41. 在有序矩阵中寻找第k大的数"></a>2.41. 在有序矩阵中寻找第k大的数</h3><p><a href="https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/#/description" target="_blank" rel="noopener">Leetcode 378. Kth Smallest Element in a Sorted Matrix</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>j <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    PriorityQueue<span class="token operator">&lt;</span>Item<span class="token operator">></span> minHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Item<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Item o1<span class="token punctuation">,</span> Item o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> o1<span class="token punctuation">.</span>value <span class="token operator">-</span> o2<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        minHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>minHeap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Item item <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>item<span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>item<span class="token punctuation">.</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        k<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> item<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-42-求n对括号的所有排列情况"><a href="#2-42-求n对括号的所有排列情况" class="headerlink" title="2.42. 求n对括号的所有排列情况"></a>2.42. 求n对括号的所有排列情况</h3><p><a href="https://leetcode.com/problems/generate-parentheses/#/description" target="_blank" rel="noopener">Leetcode 22. Generate Parentheses</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: List[str]    """</span>    <span class="token keyword">def</span> <span class="token function">parenthesis</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> current<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> right <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current<span class="token punctuation">)</span>        <span class="token keyword">elif</span> left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> right <span class="token operator">>=</span> left<span class="token punctuation">:</span>            parenthesis<span class="token punctuation">(</span>result<span class="token punctuation">,</span> current <span class="token operator">+</span> <span class="token string">'('</span><span class="token punctuation">,</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>            parenthesis<span class="token punctuation">(</span>result<span class="token punctuation">,</span> current <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    parenthesis<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-43-给定字符串数组，求最大不相交的两个字符串的长度积"><a href="#2-43-给定字符串数组，求最大不相交的两个字符串的长度积" class="headerlink" title="2.43. 给定字符串数组，求最大不相交的两个字符串的长度积"></a>2.43. 给定字符串数组，求最大不相交的两个字符串的长度积</h3><p><a href="https://leetcode.com/problems/maximum-product-of-word-lengths/#/description" target="_blank" rel="noopener">Leetcode 318. Maximum Product of Word Lengths</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>words<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> bit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> letter <span class="token operator">:</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bit <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>letter <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bits<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bits<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> bits<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-44-在由-1-n-组成的长为n-1的数组中，寻找重复的那个数"><a href="#2-44-在由-1-n-组成的长为n-1的数组中，寻找重复的那个数" class="headerlink" title="2.44. 在由[1, n]组成的长为n + 1的数组中，寻找重复的那个数"></a>2.44. 在由[1, n]组成的长为n + 1的数组中，寻找重复的那个数</h3><p><a href="https://leetcode.com/problems/find-the-duplicate-number/#/description" target="_blank" rel="noopener">Leetcode 287. Find the Duplicate Number</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-45-求给定数组的所有排列情况"><a href="#2-45-求给定数组的所有排列情况" class="headerlink" title="2.45. 求给定数组的所有排列情况"></a>2.45. 求给定数组的所有排列情况</h3><p><a href="https://leetcode.com/problems/permutations/#/description" target="_blank" rel="noopener">Leetcode 46. Permutations</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> newResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> item <span class="token operator">:</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> newItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                newItem<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                newResult<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        result <span class="token operator">=</span> newResult<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-46-求给定（元素可重复）数组的所有排列情况"><a href="#2-46-求给定（元素可重复）数组的所有排列情况" class="headerlink" title="2.46. 求给定（元素可重复）数组的所有排列情况"></a>2.46. 求给定（元素可重复）数组的所有排列情况</h3><p><a href="https://leetcode.com/problems/permutations-ii/description/" target="_blank" rel="noopener">Leetcode 47. Permutations II</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: List[List[int]]    """</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        current_result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> result<span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> num <span class="token operator">==</span> item<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>                temp <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                temp<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>j<span class="token punctuation">,</span> num<span class="token punctuation">)</span>                current_result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        result <span class="token operator">=</span> current_result    <span class="token keyword">return</span> result</code></pre><h3 id="2-47-最长回文子序列"><a href="#2-47-最长回文子序列" class="headerlink" title="2.47. 最长回文子序列"></a>2.47. 最长回文子序列</h3><p><a href="https://leetcode.com/problems/longest-palindromic-subsequence/#/description" target="_blank" rel="noopener">Leetcode 516. Longest Palindromic Subsequence</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestPalindromeSubseq</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-48-将-1-n-的数按字典排序"><a href="#2-48-将-1-n-的数按字典排序" class="headerlink" title="2.48. 将[1, n]的数按字典排序"></a>2.48. 将[1, n]的数按字典排序</h3><p><a href="https://leetcode.com/problems/lexicographical-numbers/#/description" target="_blank" rel="noopener">Leetcode 386. Lexicographical Numbers</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lexicalOrder</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: List[int]    """</span>    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> current<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> current <span class="token operator">></span> n<span class="token punctuation">:</span>            <span class="token keyword">return</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current<span class="token punctuation">)</span>        current <span class="token operator">*=</span> <span class="token number">10</span>        <span class="token keyword">if</span> current <span class="token operator">&lt;=</span> n<span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> current <span class="token operator">+</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">:</span>                    dfs<span class="token punctuation">(</span>result<span class="token punctuation">,</span> current <span class="token operator">+</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dfs<span class="token punctuation">(</span>result<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-49-二叉搜索树迭代器"><a href="#2-49-二叉搜索树迭代器" class="headerlink" title="2.49. 二叉搜索树迭代器"></a>2.49. 二叉搜索树迭代器</h3><p><a href="https://leetcode.com/problems/binary-search-tree-iterator/#/description" target="_blank" rel="noopener">Leetcode 173. Binary Search Tree Iterator</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BSTIterator</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        """</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> root<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>left    <span class="token keyword">def</span> <span class="token function">hasNext</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: bool        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: int        """</span>        node <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> node<span class="token punctuation">.</span>val        node <span class="token operator">=</span> node<span class="token punctuation">.</span>right        <span class="token keyword">while</span> node<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>left        <span class="token keyword">return</span> result</code></pre><h3 id="2-50-由-1-n-组成的二叉搜索树的个数"><a href="#2-50-由-1-n-组成的二叉搜索树的个数" class="headerlink" title="2.50. 由[1, n]组成的二叉搜索树的个数"></a>2.50. 由[1, n]组成的二叉搜索树的个数</h3><p><a href="https://leetcode.com/problems/unique-binary-search-trees/#/description" target="_blank" rel="noopener">Leetcode 96. Unique Binary Search Trees</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> results<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> results<span class="token punctuation">[</span>i <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-51-格雷码"><a href="#2-51-格雷码" class="headerlink" title="2.51. 格雷码"></a>2.51. 格雷码</h3><p><a href="https://leetcode.com/problems/gray-code/#/description" target="_blank" rel="noopener">Leetcode 89. Gray Code</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">grayCode</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: List[int]    """</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token operator">^</span> <span class="token punctuation">(</span>i <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h3 id="2-52-从m-x-n棋盘左上角走到右下角的路径总数"><a href="#2-52-从m-x-n棋盘左上角走到右下角的路径总数" class="headerlink" title="2.52. 从m x n棋盘左上角走到右下角的路径总数"></a>2.52. 从m x n棋盘左上角走到右下角的路径总数</h3><p><a href="https://leetcode.com/problems/unique-paths/#/description" target="_blank" rel="noopener">Leetcode 62. Unique Paths</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-53-求集合的所有子集"><a href="#2-53-求集合的所有子集" class="headerlink" title="2.53. 求集合的所有子集"></a>2.53. 求集合的所有子集</h3><p><a href="https://leetcode.com/problems/subsets/#/description" target="_blank" rel="noopener">Leetcode 78. Subsets</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: List[List[int]]    """</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        current <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">:</span>                current<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current<span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-54-求（元素可重复）集合的所有子集"><a href="#2-54-求（元素可重复）集合的所有子集" class="headerlink" title="2.54. 求（元素可重复）集合的所有子集"></a>2.54. 求（元素可重复）集合的所有子集</h3><p><a href="https://leetcode.com/problems/subsets-ii/description/" target="_blank" rel="noopener">Leetcode 90. Subsets II</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: List[List[int]]    """</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    last_start <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        start <span class="token operator">=</span> last_start <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">0</span>        last_start <span class="token operator">=</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> result<span class="token punctuation">[</span>start<span class="token punctuation">:</span>last_start<span class="token punctuation">]</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-55-判断数组arr中是否存在arr-i-lt-arr-j-lt-arr-k"><a href="#2-55-判断数组arr中是否存在arr-i-lt-arr-j-lt-arr-k" class="headerlink" title="2.55. 判断数组arr中是否存在arr[i] &lt; arr[j] &lt; arr[k]"></a>2.55. 判断数组arr中是否存在arr[i] &lt; arr[j] &lt; arr[k]</h3><p><a href="https://leetcode.com/problems/increasing-triplet-subsequence/#/description" target="_blank" rel="noopener">Leetcode 334. Increasing Triplet Subsequence</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">increasingTriplet</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> first <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">int</span> second <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> second <span class="token operator">&amp;&amp;</span> num <span class="token operator">></span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>            second <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-56-查找数组中第k大的数"><a href="#2-56-查找数组中第k大的数" class="headerlink" title="2.56. 查找数组中第k大的数"></a>2.56. 查找数组中第k大的数</h3><p><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/#/description" target="_blank" rel="noopener">Leetcode 215. Kth Largest Element in an Array</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_kth_largest</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>        pivot <span class="token operator">=</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span>        <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>            <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high <span class="token operator">and</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">:</span>                high <span class="token operator">-=</span> <span class="token number">1</span>            array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span>            <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high <span class="token operator">and</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">:</span>                low <span class="token operator">+=</span> <span class="token number">1</span>            array<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span>        array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> pivot        <span class="token keyword">return</span> low    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    k <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> k    low <span class="token operator">=</span> <span class="token number">0</span>    high <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        index <span class="token operator">=</span> partition<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span>        <span class="token keyword">if</span> index <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>            low <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">elif</span> index <span class="token operator">></span> k<span class="token punctuation">:</span>            high <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span></code></pre><h3 id="2-57-链表删除倒数第n个结点"><a href="#2-57-链表删除倒数第n个结点" class="headerlink" title="2.57. 链表删除倒数第n个结点"></a>2.57. 链表删除倒数第n个结点</h3><p><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/#/description" target="_blank" rel="noopener">Leetcode 19. Remove Nth Node From End of List</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type head: ListNode    :type n: int    :rtype: ListNode    """</span>    first <span class="token operator">=</span> head    second <span class="token operator">=</span> head    prev <span class="token operator">=</span> head    <span class="token keyword">while</span> n<span class="token punctuation">:</span>        first <span class="token operator">=</span> first<span class="token punctuation">.</span>next        n <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">while</span> first<span class="token punctuation">:</span>        first <span class="token operator">=</span> first<span class="token punctuation">.</span>next        prev <span class="token operator">=</span> second        second <span class="token operator">=</span> second<span class="token punctuation">.</span>next    <span class="token keyword">if</span> second <span class="token operator">==</span> head<span class="token punctuation">:</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>next    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next    <span class="token keyword">return</span> head</code></pre><h3 id="2-58-判断数组是否可以拼接为正方形"><a href="#2-58-判断数组是否可以拼接为正方形" class="headerlink" title="2.58. 判断数组是否可以拼接为正方形"></a>2.58. 判断数组是否可以拼接为正方形</h3><p><a href="https://leetcode.com/problems/matchsticks-to-square/#/description" target="_blank" rel="noopener">Leetcode 473. Matchsticks to Square</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">makesquare</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Utils</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> edges<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> edges<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> edges<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> edges<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> current <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> edges<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> current<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> edges<span class="token punctuation">,</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> current<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> sumNums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sumNums <span class="token operator">+=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sumNums <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> sumNums <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">,</span> right<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Utils utils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> utils<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> edges<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-59-快速pow"><a href="#2-59-快速pow" class="headerlink" title="2.59. 快速pow()"></a>2.59. 快速<code>pow()</code></h3><p><a href="https://leetcode.com/problems/super-pow/#/description" target="_blank" rel="noopener">Leetcode 372. Super Pow</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">normalPow</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            result <span class="token operator">=</span> result <span class="token operator">*</span> a <span class="token operator">%</span> M<span class="token punctuation">;</span>        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> M<span class="token punctuation">;</span>        b <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">superPow</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">%=</span> M<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token function">normalPow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token function">normalPow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span></code></pre><h3 id="2-60-判断数组是否可以分为相等的两部分"><a href="#2-60-判断数组是否可以分为相等的两部分" class="headerlink" title="2.60. 判断数组是否可以分为相等的两部分"></a>2.60. 判断数组是否可以分为相等的两部分</h3><p><a href="https://leetcode.com/problems/partition-equal-subset-sum/#/description" target="_blank" rel="noopener">Leetcode 416. Partition Equal Subset Sum</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canPartition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        target <span class="token operator">+=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    target <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-61-在矩阵中查找指定值"><a href="#2-61-在矩阵中查找指定值" class="headerlink" title="2.61. 在矩阵中查找指定值"></a>2.61. 在矩阵中查找指定值</h3><p><a href="https://leetcode.com/problems/search-a-2d-matrix-ii/#/description" target="_blank" rel="noopener">Leetcode 240. Search a 2D Matrix II</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type matrix: List[List[int]]    :type target: int    :rtype: bool    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> matrix<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    i <span class="token operator">=</span> <span class="token number">0</span>    j <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">and</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>        current <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">if</span> current <span class="token operator">==</span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">elif</span> current <span class="token operator">></span> target<span class="token punctuation">:</span>            j <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h3 id="2-62-将矩阵顺时针旋转90度"><a href="#2-62-将矩阵顺时针旋转90度" class="headerlink" title="2.62. 将矩阵顺时针旋转90度"></a>2.62. 将矩阵顺时针旋转90度</h3><p><a href="https://leetcode.com/problems/rotate-image/#/description" target="_blank" rel="noopener">Leetcode 48. Rotate Image</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rotate</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type matrix: List[List[int]]    :rtype: void Do not return anything, modify matrix in-place instead.    """</span>    m <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>m <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>m <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span></code></pre><h3 id="2-63-最长递增子序列"><a href="#2-63-最长递增子序列" class="headerlink" title="2.63. 最长递增子序列"></a>2.63. 最长递增子序列</h3><p><a href="https://leetcode.com/problems/longest-increasing-subsequence/#/description" target="_blank" rel="noopener">Leetcode 300. Longest Increasing Subsequence</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: int    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">)</span></code></pre><h3 id="2-64-求二维矩阵由左上角到右下角的最小和"><a href="#2-64-求二维矩阵由左上角到右下角的最小和" class="headerlink" title="2.64. 求二维矩阵由左上角到右下角的最小和"></a>2.64. 求二维矩阵由左上角到右下角的最小和</h3><p><a href="https://leetcode.com/problems/minimum-path-sum/#/description" target="_blank" rel="noopener">Leetcode 64. Minimum Path Sum</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-65-将由0、1、2组成的数组排序"><a href="#2-65-将由0、1、2组成的数组排序" class="headerlink" title="2.65. 将由0、1、2组成的数组排序"></a>2.65. 将由0、1、2组成的数组排序</h3><p><a href="https://leetcode.com/problems/sort-colors/#/description" target="_blank" rel="noopener">Leetcode 75. Sort Colors</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sortColors</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: void Do not return anything, modify nums in-place instead.    """</span>    left <span class="token operator">=</span> <span class="token number">0</span>    right <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    middle <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> middle <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>        <span class="token keyword">while</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">and</span> middle <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span>            right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">while</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> middle <span class="token operator">></span> left<span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span>            left <span class="token operator">+=</span> <span class="token number">1</span>        middle <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h3 id="2-66-求第n位仅由指定因数组成的数字"><a href="#2-66-求第n位仅由指定因数组成的数字" class="headerlink" title="2.66. 求第n位仅由指定因数组成的数字"></a>2.66. 求第n位仅由指定因数组成的数字</h3><p><a href="https://leetcode.com/problems/super-ugly-number/#/description" target="_blank" rel="noopener">Leetcode 313. Super Ugly Number</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nthSuperUglyNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> primes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> factors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>primes<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>factors<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> indexes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>primes<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>indexes<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ugly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> theMin <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> factor <span class="token operator">:</span> factors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            theMin <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>theMin<span class="token punctuation">,</span> factor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ugly<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> theMin<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> factors<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ugly<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> factors<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                indexes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                factors<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ugly<span class="token punctuation">[</span>indexes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ugly<span class="token punctuation">[</span>ugly<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-67-数组中查找极大值"><a href="#2-67-数组中查找极大值" class="headerlink" title="2.67. 数组中查找极大值"></a>2.67. 数组中查找极大值</h3><p><a href="https://leetcode.com/problems/find-peak-element/#/description" target="_blank" rel="noopener">Leetcode 162. Find Peak Elementr</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-68-判断n能否由平方数的和组成"><a href="#2-68-判断n能否由平方数的和组成" class="headerlink" title="2.68. 判断n能否由平方数的和组成"></a>2.68. 判断n能否由平方数的和组成</h3><p><a href="https://leetcode.com/problems/perfect-squares/#/description" target="_blank" rel="noopener">Leetcode 279. Perfect Squares</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">numSquares</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: int    """</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> j <span class="token operator">*</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span></code></pre><h3 id="2-69-删除二叉搜索树中的结点"><a href="#2-69-删除二叉搜索树中的结点" class="headerlink" title="2.69. 删除二叉搜索树中的结点"></a>2.69. 删除二叉搜索树中的结点</h3><p><a href="https://leetcode.com/problems/delete-node-in-a-bst/#/description" target="_blank" rel="noopener">Leetcode 450. Delete Node in a BST</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type root: TreeNode    :type key: int    :rtype: TreeNode    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>        <span class="token keyword">return</span> None    <span class="token keyword">if</span> root<span class="token punctuation">.</span>val <span class="token operator">></span> key<span class="token punctuation">:</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> deleteNode<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">elif</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> key<span class="token punctuation">:</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> deleteNode<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>left<span class="token punctuation">:</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span>right        <span class="token keyword">elif</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span>left        <span class="token keyword">else</span><span class="token punctuation">:</span>            replace <span class="token operator">=</span> root<span class="token punctuation">.</span>right            <span class="token keyword">while</span> replace<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                replace <span class="token operator">=</span> replace<span class="token punctuation">.</span>left            root<span class="token punctuation">.</span>val <span class="token operator">=</span> replace<span class="token punctuation">.</span>val            root<span class="token punctuation">.</span>right <span class="token operator">=</span> deleteNode<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token keyword">return</span> root</code></pre><h3 id="2-70-检查字符串是否是合法的二叉树前序遍历结果"><a href="#2-70-检查字符串是否是合法的二叉树前序遍历结果" class="headerlink" title="2.70. 检查字符串是否是合法的二叉树前序遍历结果"></a>2.70. 检查字符串是否是合法的二叉树前序遍历结果</h3><p><a href="https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/#/description" target="_blank" rel="noopener">Leetcode 331. Verify Preorder Serialization of a Binary Tree</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isValidSerialization</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> preorder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type preorder: str    :rtype: bool    """</span>    degree <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> node <span class="token keyword">in</span> preorder<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        degree <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> degree <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> node <span class="token operator">!=</span> <span class="token string">'#'</span><span class="token punctuation">:</span>            degree <span class="token operator">-=</span> <span class="token number">2</span>    <span class="token keyword">return</span> degree <span class="token operator">==</span> <span class="token number">0</span></code></pre><h3 id="2-71-中缀表达式转后缀表达式"><a href="#2-71-中缀表达式转后缀表达式" class="headerlink" title="2.71. 中缀表达式转后缀表达式"></a>2.71. 中缀表达式转后缀表达式</h3><pre class=" language-java"><code class="language-java">String <span class="token function">infixToPostfix</span><span class="token punctuation">(</span>String infix<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> priority <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    priority<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    priority<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    priority<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    priority<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    priority<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    priority<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    priority<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'^'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stack<span class="token operator">&lt;</span>Character<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> infix<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>priority<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> priority<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> priority<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-72-排列的下一种情况"><a href="#2-72-排列的下一种情况" class="headerlink" title="2.72. 排列的下一种情况"></a>2.72. 排列的下一种情况</h3><p><a href="https://leetcode.com/problems/next-permutation/description/" target="_blank" rel="noopener">Leetcode 31. Next Permutation</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">nextPermutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: void Do not return anything, modify nums in-place instead.    """</span>    i <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span>    <span class="token keyword">while</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        i <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    j <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>        j <span class="token operator">-=</span> <span class="token number">1</span>    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> sorted<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="2-73-求旋转有序数组的最小值"><a href="#2-73-求旋转有序数组的最小值" class="headerlink" title="2.73. 求旋转有序数组的最小值"></a>2.73. 求旋转有序数组的最小值</h3><p><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/" target="_blank" rel="noopener">Leetcode 153. Find Minimum in Rotated Sorted Array</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findMin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: int    """</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    low <span class="token operator">=</span> <span class="token number">0</span>    high <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">=</span> mid    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span></code></pre><h3 id="2-74-在旋转有序数组中查找指定值"><a href="#2-74-在旋转有序数组中查找指定值" class="headerlink" title="2.74. 在旋转有序数组中查找指定值"></a>2.74. 在旋转有序数组中查找指定值</h3><p><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/description/" target="_blank" rel="noopener">Leetcode 33. Search in Rotated Sorted Array</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :type target: int    :rtype: int    """</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    low <span class="token operator">=</span> <span class="token number">0</span>    high <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">=</span> mid    rotate <span class="token operator">=</span> low    low <span class="token operator">=</span> <span class="token number">0</span>    high <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        real_mid <span class="token operator">=</span> <span class="token punctuation">(</span>mid <span class="token operator">+</span> rotate<span class="token punctuation">)</span> <span class="token operator">%</span> length        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>real_mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span> real_mid        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>real_mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></code></pre><h3 id="2-75-在旋转（元素可重复）有序数组中查找指定值"><a href="#2-75-在旋转（元素可重复）有序数组中查找指定值" class="headerlink" title="2.75. 在旋转（元素可重复）有序数组中查找指定值"></a>2.75. 在旋转（元素可重复）有序数组中查找指定值</h3><p><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/" target="_blank" rel="noopener">Leetcode 81. Search in Rotated Sorted Array II</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :type target: int    :rtype: bool    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    low <span class="token operator">=</span> <span class="token number">0</span>    high <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>                high <span class="token operator">=</span> mid            <span class="token keyword">else</span><span class="token punctuation">:</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">:</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                high <span class="token operator">=</span> mid        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">==</span> target</code></pre><h3 id="2-76-有序数组中查找特定元素的第一个和最后一个索引"><a href="#2-76-有序数组中查找特定元素的第一个和最后一个索引" class="headerlink" title="2.76. 有序数组中查找特定元素的第一个和最后一个索引"></a>2.76. 有序数组中查找特定元素的第一个和最后一个索引</h3><p><a href="https://leetcode.com/problems/search-for-a-range/description/" target="_blank" rel="noopener">Leetcode 34. Search for a Range</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">searchRange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :type target: int    :rtype: List[int]    """</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        low <span class="token operator">=</span> <span class="token number">0</span>        high <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">return</span> low    <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    low <span class="token operator">=</span> search<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span>    <span class="token keyword">if</span> low <span class="token operator">==</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">or</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    high <span class="token operator">=</span> search<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    high <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>low<span class="token punctuation">,</span> high<span class="token punctuation">]</span></code></pre><h3 id="2-77-有序数组中查找指定值的插入位置"><a href="#2-77-有序数组中查找指定值的插入位置" class="headerlink" title="2.77. 有序数组中查找指定值的插入位置"></a>2.77. 有序数组中查找指定值的插入位置</h3><p><a href="https://leetcode.com/problems/search-insert-position/description/" target="_blank" rel="noopener">Leetcode 35. Search Insert Position</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :type target: int    :rtype: int    """</span>    low <span class="token operator">=</span> <span class="token number">0</span>    high <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span> mid        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> low</code></pre><h3 id="2-78-实现pow-x-n"><a href="#2-78-实现pow-x-n" class="headerlink" title="2.78. 实现pow(x, n)"></a>2.78. 实现<code>pow(x, n)</code></h3><p><a href="https://leetcode.com/problems/powx-n/description/" target="_blank" rel="noopener">Leetcode 50. Pow(x, n)</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">myPow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type x: float    :type n: int    :rtype: float    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> n<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token operator">-</span>n        x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x    <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> myPow<span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">,</span> n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> myPow<span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">,</span> n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><h3 id="2-79-第k个排列"><a href="#2-79-第k个排列" class="headerlink" title="2.79. 第k个排列"></a>2.79. 第k个排列</h3><p><a href="https://leetcode.com/problems/permutation-sequence/description/" target="_blank" rel="noopener">Leetcode 60. Permutation Sequence</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getPermutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :type k: int    :rtype: str    """</span>    factor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n    factor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> factor<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> i    result <span class="token operator">=</span> <span class="token string">''</span>    k <span class="token operator">-=</span> <span class="token number">1</span>    numbers <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        number <span class="token operator">=</span> k <span class="token operator">//</span> factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        k <span class="token operator">%=</span> factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        result <span class="token operator">+=</span> str<span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">del</span> numbers<span class="token punctuation">[</span>number<span class="token punctuation">]</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-80-链表向右循环移动k个位置"><a href="#2-80-链表向右循环移动k个位置" class="headerlink" title="2.80. 链表向右循环移动k个位置"></a>2.80. 链表向右循环移动k个位置</h3><p><a href="https://leetcode.com/problems/rotate-list/description/" target="_blank" rel="noopener">Leetcode 61. Rotate List</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type head: ListNode    :type k: int    :rtype: ListNode    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> head<span class="token punctuation">:</span>        <span class="token keyword">return</span> head    tail <span class="token operator">=</span> head    length <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">:</span>        tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>next        length <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> k <span class="token operator">%</span> length<span class="token punctuation">:</span>        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> head        step <span class="token operator">=</span> length <span class="token operator">-</span> k<span class="token operator">%</span>length <span class="token operator">-</span> <span class="token number">1</span>        new_head <span class="token operator">=</span> head        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>            new_head <span class="token operator">=</span> new_head<span class="token punctuation">.</span>next        head <span class="token operator">=</span> new_head<span class="token punctuation">.</span>next        new_head<span class="token punctuation">.</span>next <span class="token operator">=</span> None    <span class="token keyword">return</span> head</code></pre><h3 id="2-81-先序遍历和中序遍历构建二叉树"><a href="#2-81-先序遍历和中序遍历构建二叉树" class="headerlink" title="2.81. 先序遍历和中序遍历构建二叉树"></a>2.81. 先序遍历和中序遍历构建二叉树</h3><p><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/" target="_blank" rel="noopener">Leetcode 105. Construct Binary Tree from Preorder and Inorder Traversal</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type preorder: List[int]    :type inorder: List[int]    :rtype: TreeNode    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> preorder <span class="token operator">or</span> <span class="token operator">not</span> inorder<span class="token punctuation">:</span>        <span class="token keyword">return</span> None    node <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>preorder<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    index <span class="token operator">=</span> inorder<span class="token punctuation">.</span>index<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    node<span class="token punctuation">.</span>left <span class="token operator">=</span> buildTree<span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    node<span class="token punctuation">.</span>right <span class="token operator">=</span> buildTree<span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> node</code></pre><h3 id="2-82-中序遍历和后序遍历构建二叉树"><a href="#2-82-中序遍历和后序遍历构建二叉树" class="headerlink" title="2.82. 中序遍历和后序遍历构建二叉树"></a>2.82. 中序遍历和后序遍历构建二叉树</h3><p><a href="https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/" target="_blank" rel="noopener">Leetcode 106. Construct Binary Tree from Inorder and Postorder Traversal</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> postorder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type inorder: List[int]    :type postorder: List[int]    :rtype: TreeNode    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> inorder <span class="token operator">or</span> <span class="token operator">not</span> postorder<span class="token punctuation">:</span>        <span class="token keyword">return</span> None    node <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>postorder<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    index_inorder <span class="token operator">=</span> inorder<span class="token punctuation">.</span>index<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    node<span class="token punctuation">.</span>right <span class="token operator">=</span> buildTree<span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>index_inorder <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> postorder<span class="token punctuation">)</span>    node<span class="token punctuation">.</span>left <span class="token operator">=</span> buildTree<span class="token punctuation">(</span>inorder<span class="token punctuation">[</span><span class="token punctuation">:</span>index_inorder<span class="token punctuation">]</span><span class="token punctuation">,</span> postorder<span class="token punctuation">)</span>    <span class="token keyword">return</span> node</code></pre><h3 id="2-83-求杨辉三角第k行的值"><a href="#2-83-求杨辉三角第k行的值" class="headerlink" title="2.83. 求杨辉三角第k行的值"></a>2.83. 求杨辉三角第k行的值</h3><p><a href="https://leetcode.com/problems/pascals-triangle-ii/description/" target="_blank" rel="noopener">Leetcode 119. Pascal’s Triangle II</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getRow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rowIndex<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type rowIndex: int    :rtype: List[int]    """</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> result<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-84-克隆图"><a href="#2-84-克隆图" class="headerlink" title="2.84. 克隆图"></a>2.84. 克隆图</h3><p><a href="https://leetcode.com/problems/clone-graph/description/" target="_blank" rel="noopener">Leetcode 133. Clone Graph</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cloneGraph</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">clone</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> memory<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> node<span class="token punctuation">.</span>label <span class="token operator">not</span> <span class="token keyword">in</span> memory<span class="token punctuation">:</span>            copy <span class="token operator">=</span> UndirectedGraphNode<span class="token punctuation">(</span>node<span class="token punctuation">.</span>label<span class="token punctuation">)</span>            memory<span class="token punctuation">[</span>copy<span class="token punctuation">.</span>label<span class="token punctuation">]</span> <span class="token operator">=</span> copy            <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> node<span class="token punctuation">.</span>neighbors<span class="token punctuation">:</span>                copy<span class="token punctuation">.</span>neighbors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>clone<span class="token punctuation">(</span>neighbor<span class="token punctuation">,</span> memory<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> memory<span class="token punctuation">[</span>node<span class="token punctuation">.</span>label<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span>        <span class="token keyword">return</span> node    memory <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> clone<span class="token punctuation">(</span>node<span class="token punctuation">,</span> memory<span class="token punctuation">)</span></code></pre><h3 id="2-85-查找数组中的极大值元素"><a href="#2-85-查找数组中的极大值元素" class="headerlink" title="2.85. 查找数组中的极大值元素"></a>2.85. 查找数组中的极大值元素</h3><p><a href="https://leetcode.com/problems/find-peak-element/#/description" target="_blank" rel="noopener">Leetcode 162. Find Peak Element</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: int    """</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    low <span class="token operator">=</span> <span class="token number">0</span>    high <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">=</span> mid    <span class="token keyword">return</span> low</code></pre><h3 id="2-86-将数组合并拼接为最大的数"><a href="#2-86-将数组合并拼接为最大的数" class="headerlink" title="2.86. 将数组合并拼接为最大的数"></a>2.86. 将数组合并拼接为最大的数</h3><p><a href="https://leetcode.com/problems/largest-number/description/" target="_blank" rel="noopener">Leetcode 179. Largest Number</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">largestNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    strs <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">]</span>    strs<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">+</span> y <span class="token operator">&lt;</span> y <span class="token operator">+</span> x <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">+</span> y <span class="token operator">></span> y <span class="token operator">+</span> x <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'0'</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>strs<span class="token punctuation">)</span></code></pre><h3 id="2-87-计算完全二叉树的结点数"><a href="#2-87-计算完全二叉树的结点数" class="headerlink" title="2.87. 计算完全二叉树的结点数"></a>2.87. 计算完全二叉树的结点数</h3><p><a href="https://leetcode.com/problems/count-complete-tree-nodes/description/" target="_blank" rel="noopener">Leetcode 222. Count Complete Tree Nodes</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type root: TreeNode    :rtype: int    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    depth_left <span class="token operator">=</span> <span class="token number">0</span>    node_left <span class="token operator">=</span> root    <span class="token keyword">while</span> node_left<span class="token punctuation">:</span>        depth_left <span class="token operator">+=</span> <span class="token number">1</span>        node_left <span class="token operator">=</span> node_left<span class="token punctuation">.</span>left    depth_right <span class="token operator">=</span> <span class="token number">0</span>    node_right <span class="token operator">=</span> root    <span class="token keyword">while</span> node_right<span class="token punctuation">:</span>        depth_right <span class="token operator">+=</span> <span class="token number">1</span>        node_right <span class="token operator">=</span> node_right<span class="token punctuation">.</span>right    <span class="token keyword">if</span> depth_left <span class="token operator">==</span> depth_right<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">**</span> depth_left <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>countNodes<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>countNodes<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span></code></pre><h3 id="2-88-加减乘除（无括号）计算器"><a href="#2-88-加减乘除（无括号）计算器" class="headerlink" title="2.88. 加减乘除（无括号）计算器"></a>2.88. 加减乘除（无括号）计算器</h3><p><a href="https://leetcode.com/problems/basic-calculator-ii/description/" target="_blank" rel="noopener">Leetcode 227. Basic Calculator II</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calculate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type s: str    :rtype: int    """</span>    result <span class="token operator">=</span> <span class="token number">0</span>    pre_number <span class="token operator">=</span> <span class="token number">0</span>    pre_operator <span class="token operator">=</span> <span class="token string">'+'</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        current <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">:</span>            current <span class="token operator">=</span> current <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ord<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> ord<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> pre_operator <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> pre_number            pre_number <span class="token operator">=</span> current        <span class="token keyword">elif</span> pre_operator <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> pre_number            pre_number <span class="token operator">=</span> <span class="token operator">-</span>current        <span class="token keyword">elif</span> pre_operator <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>            pre_number <span class="token operator">*=</span> current        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> pre_number            pre_number <span class="token operator">/=</span> current            <span class="token keyword">if</span> temp <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">and</span> temp <span class="token operator">%</span> current<span class="token punctuation">:</span>                pre_number <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            pre_operator <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    result <span class="token operator">+=</span> pre_number    <span class="token keyword">return</span> result</code></pre><h3 id="2-89-加减（带括号）计算器"><a href="#2-89-加减（带括号）计算器" class="headerlink" title="2.89. 加减（带括号）计算器"></a>2.89. 加减（带括号）计算器</h3><p><a href="https://leetcode.com/problems/basic-calculator/description/" target="_blank" rel="noopener">Leetcode 224. Basic Calculator</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calculate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type s: str    :rtype: int    """</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token number">0</span>    current <span class="token operator">=</span> <span class="token number">0</span>    sign <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> letter <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">if</span> letter<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            current <span class="token operator">=</span> current <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ord<span class="token punctuation">(</span>letter<span class="token punctuation">)</span> <span class="token operator">-</span> ord<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> letter <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> sign <span class="token operator">*</span> current            current <span class="token operator">=</span> <span class="token number">0</span>            sign <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> letter <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">elif</span> letter <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">)</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sign<span class="token punctuation">)</span>            sign <span class="token operator">=</span> <span class="token number">1</span>            result <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">elif</span> letter <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> sign <span class="token operator">*</span> current            result <span class="token operator">*=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            result <span class="token operator">+=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            current <span class="token operator">=</span> <span class="token number">0</span>    result <span class="token operator">+=</span> sign <span class="token operator">*</span> current    <span class="token keyword">return</span> result</code></pre><h3 id="2-90-二叉搜索树中第k小的数"><a href="#2-90-二叉搜索树中第k小的数" class="headerlink" title="2.90. 二叉搜索树中第k小的数"></a>2.90. 二叉搜索树中第k小的数</h3><p><a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/" target="_blank" rel="noopener">Leetcode 230. Kth Smallest Element in a BST</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type root: TreeNode    :type k: int    :rtype: int    """</span>    self<span class="token punctuation">.</span>k <span class="token operator">=</span> k    self<span class="token punctuation">.</span>result <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">smallest</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>        smallest<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>k <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>k<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>result <span class="token operator">=</span> root<span class="token punctuation">.</span>val            <span class="token keyword">return</span>        smallest<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    smallest<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>result</code></pre><h3 id="2-91-求（元素可更新）数组指定区间的和"><a href="#2-91-求（元素可更新）数组指定区间的和" class="headerlink" title="2.91. 求（元素可更新）数组指定区间的和"></a>2.91. 求（元素可更新）数组指定区间的和</h3><p><a href="https://leetcode.com/problems/range-sum-query-mutable/description/" target="_blank" rel="noopener">Leetcode 307. Range Sum Query - Mutable</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">NumArray</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>start <span class="token operator">=</span> start            self<span class="token punctuation">.</span>end <span class="token operator">=</span> end            self<span class="token punctuation">.</span>left <span class="token operator">=</span> None            self<span class="token punctuation">.</span>right <span class="token operator">=</span> None            self<span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">build</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> start <span class="token operator">></span> end<span class="token punctuation">:</span>            <span class="token keyword">return</span> None        node <span class="token operator">=</span> self<span class="token punctuation">.</span>Node<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>        <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>            node<span class="token punctuation">.</span>sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>build<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> self<span class="token punctuation">.</span>build<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>sum <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>sum <span class="token operator">+</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>sum        <span class="token keyword">return</span> node    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        """</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> self<span class="token punctuation">.</span>build<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> i<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type i: int        :type val: int        :rtype: void        """</span>        <span class="token keyword">def</span> <span class="token function">upd</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> i<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>start <span class="token operator">==</span> node<span class="token punctuation">.</span>end<span class="token punctuation">:</span>                node<span class="token punctuation">.</span>sum <span class="token operator">=</span> val            <span class="token keyword">else</span><span class="token punctuation">:</span>                mid <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">+</span> node<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>                <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">:</span>                    upd<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> i<span class="token punctuation">,</span> val<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    upd<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> i<span class="token punctuation">,</span> val<span class="token punctuation">)</span>                node<span class="token punctuation">.</span>sum <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>sum <span class="token operator">+</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>sum        upd<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span> i<span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sumRange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type i: int        :type j: int        :rtype: int        """</span>        <span class="token keyword">def</span> <span class="token function">sum_ran</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>start <span class="token operator">==</span> start <span class="token operator">and</span> node<span class="token punctuation">.</span>end <span class="token operator">==</span> end<span class="token punctuation">:</span>                <span class="token keyword">return</span> node<span class="token punctuation">.</span>sum            mid <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">+</span> node<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> end <span class="token operator">&lt;=</span> mid<span class="token punctuation">:</span>                <span class="token keyword">return</span> sum_ran<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>            <span class="token keyword">if</span> start <span class="token operator">></span> mid<span class="token punctuation">:</span>                <span class="token keyword">return</span> sum_ran<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>            <span class="token keyword">return</span> sum_ran<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> sum_ran<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>        <span class="token keyword">return</span> sum_ran<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span></code></pre><h3 id="2-92-求数组中任意两个元素异或的最大值"><a href="#2-92-求数组中任意两个元素异或的最大值" class="headerlink" title="2.92. 求数组中任意两个元素异或的最大值"></a>2.92. 求数组中任意两个元素异或的最大值</h3><p><a href="https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/description/" target="_blank" rel="noopener">Leetcode 421. Maximum XOR of Two Numbers in an Array</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findMaximumXOR</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: int    """</span>    result <span class="token operator">=</span> <span class="token number">0</span>    mask <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mask <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i        nums_set <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            nums_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span>        current <span class="token operator">=</span> result <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums_set<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">^</span> current <span class="token keyword">in</span> nums_set<span class="token punctuation">:</span>                result <span class="token operator">=</span> current                <span class="token keyword">break</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-93-二叉搜索树的序列化和反序列化"><a href="#2-93-二叉搜索树的序列化和反序列化" class="headerlink" title="2.93. 二叉搜索树的序列化和反序列化"></a>2.93. 二叉搜索树的序列化和反序列化</h3><p><a href="https://leetcode.com/problems/serialize-and-deserialize-bst/description/" target="_blank" rel="noopener">Leetcode 449. Serialize and Deserialize BST</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Codec</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Encodes a tree to a single string.        :type root: TreeNode        :rtype: str        """</span>        result <span class="token operator">=</span> <span class="token string">''</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> root <span class="token operator">or</span> stack<span class="token punctuation">:</span>            <span class="token keyword">if</span> root<span class="token punctuation">:</span>                result <span class="token operator">+=</span> str<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left            <span class="token keyword">else</span><span class="token punctuation">:</span>                node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                root <span class="token operator">=</span> node<span class="token punctuation">.</span>right        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Decodes your encoded data to tree.        :type data: str        :rtype: TreeNode        """</span>        data <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> j<span class="token punctuation">:</span>                <span class="token keyword">return</span> None            node <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            split_index <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">while</span> split_index <span class="token operator">&lt;</span> j <span class="token operator">and</span> data<span class="token punctuation">[</span>split_index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                split_index <span class="token operator">+=</span> <span class="token number">1</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> construct<span class="token punctuation">(</span>data<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> split_index<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> construct<span class="token punctuation">(</span>data<span class="token punctuation">,</span> split_index<span class="token punctuation">,</span> j<span class="token punctuation">)</span>            <span class="token keyword">return</span> node        <span class="token keyword">return</span> construct<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-94-轮流取数判断先取者是否必胜"><a href="#2-94-轮流取数判断先取者是否必胜" class="headerlink" title="2.94. 轮流取数判断先取者是否必胜"></a>2.94. 轮流取数判断先取者是否必胜</h3><p><a href="https://leetcode.com/problems/predict-the-winner/description/" target="_blank" rel="noopener">Leetcode 486. Predict the Winner</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">PredictTheWinner</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: bool    """</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> first<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> start <span class="token operator">></span> end<span class="token punctuation">:</span>            <span class="token keyword">return</span> first <span class="token operator">>=</span> second        <span class="token keyword">return</span> <span class="token operator">not</span> predict<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> second<span class="token punctuation">,</span> first <span class="token operator">+</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span> \                <span class="token operator">or</span> <span class="token operator">not</span> predict<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> second<span class="token punctuation">,</span> first <span class="token operator">+</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> predict<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><h3 id="2-95-一串数加上分别加上加号或减号使其结果等于指定值"><a href="#2-95-一串数加上分别加上加号或减号使其结果等于指定值" class="headerlink" title="2.95. 一串数加上分别加上加号或减号使其结果等于指定值"></a>2.95. 一串数加上分别加上加号或减号使其结果等于指定值</h3><p><a href="https://leetcode.com/problems/target-sum/description/" target="_blank" rel="noopener">Leetcode 494. Target Sum</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> S<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :type S: int    :rtype: int    """</span>    sum_nums <span class="token operator">=</span> sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token keyword">if</span> S <span class="token operator">></span> sum_nums <span class="token operator">or</span> S <span class="token operator">&lt;</span> <span class="token operator">-</span>sum_nums<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    map <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> sum_nums <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    map<span class="token punctuation">[</span>sum_nums<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        new_map <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> sum_nums <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> sum_nums <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                new_map<span class="token punctuation">[</span>i <span class="token operator">+</span> num<span class="token punctuation">]</span> <span class="token operator">+=</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                new_map<span class="token punctuation">[</span>i <span class="token operator">-</span> num<span class="token punctuation">]</span> <span class="token operator">+=</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        map <span class="token operator">=</span> new_map    <span class="token keyword">return</span> map<span class="token punctuation">[</span>sum_nums <span class="token operator">+</span> S<span class="token punctuation">]</span></code></pre><h3 id="2-96-有序数组中除一个数仅出现一次外，其他数均出现两次，求这个数"><a href="#2-96-有序数组中除一个数仅出现一次外，其他数均出现两次，求这个数" class="headerlink" title="2.96. 有序数组中除一个数仅出现一次外，其他数均出现两次，求这个数"></a>2.96. 有序数组中除一个数仅出现一次外，其他数均出现两次，求这个数</h3><p><a href="https://leetcode.com/problems/single-element-in-a-sorted-array/description/" target="_blank" rel="noopener">Leetcode 540. Single Element in a Sorted Array</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: int    """</span>    low <span class="token operator">=</span> <span class="token number">0</span>    high <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>mid <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span></code></pre><h3 id="2-97-最长任意元素差最大为1的子序列"><a href="#2-97-最长任意元素差最大为1的子序列" class="headerlink" title="2.97. 最长任意元素差最大为1的子序列"></a>2.97. 最长任意元素差最大为1的子序列</h3><p><a href="https://leetcode.com/problems/longest-harmonious-subsequence/description/" target="_blank" rel="noopener">Leetcode 594. Longest Harmonious Subsequence</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findLHS</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: int    """</span>    memory <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">not</span> <span class="token keyword">in</span> memory<span class="token punctuation">:</span>            memory<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        memory<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> memory<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> key <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">in</span> memory<span class="token punctuation">:</span>            result <span class="token operator">=</span> max<span class="token punctuation">(</span>result<span class="token punctuation">,</span> value <span class="token operator">+</span> memory<span class="token punctuation">[</span>key <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-98-数组中寻找任意三个元素的最大积"><a href="#2-98-数组中寻找任意三个元素的最大积" class="headerlink" title="2.98. 数组中寻找任意三个元素的最大积"></a>2.98. 数组中寻找任意三个元素的最大积</h3><p><a href="https://leetcode.com/problems/maximum-product-of-three-numbers/description/" target="_blank" rel="noopener">Leetcode 628. Maximum Product of Three Numbers</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maximumProduct</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: int    """</span>    max_1 <span class="token operator">=</span> <span class="token operator">-</span>sys<span class="token punctuation">.</span>maxsize    max_2 <span class="token operator">=</span> <span class="token operator">-</span>sys<span class="token punctuation">.</span>maxsize    max_3 <span class="token operator">=</span> <span class="token operator">-</span>sys<span class="token punctuation">.</span>maxsize    min_1 <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize    min_2 <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">></span> max_1<span class="token punctuation">:</span>            max_3 <span class="token operator">=</span> max_2            max_2 <span class="token operator">=</span> max_1            max_1 <span class="token operator">=</span> num        <span class="token keyword">elif</span> num <span class="token operator">></span> max_2<span class="token punctuation">:</span>            max_3 <span class="token operator">=</span> max_2            max_2 <span class="token operator">=</span> num        <span class="token keyword">elif</span> num <span class="token operator">></span> max_3<span class="token punctuation">:</span>            max_3 <span class="token operator">=</span> num        <span class="token keyword">if</span> num <span class="token operator">&lt;</span> min_1<span class="token punctuation">:</span>            min_2 <span class="token operator">=</span> min_1            min_1 <span class="token operator">=</span> num        <span class="token keyword">elif</span> num <span class="token operator">&lt;</span> min_2<span class="token punctuation">:</span>            min_2 <span class="token operator">=</span> num    <span class="token keyword">return</span> max<span class="token punctuation">(</span>max_1 <span class="token operator">*</span> max_2 <span class="token operator">*</span> max_3<span class="token punctuation">,</span> max_1 <span class="token operator">*</span> min_1 <span class="token operator">*</span> min_2<span class="token punctuation">)</span></code></pre><h3 id="2-99-生成结点个数为n的所有二叉搜索树"><a href="#2-99-生成结点个数为n的所有二叉搜索树" class="headerlink" title="2.99. 生成结点个数为n的所有二叉搜索树"></a>2.99. 生成结点个数为n的所有二叉搜索树</h3><p><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/description/" target="_blank" rel="noopener">Leetcode 95. Unique Binary Search Trees II</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generateTrees</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: List[TreeNode]    """</span>    <span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> start <span class="token operator">></span> end<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            lefts <span class="token operator">=</span> generate<span class="token punctuation">(</span>start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            rights <span class="token operator">=</span> generate<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>            <span class="token keyword">for</span> left <span class="token keyword">in</span> lefts<span class="token punctuation">:</span>                <span class="token keyword">for</span> right <span class="token keyword">in</span> rights<span class="token punctuation">:</span>                    root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                    root<span class="token punctuation">.</span>left <span class="token operator">=</span> left                    root<span class="token punctuation">.</span>right <span class="token operator">=</span> right                    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> generate<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span></code></pre><h3 id="2-100-数组中除一个数仅出现一次外，其他数均出现三次，求这个数"><a href="#2-100-数组中除一个数仅出现一次外，其他数均出现三次，求这个数" class="headerlink" title="2.100. 数组中除一个数仅出现一次外，其他数均出现三次，求这个数"></a>2.100. 数组中除一个数仅出现一次外，其他数均出现三次，求这个数</h3><p><a href="https://leetcode.com/problems/single-number-ii/description/" target="_blank" rel="noopener">Leetcode 137. Single Number II</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: int    """</span>    x1 <span class="token operator">=</span> <span class="token number">0</span>    x2 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        x2 <span class="token operator">^</span><span class="token operator">=</span> x1 <span class="token operator">&amp;</span> num        x1 <span class="token operator">^</span><span class="token operator">=</span> num        mask <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span>x1 <span class="token operator">&amp;</span> x2<span class="token punctuation">)</span>        x2 <span class="token operator">&amp;</span><span class="token operator">=</span> mask        x1 <span class="token operator">&amp;</span><span class="token operator">=</span> mask    <span class="token keyword">return</span> x1</code></pre><h3 id="2-101-将一个数拆分为多个数的和，并使这些数的积最大"><a href="#2-101-将一个数拆分为多个数的和，并使这些数的积最大" class="headerlink" title="2.101. 将一个数拆分为多个数的和，并使这些数的积最大"></a>2.101. 将一个数拆分为多个数的和，并使这些数的积最大</h3><p><a href="https://leetcode.com/problems/integer-break/description/" target="_blank" rel="noopener">Leetcode 343. Integer Break</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">integerBreak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: int    """</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">4</span>    result <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">:</span>        n <span class="token operator">-=</span> <span class="token number">3</span>        result <span class="token operator">*=</span> <span class="token number">3</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        result <span class="token operator">*=</span> <span class="token number">4</span>    <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        result <span class="token operator">*=</span> <span class="token number">3</span>    <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        result <span class="token operator">*=</span> <span class="token number">2</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-102-轮流取数先取者是否必胜"><a href="#2-102-轮流取数先取者是否必胜" class="headerlink" title="2.102. 轮流取数先取者是否必胜"></a>2.102. 轮流取数先取者是否必胜</h3><p><a href="https://leetcode.com/problems/can-i-win/description/" target="_blank" rel="noopener">Leetcode 464. Can I Win</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">canIWin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> maxChoosableInteger<span class="token punctuation">,</span> desiredTotal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type maxChoosableInteger: int    :type desiredTotal: int    :rtype: bool    """</span>    <span class="token keyword">def</span> <span class="token function">to_key</span><span class="token punctuation">(</span>choosed<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> choosed<span class="token punctuation">:</span>            result <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">if</span> item<span class="token punctuation">:</span>                result <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">win</span><span class="token punctuation">(</span>choosed<span class="token punctuation">,</span> memory<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">:</span>        key <span class="token operator">=</span> to_key<span class="token punctuation">(</span>choosed<span class="token punctuation">)</span>        <span class="token keyword">if</span> key <span class="token keyword">in</span> memory<span class="token punctuation">:</span>            <span class="token keyword">return</span> memory<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>choosed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> choosed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                choosed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">if</span> total <span class="token operator">&lt;=</span> i <span class="token operator">or</span> <span class="token operator">not</span> win<span class="token punctuation">(</span>choosed<span class="token punctuation">,</span> memory<span class="token punctuation">,</span> total <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>                    memory<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                    choosed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>                choosed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>        memory<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> desiredTotal <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> maxChoosableInteger<span class="token punctuation">)</span> <span class="token operator">*</span> maxChoosableInteger <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">&lt;</span> desiredTotal<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> win<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>maxChoosableInteger <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> desiredTotal<span class="token punctuation">)</span></code></pre><h3 id="2-103-区间调度问题"><a href="#2-103-区间调度问题" class="headerlink" title="2.103. 区间调度问题"></a>2.103. 区间调度问题</h3><h4 id="2-103-1-最多区间调度"><a href="#2-103-1-最多区间调度" class="headerlink" title="2.103.1. 最多区间调度"></a>2.103.1. 最多区间调度</h4><p><a href="https://leetcode.com/problems/sum-of-square-numbers/description/" target="_blank" rel="noopener">Leetcode 633. Sum of Square Numbers</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maxNonoverlapIntervals</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type points: List[List[int]]    :rtype: int    """</span>    intervals<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> interval<span class="token punctuation">:</span> interval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    current_start <span class="token operator">=</span> <span class="token operator">-</span>sys<span class="token punctuation">.</span>maxsize    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> interval <span class="token keyword">in</span> intervals<span class="token punctuation">:</span>        <span class="token keyword">if</span> interval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> current_start<span class="token punctuation">:</span>            current_start <span class="token operator">=</span> interval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            result <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-104-寻找数组中是否存在nums-i-和nums-j-差的绝对值最大为t，i和j差的绝对值最大为k"><a href="#2-104-寻找数组中是否存在nums-i-和nums-j-差的绝对值最大为t，i和j差的绝对值最大为k" class="headerlink" title="2.104. 寻找数组中是否存在nums[i]和nums[j]差的绝对值最大为t，i和j差的绝对值最大为k"></a>2.104. 寻找数组中是否存在<code>nums[i]</code>和<code>nums[j]</code>差的绝对值最大为t，<code>i</code>和<code>j</code>差的绝对值最大为k</h3><p><a href="https://leetcode.com/problems/contains-duplicate-iii/description/" target="_blank" rel="noopener">Leetcode 220. Contains Duplicate III</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">containsNearbyAlmostDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :type k: int    :type t: int    :rtype: bool    """</span>    <span class="token keyword">if</span> k <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">or</span> t <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    buckets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        adjusted_num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">0x80000000</span>        bucket <span class="token operator">=</span> adjusted_num <span class="token operator">//</span> <span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> bucket <span class="token keyword">in</span> buckets \                <span class="token operator">or</span> <span class="token punctuation">(</span>bucket <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">in</span> buckets <span class="token operator">and</span> abs<span class="token punctuation">(</span>adjusted_num <span class="token operator">-</span> buckets<span class="token punctuation">[</span>bucket <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">)</span> \                <span class="token operator">or</span> <span class="token punctuation">(</span>bucket <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">in</span> buckets <span class="token operator">and</span> abs<span class="token punctuation">(</span>adjusted_num <span class="token operator">-</span> buckets<span class="token punctuation">[</span>bucket <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        buckets<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">=</span> adjusted_num        <span class="token keyword">if</span> i <span class="token operator">>=</span> k<span class="token punctuation">:</span>            <span class="token keyword">del</span> buckets<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h3 id="2-105-猜数游戏，猜错需要付钱，求确保猜中的最小代价"><a href="#2-105-猜数游戏，猜错需要付钱，求确保猜中的最小代价" class="headerlink" title="2.105. 猜数游戏，猜错需要付钱，求确保猜中的最小代价"></a>2.105. 猜数游戏，猜错需要付钱，求确保猜中的最小代价</h3><p><a href="https://leetcode.com/problems/guess-number-higher-or-lower-ii/description/" target="_blank" rel="noopener">Leetcode 375. Guess Number Higher or Lower II</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getMoneyAmount</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: int    """</span>    <span class="token keyword">def</span> <span class="token function">get_money</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> memory<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> start <span class="token operator">>=</span> end<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> memory<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> memory<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">]</span>        result <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            current <span class="token operator">=</span> i <span class="token operator">+</span> max<span class="token punctuation">(</span>get_money<span class="token punctuation">(</span>start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> memory<span class="token punctuation">)</span><span class="token punctuation">,</span> get_money<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> memory<span class="token punctuation">)</span><span class="token punctuation">)</span>            result <span class="token operator">=</span> min<span class="token punctuation">(</span>result<span class="token punctuation">,</span> current<span class="token punctuation">)</span>        memory<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> result        <span class="token keyword">return</span> result    memory <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> get_money<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> memory<span class="token punctuation">)</span></code></pre><h3 id="2-106-寻找数组中是否存在i-lt-j-lt-k使得ai-lt-ak-lt-aj"><a href="#2-106-寻找数组中是否存在i-lt-j-lt-k使得ai-lt-ak-lt-aj" class="headerlink" title="2.106. 寻找数组中是否存在i &lt; j &lt; k使得ai &lt; ak &lt; aj"></a>2.106. 寻找数组中是否存在<code>i &lt; j &lt; k</code>使得<code>ai &lt; ak &lt; aj</code></h3><p><a href="https://leetcode.com/problems/132-pattern/description/" target="_blank" rel="noopener">Leetcode 456. 132 Pattern</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find132pattern</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: bool    """</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> stack <span class="token operator">or</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">:</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>            <span class="token keyword">if</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            the_min <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> stack <span class="token operator">and</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> num<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> stack <span class="token operator">and</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>the_min<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h3 id="2-107-矩阵上从某一点经过最多N次移动出界外的路径总数"><a href="#2-107-矩阵上从某一点经过最多N次移动出界外的路径总数" class="headerlink" title="2.107. 矩阵上从某一点经过最多N次移动出界外的路径总数"></a>2.107. 矩阵上从某一点经过最多N次移动出界外的路径总数</h3><p><a href="https://leetcode.com/problems/out-of-boundary-paths/description/" target="_blank" rel="noopener">Leetcode 576. Out of Boundary Paths</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findPaths</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> N<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type m: int    :type n: int    :type N: int    :type i: int    :type j: int    :rtype: int    """</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    moves <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> b <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> move <span class="token keyword">in</span> moves<span class="token punctuation">:</span>                    row <span class="token operator">=</span> a <span class="token operator">+</span> move<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    col <span class="token operator">=</span> b <span class="token operator">+</span> move<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> row <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> col <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> row <span class="token operator">==</span> m <span class="token operator">or</span> col <span class="token operator">==</span> n<span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span>                        dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">1000000007</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span></code></pre><h3 id="2-108-每次操作删除一个字符，求使得两个字符串相同的最少操作次数"><a href="#2-108-每次操作删除一个字符，求使得两个字符串相同的最少操作次数" class="headerlink" title="2.108. 每次操作删除一个字符，求使得两个字符串相同的最少操作次数"></a>2.108. 每次操作删除一个字符，求使得两个字符串相同的最少操作次数</h3><p><a href="https://leetcode.com/problems/delete-operation-for-two-strings/description/" target="_blank" rel="noopener">Leetcode 583. Delete Operation for Two Strings</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word1<span class="token punctuation">,</span> word2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type word1: str    :type word2: str    :rtype: int    """</span>    l1 <span class="token operator">=</span> len<span class="token punctuation">(</span>word1<span class="token punctuation">)</span>    l2 <span class="token operator">=</span> len<span class="token punctuation">(</span>word2<span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>l2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>l1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> word1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> word2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    max_length <span class="token operator">=</span> dp<span class="token punctuation">[</span>l1<span class="token punctuation">]</span><span class="token punctuation">[</span>l2<span class="token punctuation">]</span>    <span class="token keyword">return</span> l1 <span class="token operator">-</span> max_length <span class="token operator">+</span> l2 <span class="token operator">-</span> max_length</code></pre><h3 id="2-109-求字符串的（不同下标）回文字串的数目"><a href="#2-109-求字符串的（不同下标）回文字串的数目" class="headerlink" title="2.109. 求字符串的（不同下标）回文字串的数目"></a>2.109. 求字符串的（不同下标）回文字串的数目</h3><p><a href="https://leetcode.com/problems/palindromic-substrings/description/" target="_blank" rel="noopener">Leetcode 647. Palindromic Substrings</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">countSubstrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type s: str    :rtype: int    """</span>    self<span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> right <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>result <span class="token operator">+=</span> <span class="token number">1</span>            left <span class="token operator">-=</span> <span class="token number">1</span>            right <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        count<span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        count<span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>result</code></pre><h3 id="2-110-打印二叉树"><a href="#2-110-打印二叉树" class="headerlink" title="2.110. 打印二叉树"></a>2.110. 打印二叉树</h3><p><a href="https://leetcode.com/problems/print-binary-tree/description/" target="_blank" rel="noopener">Leetcode 655. Print Binary Tree</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type root: TreeNode    :rtype: List[List[str]]    """</span>    <span class="token keyword">def</span> <span class="token function">get_depth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>get_depth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> get_depth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    depth <span class="token operator">=</span> get_depth<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> depth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">print_tree</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> row<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>result<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        row <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> root<span class="token punctuation">.</span>left<span class="token punctuation">:</span>            print_tree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> row<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> col <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>depth <span class="token operator">-</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>            print_tree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> row<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> col <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>depth <span class="token operator">-</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    print_tree<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> depth<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>depth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>result</code></pre><h3 id="2-111-是否可以仅改变一个元素，使得数组为单调递增数组"><a href="#2-111-是否可以仅改变一个元素，使得数组为单调递增数组" class="headerlink" title="2.111. 是否可以仅改变一个元素，使得数组为单调递增数组"></a>2.111. 是否可以仅改变一个元素，使得数组为单调递增数组</h3><p><a href="https://leetcode.com/problems/non-decreasing-array/description/" target="_blank" rel="noopener">Leetcode 665. Non-decreasing Array</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">checkPossibility</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: bool    """</span>    is_modified <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> is_modified<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            is_modified <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">or</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><h3 id="2-112-仅调换一次一个数的两个数字，求最大值"><a href="#2-112-仅调换一次一个数的两个数字，求最大值" class="headerlink" title="2.112. 仅调换一次一个数的两个数字，求最大值"></a>2.112. 仅调换一次一个数的两个数字，求最大值</h3><p><a href="https://leetcode.com/problems/maximum-swap/description/" target="_blank" rel="noopener">Leetcode 670. Maximum Swap</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maximumSwap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type num: int    :rtype: int    """</span>    num_str <span class="token operator">=</span> list<span class="token punctuation">(</span>str<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>    last_index <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>num_str<span class="token punctuation">)</span><span class="token punctuation">:</span>        last_index<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> i    <span class="token keyword">for</span> i<span class="token punctuation">,</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>num_str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> digit <span class="token keyword">in</span> <span class="token string">'987654321'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> digit <span class="token operator">></span> item <span class="token operator">and</span> digit <span class="token keyword">in</span> last_index <span class="token operator">and</span> last_index<span class="token punctuation">[</span>digit<span class="token punctuation">]</span> <span class="token operator">></span> i<span class="token punctuation">:</span>                num_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num_str<span class="token punctuation">[</span>last_index<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> num_str<span class="token punctuation">[</span>last_index<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> num_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">return</span> int<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num_str<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> num</code></pre><h3 id="2-113-检查带有通配符的括号序列是否合法"><a href="#2-113-检查带有通配符的括号序列是否合法" class="headerlink" title="2.113. 检查带有通配符的括号序列是否合法"></a>2.113. 检查带有通配符的括号序列是否合法</h3><p><a href="https://leetcode.com/problems/valid-parenthesis-string/description/" target="_blank" rel="noopener">Leetcode 678. Valid Parenthesis String</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">checkValidString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type s: str    :rtype: bool    """</span>    min_close <span class="token operator">=</span> <span class="token number">0</span>    max_close <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> letter <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">if</span> letter <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>            min_close <span class="token operator">+=</span> <span class="token number">1</span>            max_close <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> letter <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> min_close <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                min_close <span class="token operator">-=</span> <span class="token number">1</span>            max_close <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> max_close <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> min_close <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                min_close <span class="token operator">-=</span> <span class="token number">1</span>            max_close <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> min_close <span class="token operator">==</span> <span class="token number">0</span></code></pre><h3 id="2-114-两个有序数组的中位数"><a href="#2-114-两个有序数组的中位数" class="headerlink" title="2.114. 两个有序数组的中位数"></a>2.114. 两个有序数组的中位数</h3><p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/description/" target="_blank" rel="noopener">Leetcode 4. Median of Two Sorted Arrays</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums1: List[int]    :type nums2: List[int]    :rtype: float    """</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span> <span class="token operator">></span> len<span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>findMedianSortedArrays<span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> nums1<span class="token punctuation">)</span>    short_length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span>    long_length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums2<span class="token punctuation">)</span>    short_left <span class="token operator">=</span> <span class="token number">0</span>    short_right <span class="token operator">=</span> len<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span>    <span class="token keyword">while</span> short_left <span class="token operator">&lt;=</span> short_right<span class="token punctuation">:</span>        short_mid <span class="token operator">=</span> <span class="token punctuation">(</span>short_left <span class="token operator">+</span> short_right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        long_mid <span class="token operator">=</span> <span class="token punctuation">(</span>short_length <span class="token operator">+</span> long_length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> short_mid        <span class="token keyword">if</span> short_mid <span class="token operator">&lt;</span> short_length <span class="token operator">and</span> nums1<span class="token punctuation">[</span>short_mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>long_mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            short_left <span class="token operator">=</span> short_mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">elif</span> short_mid <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> nums1<span class="token punctuation">[</span>short_mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>long_mid<span class="token punctuation">]</span><span class="token punctuation">:</span>            short_right <span class="token operator">=</span> short_mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            max_left <span class="token operator">=</span> None            <span class="token keyword">if</span> short_mid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                max_left <span class="token operator">=</span> nums2<span class="token punctuation">[</span>long_mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">elif</span> long_mid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                max_left <span class="token operator">=</span> nums1<span class="token punctuation">[</span>short_mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                max_left <span class="token operator">=</span> max<span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>short_mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span>long_mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>short_length <span class="token operator">+</span> long_length<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> max_left            min_right <span class="token operator">=</span> None            <span class="token keyword">if</span> short_mid <span class="token operator">==</span> short_length<span class="token punctuation">:</span>                min_right <span class="token operator">=</span> nums2<span class="token punctuation">[</span>long_mid<span class="token punctuation">]</span>            <span class="token keyword">elif</span> long_mid <span class="token operator">==</span> long_length<span class="token punctuation">:</span>                min_right <span class="token operator">=</span> nums1<span class="token punctuation">[</span>short_mid<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                min_right <span class="token operator">=</span> min<span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>short_mid<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span>long_mid<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>max_left <span class="token operator">+</span> min_right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span></code></pre><h3 id="2-115-带有-和-的正则表达式匹配"><a href="#2-115-带有-和-的正则表达式匹配" class="headerlink" title="2.115. 带有.和*的正则表达式匹配"></a>2.115. 带有<code>.</code>和<code>*</code>的正则表达式匹配</h3><p><a href="https://leetcode.com/problems/regular-expression-matching/description/" target="_blank" rel="noopener">Leetcode 10. Regular Expression Matching</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type s: str    :type p: str    :rtype: bool    """</span>    length_s <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    length_p <span class="token operator">=</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>length_p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length_s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length_s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length_p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">and</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">and</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length_s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length_p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">or</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">and</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">or</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>length_s<span class="token punctuation">]</span><span class="token punctuation">[</span>length_p<span class="token punctuation">]</span></code></pre><h3 id="2-116-合并多个有序链表"><a href="#2-116-合并多个有序链表" class="headerlink" title="2.116. 合并多个有序链表"></a>2.116. 合并多个有序链表</h3><p><a href="https://leetcode.com/problems/merge-k-sorted-lists/description/" target="_blank" rel="noopener">Leetcode 23. Merge k Sorted Lists</a></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">def</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lists<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type lists: List[ListNode]    :rtype: ListNode    """</span>    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>            <span class="token keyword">return</span> lists<span class="token punctuation">[</span>start<span class="token punctuation">]</span>        <span class="token keyword">if</span> start <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            list_1 <span class="token operator">=</span> partition<span class="token punctuation">(</span>lists<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>            list_2 <span class="token operator">=</span> partition<span class="token punctuation">(</span>lists<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>            <span class="token keyword">return</span> merge<span class="token punctuation">(</span>list_1<span class="token punctuation">,</span> list_2<span class="token punctuation">)</span>        <span class="token keyword">return</span> None    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>list_1<span class="token punctuation">,</span> list_2<span class="token punctuation">)</span><span class="token punctuation">:</span>        fake_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        current <span class="token operator">=</span> fake_head        <span class="token keyword">while</span> list_1 <span class="token operator">and</span> list_2<span class="token punctuation">:</span>            <span class="token keyword">if</span> list_1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> list_2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                current<span class="token punctuation">.</span>next <span class="token operator">=</span> list_1                list_1 <span class="token operator">=</span> list_1<span class="token punctuation">.</span>next            <span class="token keyword">else</span><span class="token punctuation">:</span>                current<span class="token punctuation">.</span>next <span class="token operator">=</span> list_2                list_2 <span class="token operator">=</span> list_2<span class="token punctuation">.</span>next            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next        current<span class="token punctuation">.</span>next <span class="token operator">=</span> list_1 <span class="token keyword">if</span> list_1 <span class="token keyword">else</span> list_2        <span class="token keyword">return</span> fake_head<span class="token punctuation">.</span>next    <span class="token keyword">return</span> partition<span class="token punctuation">(</span>lists<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="2-117-最长合法括号字串"><a href="#2-117-最长合法括号字串" class="headerlink" title="2.117. 最长合法括号字串"></a>2.117. 最长合法括号字串</h3><p><a href="https://leetcode.com/problems/longest-valid-parentheses/description/" target="_blank" rel="noopener">Leetcode 32. Longest Valid Parentheses</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type s: str    :rtype: int    """</span>    left <span class="token operator">=</span> <span class="token number">0</span>    right <span class="token operator">=</span> <span class="token number">0</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>            left <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            right <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> left <span class="token operator">==</span> right<span class="token punctuation">:</span>            result <span class="token operator">=</span> max<span class="token punctuation">(</span>result<span class="token punctuation">,</span> left <span class="token operator">+</span> right<span class="token punctuation">)</span>        <span class="token keyword">elif</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            left <span class="token operator">=</span> <span class="token number">0</span>            right <span class="token operator">=</span> <span class="token number">0</span>    left <span class="token operator">=</span> <span class="token number">0</span>    right <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> reversed<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>            left <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            right <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> left <span class="token operator">==</span> right<span class="token punctuation">:</span>            result <span class="token operator">=</span> max<span class="token punctuation">(</span>result<span class="token punctuation">,</span> left <span class="token operator">+</span> right<span class="token punctuation">)</span>        <span class="token keyword">elif</span> left <span class="token operator">></span> right<span class="token punctuation">:</span>            left <span class="token operator">=</span> <span class="token number">0</span>            right <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-118-带有-和-的正则表达式匹配"><a href="#2-118-带有-和-的正则表达式匹配" class="headerlink" title="2.118. 带有?和*的正则表达式匹配"></a>2.118. 带有<code>?</code>和<code>*</code>的正则表达式匹配</h3><p><a href="https://leetcode.com/problems/wildcard-matching/description/" target="_blank" rel="noopener">Leetcode 44. Wildcard Matching</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type s: str    :type p: str    :rtype: bool    """</span>    length_s <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    length_p <span class="token operator">=</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>length_p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length_s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length_p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length_s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length_p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">or</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">or</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'?'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>length_s<span class="token punctuation">]</span><span class="token punctuation">[</span>length_p<span class="token punctuation">]</span></code></pre><h3 id="2-119-检查字符串是否是合法数字"><a href="#2-119-检查字符串是否是合法数字" class="headerlink" title="2.119. 检查字符串是否是合法数字"></a>2.119. 检查字符串是否是合法数字</h3><p><a href="https://leetcode.com/problems/valid-number/description/" target="_blank" rel="noopener">Leetcode 65. Valid Number</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type s: str    :rtype: bool    """</span>    s <span class="token operator">=</span> s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    has_dot <span class="token operator">=</span> <span class="token boolean">False</span>    has_e <span class="token operator">=</span> <span class="token boolean">False</span>    has_number <span class="token operator">=</span> <span class="token boolean">False</span>    has_number_after_e <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> letter <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> letter <span class="token keyword">in</span> <span class="token string">'0123456789'</span><span class="token punctuation">:</span>            has_number <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> has_e<span class="token punctuation">:</span>                has_number_after_e <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">elif</span> letter <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> has_dot <span class="token operator">or</span> has_e<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            has_dot <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">elif</span> letter <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> has_e <span class="token operator">or</span> <span class="token operator">not</span> has_number<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            has_e <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">elif</span> letter <span class="token keyword">in</span> <span class="token string">'+-'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'e'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">not</span> has_e <span class="token operator">^</span> has_number_after_e<span class="token punctuation">)</span> <span class="token operator">and</span> has_number</code></pre><h3 id="2-120-通过插入、删除和替换，最少需要多少次操作可以使得两个字符串相同"><a href="#2-120-通过插入、删除和替换，最少需要多少次操作可以使得两个字符串相同" class="headerlink" title="2.120. 通过插入、删除和替换，最少需要多少次操作可以使得两个字符串相同"></a>2.120. 通过插入、删除和替换，最少需要多少次操作可以使得两个字符串相同</h3><p><a href="https://leetcode.com/problems/edit-distance/description/" target="_blank" rel="noopener">Leetcode 72. Edit Distance</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word1<span class="token punctuation">,</span> word2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type word1: str    :type word2: str    :rtype: int    """</span>    m <span class="token operator">=</span> len<span class="token punctuation">(</span>word1<span class="token punctuation">)</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>word2<span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> word1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> word2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span></code></pre><h3 id="2-121-柱状图中的最大矩形"><a href="#2-121-柱状图中的最大矩形" class="headerlink" title="2.121. 柱状图中的最大矩形"></a>2.121. 柱状图中的最大矩形</h3><p><a href="https://leetcode.com/problems/largest-rectangle-in-histogram/description/" target="_blank" rel="noopener">Leetcode 84. Largest Rectangle in Histogram</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type heights: List[int]    :rtype: int    """</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> stack <span class="token operator">and</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            index <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            current <span class="token operator">=</span> heights<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> stack <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            result <span class="token operator">=</span> max<span class="token punctuation">(</span>result<span class="token punctuation">,</span> current<span class="token punctuation">)</span>        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> stack<span class="token punctuation">:</span>        index <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        current <span class="token operator">=</span> heights<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> stack <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> max<span class="token punctuation">(</span>result<span class="token punctuation">,</span> current<span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-122-矩阵中由1组成的最大矩阵"><a href="#2-122-矩阵中由1组成的最大矩阵" class="headerlink" title="2.122. 矩阵中由1组成的最大矩阵"></a>2.122. 矩阵中由1组成的最大矩阵</h3><p><a href="https://leetcode.com/problems/maximal-rectangle/description/" target="_blank" rel="noopener">Leetcode 85. Maximal Rectangle</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maximalRectangle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type matrix: List[List[str]]    :rtype: int    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> matrix<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    heights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> matrix<span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> stack <span class="token operator">and</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                index <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                current <span class="token operator">=</span> heights<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> stack <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                result <span class="token operator">=</span> max<span class="token punctuation">(</span>result<span class="token punctuation">,</span> current<span class="token punctuation">)</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            index <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            current <span class="token operator">=</span> heights<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> stack <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            result <span class="token operator">=</span> max<span class="token punctuation">(</span>result<span class="token punctuation">,</span> current<span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-123-判断字符串是否由给定的两个字符串组合而成"><a href="#2-123-判断字符串是否由给定的两个字符串组合而成" class="headerlink" title="2.123. 判断字符串是否由给定的两个字符串组合而成"></a>2.123. 判断字符串是否由给定的两个字符串组合而成</h3><p><a href="https://leetcode.com/problems/interleaving-string/description/" target="_blank" rel="noopener">Leetcode 97. Interleaving String</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isInterleave</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type s1: str    :type s2: str    :type s3: str    :rtype: bool    """</span>    length_1 <span class="token operator">=</span> len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    length_2 <span class="token operator">=</span> len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">!=</span> len<span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> length_2 <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length_1<span class="token punctuation">)</span><span class="token punctuation">]</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length_1<span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> s1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s3<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length_2<span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> s2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s3<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length_1<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length_2<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">and</span> s1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s3<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> s2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s3<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>length_1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>length_2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h3 id="2-124-一个字符串有多少个子序列可以组成另一个字符串"><a href="#2-124-一个字符串有多少个子序列可以组成另一个字符串" class="headerlink" title="2.124. 一个字符串有多少个子序列可以组成另一个字符串"></a>2.124. 一个字符串有多少个子序列可以组成另一个字符串</h3><p><a href="https://leetcode.com/problems/distinct-subsequences/description/" target="_blank" rel="noopener">Leetcode 115. Distinct Subsequences</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">numDistinct</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type s: str    :type t: str    :rtype: int    """</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> t<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h3 id="2-125-二叉树上最大（不需要经过根结点）路径和"><a href="#2-125-二叉树上最大（不需要经过根结点）路径和" class="headerlink" title="2.125. 二叉树上最大（不需要经过根结点）路径和"></a>2.125. 二叉树上最大（不需要经过根结点）路径和</h3><p><a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/description/" target="_blank" rel="noopener">Leetcode 124. Binary Tree Maximum Path Sum</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type root: TreeNode    :rtype: int    """</span>    <span class="token keyword">def</span> <span class="token function">path_sum</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>        left<span class="token punctuation">,</span> result <span class="token operator">=</span> path_sum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> result<span class="token punctuation">)</span>        left <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span>        right<span class="token punctuation">,</span> result <span class="token operator">=</span> path_sum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> result<span class="token punctuation">)</span>        right <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>        result <span class="token operator">=</span> max<span class="token punctuation">(</span>result<span class="token punctuation">,</span> left <span class="token operator">+</span> right <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> result    <span class="token keyword">return</span> path_sum<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">-</span>sys<span class="token punctuation">.</span>maxsize<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><h3 id="2-126-求将字符串切分为回文字串需要的最少切分次数"><a href="#2-126-求将字符串切分为回文字串需要的最少切分次数" class="headerlink" title="2.126. 求将字符串切分为回文字串需要的最少切分次数"></a>2.126. 求将字符串切分为回文字串需要的最少切分次数</h3><p><a href="https://leetcode.com/problems/palindrome-partitioning-ii/description/" target="_blank" rel="noopener">Leetcode 132. Palindrome Partitioning II</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">minCut</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type s: str    :rtype: int    """</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    cuts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> length    palindrome <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> length <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        current <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">or</span> palindrome<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                palindrome<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                current <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> min<span class="token punctuation">(</span>current<span class="token punctuation">,</span> cuts<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        cuts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> current    <span class="token keyword">return</span> cuts<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h3 id="2-127-二维坐标系下一条线上最多多少个点"><a href="#2-127-二维坐标系下一条线上最多多少个点" class="headerlink" title="2.127. 二维坐标系下一条线上最多多少个点"></a>2.127. 二维坐标系下一条线上最多多少个点</h3><p><a href="https://leetcode.com/problems/max-points-on-a-line/description/" target="_blank" rel="noopener">Leetcode 149. Max Points on a Line</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maxPoints</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type points: List[Point]    :rtype: int    """</span>    <span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> b<span class="token punctuation">:</span>                a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">%</span> b            <span class="token keyword">return</span> a        c <span class="token operator">=</span> gcd<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        a <span class="token operator">/=</span> c        b <span class="token operator">/=</span> c        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">|</span> b    <span class="token keyword">if</span> len<span class="token punctuation">(</span>points<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>points<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> current <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">:</span>        same_point <span class="token operator">=</span> <span class="token number">1</span>        same_vertical_line <span class="token operator">=</span> <span class="token number">0</span>        memory <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            point <span class="token operator">=</span> points<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token keyword">if</span> current<span class="token punctuation">.</span>x <span class="token operator">==</span> point<span class="token punctuation">.</span>x <span class="token operator">and</span> current<span class="token punctuation">.</span>y <span class="token operator">==</span> point<span class="token punctuation">.</span>y<span class="token punctuation">:</span>                same_point <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> current<span class="token punctuation">.</span>x <span class="token operator">==</span> point<span class="token punctuation">.</span>x<span class="token punctuation">:</span>                same_vertical_line <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                key <span class="token operator">=</span> transform<span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">-</span> current<span class="token punctuation">.</span>y<span class="token punctuation">,</span> point<span class="token punctuation">.</span>x <span class="token operator">-</span> current<span class="token punctuation">.</span>x<span class="token punctuation">)</span>                <span class="token keyword">if</span> key <span class="token operator">not</span> <span class="token keyword">in</span> memory<span class="token punctuation">:</span>                    memory<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                memory<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        result <span class="token operator">=</span> max<span class="token punctuation">(</span>result<span class="token punctuation">,</span> same_vertical_line <span class="token operator">+</span> same_point<span class="token punctuation">)</span>        <span class="token keyword">if</span> memory<span class="token punctuation">:</span>            result <span class="token operator">=</span> max<span class="token punctuation">(</span>result<span class="token punctuation">,</span> max<span class="token punctuation">(</span>memory<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> same_point<span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-128-股票交易求最大收益，最多可以进行k次交易"><a href="#2-128-股票交易求最大收益，最多可以进行k次交易" class="headerlink" title="2.128. 股票交易求最大收益，最多可以进行k次交易"></a>2.128. 股票交易求最大收益，最多可以进行k次交易</h3><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/description/" target="_blank" rel="noopener">Leetcode 188. Best Time to Buy and Sell Stock IV</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">,</span> prices<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type k: int    :type prices: List[int]    :rtype: int    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> prices<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span> k <span class="token operator">>=</span> len<span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> result    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>prices<span class="token punctuation">)</span>    <span class="token keyword">for</span> time <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        current <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            current <span class="token operator">=</span> max<span class="token punctuation">(</span>current<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> current<span class="token punctuation">)</span>    <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">)</span></code></pre><h3 id="2-129-在字符串前插入一些字符使得字符串为回文字符串、"><a href="#2-129-在字符串前插入一些字符使得字符串为回文字符串、" class="headerlink" title="2.129. 在字符串前插入一些字符使得字符串为回文字符串、"></a>2.129. 在字符串前插入一些字符使得字符串为回文字符串、</h3><p><a href="https://leetcode.com/problems/shortest-palindrome/description/" target="_blank" rel="noopener">Leetcode 214. Shortest Palindrome</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">shortestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type s: str    :rtype: str    """</span>    reverse <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>reverse<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> reverse<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s</code></pre><h3 id="2-130-计算从1到n中含有数字1的数的个数"><a href="#2-130-计算从1到n中含有数字1的数的个数" class="headerlink" title="2.130. 计算从1到n中含有数字1的数的个数"></a>2.130. 计算从1到n中含有数字1的数的个数</h3><p><a href="https://leetcode.com/problems/number-of-digit-one/description/" target="_blank" rel="noopener">Leetcode 233. Number of Digit One</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">countDigitOne</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: int    """</span>    result <span class="token operator">=</span> <span class="token number">0</span>    times <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> times <span class="token operator">&lt;=</span> n<span class="token punctuation">:</span>        a <span class="token operator">=</span> n <span class="token operator">//</span> times        b <span class="token operator">=</span> n <span class="token operator">%</span> times        <span class="token keyword">if</span> a <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> a <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">*</span> times        <span class="token keyword">elif</span> a <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> a <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">*</span> times <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> times        times <span class="token operator">*=</span> <span class="token number">10</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-131-移动窗口求每个窗口元素最大值"><a href="#2-131-移动窗口求每个窗口元素最大值" class="headerlink" title="2.131. 移动窗口求每个窗口元素最大值"></a>2.131. 移动窗口求每个窗口元素最大值</h3><p><a href="https://leetcode.com/problems/sliding-window-maximum/description/" target="_blank" rel="noopener">Leetcode 239. Sliding Window Maximum</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :type k: int    :rtype: List[int]    """</span>    que <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> que <span class="token operator">and</span> que<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> i <span class="token operator">-</span> k<span class="token punctuation">:</span>            que<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> que <span class="token operator">and</span> nums<span class="token punctuation">[</span>que<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>            que<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        que<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> k<span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>que<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-132-数字转换为英文单词组合"><a href="#2-132-数字转换为英文单词组合" class="headerlink" title="2.132. 数字转换为英文单词组合"></a>2.132. 数字转换为英文单词组合</h3><p><a href="https://leetcode.com/problems/integer-to-english-words/description/" target="_blank" rel="noopener">Leetcode 273. Integer to English Words</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">numberToWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type num: int    :rtype: str    """</span>    <span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        LESS_THAN_20 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">,</span> <span class="token string">"Four"</span><span class="token punctuation">,</span> <span class="token string">"Five"</span><span class="token punctuation">,</span> <span class="token string">"Six"</span><span class="token punctuation">,</span> <span class="token string">"Seven"</span><span class="token punctuation">,</span> <span class="token string">"Eight"</span><span class="token punctuation">,</span> <span class="token string">"Nine"</span><span class="token punctuation">,</span> <span class="token string">"Ten"</span><span class="token punctuation">,</span> <span class="token string">"Eleven"</span><span class="token punctuation">,</span>                        <span class="token string">"Twelve"</span><span class="token punctuation">,</span> <span class="token string">"Thirteen"</span><span class="token punctuation">,</span> <span class="token string">"Fourteen"</span><span class="token punctuation">,</span> <span class="token string">"Fifteen"</span><span class="token punctuation">,</span> <span class="token string">"Sixteen"</span><span class="token punctuation">,</span> <span class="token string">"Seventeen"</span><span class="token punctuation">,</span> <span class="token string">"Eighteen"</span><span class="token punctuation">,</span> <span class="token string">"Nineteen"</span><span class="token punctuation">]</span>        TENS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"Ten"</span><span class="token punctuation">,</span> <span class="token string">"Twenty"</span><span class="token punctuation">,</span> <span class="token string">"Thirty"</span><span class="token punctuation">,</span> <span class="token string">"Forty"</span><span class="token punctuation">,</span> <span class="token string">"Fifty"</span><span class="token punctuation">,</span> <span class="token string">"Sixty"</span><span class="token punctuation">,</span> <span class="token string">"Seventy"</span><span class="token punctuation">,</span> <span class="token string">"Eighty"</span><span class="token punctuation">,</span> <span class="token string">"Ninety"</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">''</span>        <span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> LESS_THAN_20<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span>        <span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> TENS<span class="token punctuation">[</span>num <span class="token operator">//</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> convert<span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> LESS_THAN_20<span class="token punctuation">[</span>num <span class="token operator">//</span> <span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' Hundred '</span> <span class="token operator">+</span> convert<span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span>    THOUSANDS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"Thousand"</span><span class="token punctuation">,</span> <span class="token string">"Million"</span><span class="token punctuation">,</span> <span class="token string">"Billion"</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Zero'</span>    i <span class="token operator">=</span> <span class="token number">0</span>    result <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">while</span> num<span class="token punctuation">:</span>        slice <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">1000</span>        <span class="token keyword">if</span> slice<span class="token punctuation">:</span>            result <span class="token operator">=</span> convert<span class="token punctuation">(</span>slice<span class="token punctuation">)</span> <span class="token operator">+</span> THOUSANDS<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> result        num <span class="token operator">//=</span> <span class="token number">1000</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-133-二叉树的序列化和反序列化"><a href="#2-133-二叉树的序列化和反序列化" class="headerlink" title="2.133. 二叉树的序列化和反序列化"></a>2.133. 二叉树的序列化和反序列化</h3><p><a href="https://leetcode.com/problems/integer-to-english-words/description/" target="_blank" rel="noopener">Leetcode 273. Integer to English Words</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Codec</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Encodes a tree to a single string.        :type root: TreeNode        :rtype: str        """</span>        <span class="token keyword">def</span> <span class="token function">serial</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>                serial<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> result<span class="token punctuation">)</span>                serial<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> result<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        serial<span class="token punctuation">(</span>root<span class="token punctuation">,</span> result<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Decodes your encoded data to tree.        :type data: str        :rtype: TreeNode        """</span>        <span class="token keyword">def</span> <span class="token function">deserail</span><span class="token punctuation">(</span>que<span class="token punctuation">)</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> que<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> None            node <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>int<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> deserail<span class="token punctuation">(</span>que<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> deserail<span class="token punctuation">(</span>que<span class="token punctuation">)</span>            <span class="token keyword">return</span> node        que <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span>data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> deserail<span class="token punctuation">(</span>que<span class="token punctuation">)</span></code></pre><h3 id="2-134-移除字符串中的重复字符，并使得最终结果字典序最小"><a href="#2-134-移除字符串中的重复字符，并使得最终结果字典序最小" class="headerlink" title="2.134. 移除字符串中的重复字符，并使得最终结果字典序最小"></a>2.134. 移除字符串中的重复字符，并使得最终结果字典序最小</h3><p><a href="https://leetcode.com/problems/remove-duplicate-letters/description/" target="_blank" rel="noopener">Leetcode 316. Remove Duplicate Letters</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">removeDuplicateLetters</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type s: str    :rtype: str    """</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    counts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">128</span>    <span class="token keyword">for</span> letter <span class="token keyword">in</span> s<span class="token punctuation">:</span>        counts<span class="token punctuation">[</span>ord<span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    exists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">128</span>    <span class="token keyword">for</span> letter <span class="token keyword">in</span> s<span class="token punctuation">:</span>        letter_in_int <span class="token operator">=</span> ord<span class="token punctuation">(</span>letter<span class="token punctuation">)</span>        counts<span class="token punctuation">[</span>letter_in_int<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">if</span> exists<span class="token punctuation">[</span>letter_in_int<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">while</span> stack <span class="token operator">and</span> letter_in_int <span class="token operator">&lt;</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> counts<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            exists<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>letter_in_int<span class="token punctuation">)</span>        exists<span class="token punctuation">[</span>letter_in_int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span>chr<span class="token punctuation">,</span> stack<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-135-信封俄罗斯套娃"><a href="#2-135-信封俄罗斯套娃" class="headerlink" title="2.135. 信封俄罗斯套娃"></a>2.135. 信封俄罗斯套娃</h3><p><a href="https://leetcode.com/problems/russian-doll-envelopes/description/" target="_blank" rel="noopener">Leetcode 354. Russian Doll Envelopes</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maxEnvelopes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> envelopes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type envelopes: List[List[int]]    :rtype: int    """</span>    envelopes<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>envelopes<span class="token punctuation">)</span>    current_length <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> envelope <span class="token keyword">in</span> envelopes<span class="token punctuation">:</span>        low <span class="token operator">=</span> <span class="token number">0</span>        high <span class="token operator">=</span> current_length        value <span class="token operator">=</span> envelope<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">:</span>                low <span class="token operator">=</span> mid                <span class="token keyword">break</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">:</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                high <span class="token operator">=</span> mid        dp<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> value        <span class="token keyword">if</span> low <span class="token operator">==</span> current_length<span class="token punctuation">:</span>            current_length <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> current_length</code></pre><h3 id="2-136-小矩阵是否能完整拼接为大矩阵"><a href="#2-136-小矩阵是否能完整拼接为大矩阵" class="headerlink" title="2.136. 小矩阵是否能完整拼接为大矩阵"></a>2.136. 小矩阵是否能完整拼接为大矩阵</h3><p><a href="https://leetcode.com/problems/perfect-rectangle/description/" target="_blank" rel="noopener">Leetcode 391. Perfect Rectangle</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isRectangleCover</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rectangles<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type rectangles: List[List[int]]    :rtype: bool    """</span>    x1 <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize    y1 <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize    x2 <span class="token operator">=</span> <span class="token operator">-</span>sys<span class="token punctuation">.</span>maxsize    y2 <span class="token operator">=</span> <span class="token operator">-</span>sys<span class="token punctuation">.</span>maxsize    got <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    sum_up <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> rectangle <span class="token keyword">in</span> rectangles<span class="token punctuation">:</span>        a1 <span class="token operator">=</span> rectangle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        b1 <span class="token operator">=</span> rectangle<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        a2 <span class="token operator">=</span> rectangle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        b2 <span class="token operator">=</span> rectangle<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>        x1 <span class="token operator">=</span> min<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> a1<span class="token punctuation">)</span>        y1 <span class="token operator">=</span> min<span class="token punctuation">(</span>y1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span>        x2 <span class="token operator">=</span> max<span class="token punctuation">(</span>x2<span class="token punctuation">,</span> a2<span class="token punctuation">)</span>        y2 <span class="token operator">=</span> max<span class="token punctuation">(</span>y2<span class="token punctuation">,</span> b2<span class="token punctuation">)</span>        sum_up <span class="token operator">+=</span> <span class="token punctuation">(</span>a2 <span class="token operator">-</span> a1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b2 <span class="token operator">-</span> b1<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                key <span class="token operator">=</span> str<span class="token punctuation">(</span>rectangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>rectangle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> key <span class="token keyword">in</span> got<span class="token punctuation">:</span>                    got<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>key<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    got<span class="token punctuation">.</span>add<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>got<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span> \            <span class="token operator">and</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>y1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">in</span> got \            <span class="token operator">and</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>y2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">in</span> got \            <span class="token operator">and</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>x2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>y1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">in</span> got \            <span class="token operator">and</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>x2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>y2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">in</span> got \            <span class="token operator">and</span> sum_up <span class="token operator">==</span> <span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y2 <span class="token operator">-</span> y1<span class="token punctuation">)</span></code></pre><h3 id="2-137-将数组划分为m份，使得每份和的最大值最小"><a href="#2-137-将数组划分为m份，使得每份和的最大值最小" class="headerlink" title="2.137. 将数组划分为m份，使得每份和的最大值最小"></a>2.137. 将数组划分为m份，使得每份和的最大值最小</h3><p><a href="https://leetcode.com/problems/split-array-largest-sum/description/" target="_blank" rel="noopener">Leetcode 410. Split Array Largest Sum</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">splitArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :type m: int    :rtype: int    """</span>    <span class="token keyword">def</span> <span class="token function">cut</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> <span class="token number">1</span>        current_sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            current_sum <span class="token operator">+=</span> num            <span class="token keyword">if</span> current_sum <span class="token operator">></span> mid<span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>                current_sum <span class="token operator">=</span> num                <span class="token keyword">if</span> count <span class="token operator">></span> m<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    low <span class="token operator">=</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    high <span class="token operator">=</span> sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        cuts <span class="token operator">=</span> cut<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> m<span class="token punctuation">)</span>        <span class="token keyword">if</span> cuts<span class="token punctuation">:</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> low</code></pre><h3 id="2-138-在1到n中寻找字典序第k小的数"><a href="#2-138-在1到n中寻找字典序第k小的数" class="headerlink" title="2.138. 在1到n中寻找字典序第k小的数"></a>2.138. 在1到n中寻找字典序第k小的数</h3><p><a href="https://leetcode.com/problems/k-th-smallest-in-lexicographical-order/description/" target="_blank" rel="noopener">Leetcode 440. K-th Smallest in Lexicographical Order</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findKthNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :type k: int    :rtype: int    """</span>    current <span class="token operator">=</span> <span class="token number">1</span>    k <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">while</span> k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        steps <span class="token operator">=</span> <span class="token number">0</span>        start <span class="token operator">=</span> current        end <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">while</span> start <span class="token operator">&lt;=</span> n<span class="token punctuation">:</span>            steps <span class="token operator">+=</span> min<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token operator">-</span> start            start <span class="token operator">*=</span> <span class="token number">10</span>            end <span class="token operator">*=</span> <span class="token number">10</span>        <span class="token keyword">if</span> steps <span class="token operator">&lt;=</span> k<span class="token punctuation">:</span>            current <span class="token operator">+=</span> <span class="token number">1</span>            k <span class="token operator">-=</span> steps        <span class="token keyword">else</span><span class="token punctuation">:</span>            current <span class="token operator">*=</span> <span class="token number">10</span>            k <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">return</span> current</code></pre><h3 id="2-139-滑动窗口中间值"><a href="#2-139-滑动窗口中间值" class="headerlink" title="2.139. 滑动窗口中间值"></a>2.139. 滑动窗口中间值</h3><p><a href="https://leetcode.com/problems/sliding-window-median/description/" target="_blank" rel="noopener">Leetcode 480. Sliding Window Median</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">medianSlidingWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :type k: int    :rtype: List[float]    """</span>    min_heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    max_heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>max_heap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span>num<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>k <span class="token operator">-</span> k <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>min_heap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span>max_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>max_heap<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>min_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1.0</span> <span class="token keyword">if</span> k <span class="token operator">%</span> <span class="token number">2</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>min_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> num <span class="token operator">>=</span> min_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>min_heap<span class="token punctuation">,</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> min_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>max_heap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span>min_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>min_heap<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>max_heap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span>num<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span> <span class="token operator">>=</span> min_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>min_heap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span>max_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>max_heap<span class="token punctuation">)</span>        <span class="token keyword">while</span> max_heap <span class="token operator">and</span> max_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i <span class="token operator">-</span> k<span class="token punctuation">:</span>            heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>max_heap<span class="token punctuation">)</span>        <span class="token keyword">while</span> min_heap <span class="token operator">and</span> min_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i <span class="token operator">-</span> k<span class="token punctuation">:</span>            heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>min_heap<span class="token punctuation">)</span>    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>min_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1.0</span> <span class="token keyword">if</span> k <span class="token operator">%</span> <span class="token number">2</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>min_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="2-140-多个有序数组，每个数组挑选至少一个数，求能够组成的最小的数组范围"><a href="#2-140-多个有序数组，每个数组挑选至少一个数，求能够组成的最小的数组范围" class="headerlink" title="2.140. 多个有序数组，每个数组挑选至少一个数，求能够组成的最小的数组范围"></a>2.140. 多个有序数组，每个数组挑选至少一个数，求能够组成的最小的数组范围</h3><p><a href="https://leetcode.com/problems/smallest-range/description/" target="_blank" rel="noopener">Leetcode 632. Smallest Range</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">smallestRange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[List[int]]    :rtype: List[int]    """</span>    heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    end <span class="token operator">=</span> <span class="token operator">-</span>sys<span class="token punctuation">.</span>maxsize    <span class="token keyword">for</span> index<span class="token punctuation">,</span> num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        end <span class="token operator">=</span> max<span class="token punctuation">(</span>end<span class="token punctuation">,</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    start <span class="token operator">=</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    temp_end <span class="token operator">=</span> end    <span class="token keyword">while</span> len<span class="token punctuation">(</span>heap<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        current <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>        <span class="token keyword">if</span> current<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_end <span class="token operator">=</span> max<span class="token punctuation">(</span>temp_end<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>current<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>current<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> temp_end <span class="token operator">-</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> end <span class="token operator">-</span> start<span class="token punctuation">:</span>                start <span class="token operator">=</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                end <span class="token operator">=</span> temp_end    <span class="token keyword">return</span> <span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span></code></pre><h3 id="2-141-点游戏"><a href="#2-141-点游戏" class="headerlink" title="2.141. 点游戏"></a>2.141. 点游戏</h3><p><a href="https://leetcode.com/problems/24-game/description/" target="_blank" rel="noopener">Leetcode 679. 24 Game</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">judgePoint24</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :rtype: bool    """</span>    EPS <span class="token operator">=</span> <span class="token number">0.001</span>    <span class="token keyword">def</span> <span class="token function">back_trace</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> abs<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> EPS        <span class="token keyword">for</span> i<span class="token punctuation">,</span> a <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j<span class="token punctuation">,</span> b <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                candidates <span class="token operator">=</span> <span class="token punctuation">[</span>a <span class="token operator">+</span> b<span class="token punctuation">,</span> a <span class="token operator">-</span> b<span class="token punctuation">,</span> b <span class="token operator">-</span> a<span class="token punctuation">,</span> a <span class="token operator">*</span> b<span class="token punctuation">]</span>                <span class="token keyword">if</span> abs<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">></span> EPS<span class="token punctuation">:</span>                    candidates<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b <span class="token operator">/</span> a<span class="token punctuation">)</span>                <span class="token keyword">if</span> abs<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">></span> EPS<span class="token punctuation">:</span>                    candidates<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span>                <span class="token keyword">del</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">del</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">for</span> candidate <span class="token keyword">in</span> candidates<span class="token punctuation">:</span>                    nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>candidate<span class="token punctuation">)</span>                    <span class="token keyword">if</span> back_trace<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">True</span>                    nums<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                nums<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>j<span class="token punctuation">,</span> b<span class="token punctuation">)</span>                nums<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> back_trace<span class="token punctuation">(</span>nums<span class="token punctuation">)</span></code></pre><h3 id="2-142-数组中寻找三个长为k的不重叠子数组，使得其和最大"><a href="#2-142-数组中寻找三个长为k的不重叠子数组，使得其和最大" class="headerlink" title="2.142. 数组中寻找三个长为k的不重叠子数组，使得其和最大"></a>2.142. 数组中寻找三个长为k的不重叠子数组，使得其和最大</h3><p><a href="https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/description/" target="_blank" rel="noopener">Leetcode 689. Maximum Sum of 3 Non-Overlapping Subarrays</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maxSumOfThreeSubarrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type nums: List[int]    :type k: int    :rtype: List[int]    """</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    left_sums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    temp <span class="token operator">=</span> <span class="token number">0</span>    left_sums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        temp <span class="token operator">+=</span> num        left_sums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    index_left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> length    current_max <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left_sums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> left_sums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> k<span class="token punctuation">]</span> <span class="token operator">></span> current_max<span class="token punctuation">:</span>            index_left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> k            current_max <span class="token operator">=</span> left_sums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> left_sums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> k<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            index_left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> index_left<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    index_right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> length    current_max <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length <span class="token operator">-</span> k<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left_sums<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">-</span> left_sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> current_max<span class="token punctuation">:</span>            index_right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i            current_max <span class="token operator">=</span> left_sums<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">-</span> left_sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            index_right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> index_right<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>    the_max <span class="token operator">=</span> <span class="token number">0</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        left <span class="token operator">=</span> index_left<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        right <span class="token operator">=</span> index_right<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span>        current_max <span class="token operator">=</span> left_sums<span class="token punctuation">[</span>left <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">-</span> left_sums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> left_sums<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">-</span> left_sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> left_sums<span class="token punctuation">[</span>            right <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">-</span> left_sums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>        <span class="token keyword">if</span> current_max <span class="token operator">></span> the_max<span class="token punctuation">:</span>            result <span class="token operator">=</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> i<span class="token punctuation">,</span> right<span class="token punctuation">]</span>            the_max <span class="token operator">=</span> current_max    <span class="token keyword">return</span> result</code></pre><h3 id="2-143-快速替换10亿条标题中的5万个敏感词"><a href="#2-143-快速替换10亿条标题中的5万个敏感词" class="headerlink" title="2.143. 快速替换10亿条标题中的5万个敏感词"></a>2.143. 快速替换10亿条标题中的5万个敏感词</h3><p>Aho-Corasick算法（AC自动机）：</p><ul><li>构造一棵Trie树；</li><li>构造失败指针；</li><li>模式匹配。</li></ul><p>参考：<a href="http://www.cppblog.com/mythit/archive/2009/04/21/80633.html" target="_blank" rel="noopener">AC自动机算法详解 - 极限定律 - C++博客</a></p><h3 id="2-144-轮流取数的必胜策略"><a href="#2-144-轮流取数的必胜策略" class="headerlink" title="2.144. 轮流取数的必胜策略"></a>2.144. 轮流取数的必胜策略</h3><p>问题描述：有2N个自然数，甲乙两人轮流取。一人一次取一个，而且只能取头尾两个数中的一个，取过的数划去，直到2N个数取完，取得的数的总和大的人获胜。那么，先取的人是否有必胜策略？</p><p>解决方法：先取的人只要取了奇数位上的数，就把偶数位的数留给后取的人，而且只要坚持取奇数位上的数，就一直会把偶数位上的数留给后取的人。这样就会取走所有奇数位上的数。（这种方法同样可使先取的人把所有偶数位上的数取走）所以，先取的人只要一开始算出是所有偶数位上的数总和大，还是所有奇数位上的数总和大，就一定会胜。</p><h3 id="2-145-最大公约数（辗转相除法）"><a href="#2-145-最大公约数（辗转相除法）" class="headerlink" title="2.145. 最大公约数（辗转相除法）"></a>2.145. 最大公约数（辗转相除法）</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> b<span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">%</span> b    <span class="token keyword">return</span> a</code></pre><h3 id="2-146-最小公倍数"><a href="#2-146-最小公倍数" class="headerlink" title="2.146. 最小公倍数"></a>2.146. 最小公倍数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lcm</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">//</span> gcd<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>操作系统知识点总结</title>
      <link href="/2018/12/31/cao-zuo-xi-tong-zhi-shi-dian-zong-jie/"/>
      <url>/2018/12/31/cao-zuo-xi-tong-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-进程间通信方式">1. 进程间通信方式</a></li><li><a href="#2-操作系统的特征">2. 操作系统的特征</a></li><li><a href="#3-进程的组成">3. 进程的组成</a><ul><li><a href="#31-进程控制块process-control-blockpcb">3.1. 进程控制块（Process Control Block，PCB）</a></li><li><a href="#32-程序段">3.2. 程序段</a></li><li><a href="#33-数据段">3.3. 数据段</a></li></ul></li><li><a href="#4-线程与进程的比较">4. 线程与进程的比较</a></li><li><a href="#5-死锁产生的必要条件">5. 死锁产生的必要条件</a></li><li><a href="#6-linux文件系统">6. Linux文件系统</a></li><li><a href="#7-linux中的文件描述符">7. Linux中的文件描述符</a></li><li><a href="#8-虚拟地址到物理地址的翻译过程">8. 虚拟地址到物理地址的翻译过程</a></li></ul><!-- /TOC --><h2 id="1-进程间通信方式"><a href="#1-进程间通信方式" class="headerlink" title="1. 进程间通信方式"></a>1. 进程间通信方式</h2><ul><li>管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</li><li>有名管道 (named pipe) ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</li><li>信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。不是用于交换大批数据,而用于多线程之间的同步.常作为一种锁机制,防止某进程在访问资源时其它进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li><li>消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</li><li>信号 ( signal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li><li>共享内存( shared memory ) ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</li><li>套接字( socket ) ： 套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信。</li></ul><h2 id="2-操作系统的特征"><a href="#2-操作系统的特征" class="headerlink" title="2. 操作系统的特征"></a>2. 操作系统的特征</h2><ul><li>并发：并发是指两个或多个事件在同一时间间隔内发生。操作系统的并发性是指计算机系统中同时存在多个运行着的程序，因此它应该具有处理和调度多个程序同时执行的能力。</li><li>共享：共享是指系统中的资源（硬件资源和信息资源）可以被多个并发执行的程序共同使用，而不是被其中一个独占。资源共享有两种方式：互斥访问和同时访问。</li><li>异步：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。</li><li>虚拟：虚拟是一种管理技术，把物理上的一个实体变成逻辑上的多个对应物，或把物理上的多个实体变成逻辑上的一个对应物的技术。采用虚拟技术的目的是为用户提供易于使用、方便高效的操作环境。</li></ul><h2 id="3-进程的组成"><a href="#3-进程的组成" class="headerlink" title="3. 进程的组成"></a>3. 进程的组成</h2><h3 id="3-1-进程控制块（Process-Control-Block，PCB）"><a href="#3-1-进程控制块（Process-Control-Block，PCB）" class="headerlink" title="3.1. 进程控制块（Process Control Block，PCB）"></a>3.1. 进程控制块（Process Control Block，PCB）</h3><ul><li>进程描述信息：进程标识符（PID）、用户标识符（UID）。</li><li>进程控制和管理信息：进程当前状态、进程优先级、代码运行入口地址、程序的外存地址、进入内存时间、处理器占用时间、信号量使用。</li><li>资源分配清单：代码段指针、数据段指针、堆栈段指针、文件描述符、键盘、鼠标。</li><li>处理器相关信息：通用寄存器值、地址寄存器值、控制寄存器值、标志寄存器值、状态字</li></ul><h3 id="3-2-程序段"><a href="#3-2-程序段" class="headerlink" title="3.2. 程序段"></a>3.2. 程序段</h3><h3 id="3-3-数据段"><a href="#3-3-数据段" class="headerlink" title="3.3. 数据段"></a>3.3. 数据段</h3><h2 id="4-线程与进程的比较"><a href="#4-线程与进程的比较" class="headerlink" title="4. 线程与进程的比较"></a>4. 线程与进程的比较</h2><ul><li><p>调度：在传统的操作系统中，拥有资源和独立调度的基本单位都是进程。在引入线程的操作系统中，线程是独立调度的基本单位，进程是资源拥有的基本单位。在同一进程中，线程的切换不会引起进程切换。在不同进程中进行线程切换,如从一个进程内的线程切换到另一个进程中的线程时，会引起进程切换。</p></li><li><p>拥有资源：不论是传统操作系统还是设有线程的操作系统，进程都是拥有资源的基本单位，而线程不拥有系统资源（也有一点必不可少的资源），但线程可以访问其隶属进程的系统资源。</p></li><li><p>并发性：在引入线程的操作系统中，不仅进程之间可以并发执行，而且多个线程之间也可以并发执行，从而使操作系统具有更好的并发性，提高了系统的吞吐量。</p></li><li><p>系统开销：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、 I/O设备等，因此操作系统所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程CPU环境的保存及新调度到进程CPU环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。此外，由于同一进程内的多个线程共享进程的地址空间，因此，这些线程之间的同步与通信非常容易实现，甚至无需操作系统的干预。</p></li><li><p>地址空间和其他资源（如打开的文件）：进程的地址空间之间互相独立，同一进程的各线程间共享进程的资源，某进程内的线程对于其他进程不可见。</p></li><li><p>通信方面：进程间通信(IPC)需要进程同步和互斥手段的辅助，以保证数据的一致性，而线程间可以直接读/写进程数据段（如全局变量）来进行通信。</p></li></ul><h2 id="5-死锁产生的必要条件"><a href="#5-死锁产生的必要条件" class="headerlink" title="5. 死锁产生的必要条件"></a>5. 死锁产生的必要条件</h2><p>产生死锁必须同时满足以下四个条件，只要其中任一条件不成立，死锁就不会发生。</p><ul><li>互斥条件：进程要求对所分配的资源进行排他性控制，即在一段时间内某资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。</li><li>不剥夺条件：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能由获得该资源的进程自己来释放。</li><li>请求和保持条件：进程每次申请它所需要的一部分资源，在等待新资源的同时，进程继续占有已分配的资源。</li><li>循环等待条件：存在一种进程资源的循环等待链，链中每一个进程已获得的资源同时被链中下一个进程所请求。</li></ul><h2 id="6-Linux文件系统"><a href="#6-Linux文件系统" class="headerlink" title="6. Linux文件系统"></a>6. Linux文件系统</h2><p>一个典型的Linux分区如下图所示：</p><p><img src="/2018/12/31/cao-zuo-xi-tong-zhi-shi-dian-zong-jie/linux_partition.png" alt="Linux Partition"></p><p>分区的第一个部分是启动区（Boot Block），主要是为计算机开机服务的。</p><p>启动区之后是超级区（Super Block），记录了文件系统的相关信息，如：</p><ul><li>block与inode的总量</li><li>block与inode的大小</li><li>文件系统的挂载时间、最近一次写入数据的时间、最近一次检验磁盘的时间等文件系统的相关信息</li><li>一个validbit数值，若此文件系统已被挂载，则validbit为0，否则为1</li></ul><p>超级区之后是多个inode，每个inode的大小均固定为128B或256B，inode记录的文件数据有：</p><ul><li>该文件的访问模式（read／write／excute）</li><li>该文件的所有者与组（owner／group）</li><li>该文件的大小</li><li>指向此文件内容的硬连接数</li><li>该文件创建或状态改变的时间（ctime）</li><li>最近一次的读取时间（atime）</li><li>最近修改的时间（mtime）</li></ul><p><img src="/2018/12/31/cao-zuo-xi-tong-zhi-shi-dian-zong-jie/inode.png" alt="inode"></p><p>inode之后是数据块（Data Block），其特点是：</p><ul><li>block的大小（1KB、2KB、4KB）与数量在格式化完就不能再改变（除非重新格式化）</li><li>每个block内最多只能放置一个文件的数据</li><li>如果文件大于block的大小，则一个文件会占用多个block数量</li></ul><h2 id="7-Linux中的文件描述符"><a href="#7-Linux中的文件描述符" class="headerlink" title="7. Linux中的文件描述符"></a>7. Linux中的文件描述符</h2><p>文件描述符（file descriptor）是内核为了高效管理已被打开的文件所创建的索引，其是一个非负整数（通常是小整数），用于指代被打开的文件，所有执行I/O操作的系统调用都通过文件描述符。程序刚刚启动的时候，0是标准输入，1是标准输出，2是标准错误。</p><p>每一个文件描述符会与一个打开文件相对应，同时，不同的文件描述符也会指向同一个文件。相同的文件可以被不同的进程打开也可以在同一个进程中被多次打开。系统为每一个进程维护了一个文件描述符表，该表的值都是从0开始的，所以在不同的进程中你会看到相同的文件描述符，这种情况下相同文件描述符有可能指向同一个文件，也有可能指向不同的文件。</p><h2 id="8-虚拟地址到物理地址的翻译过程"><a href="#8-虚拟地址到物理地址的翻译过程" class="headerlink" title="8. 虚拟地址到物理地址的翻译过程"></a>8. 虚拟地址到物理地址的翻译过程</h2><p><img src="/2018/12/31/cao-zuo-xi-tong-zhi-shi-dian-zong-jie/virtual_address_to_physical_address.png" alt="Virtual Address to Physical Address"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java基础知识总结</title>
      <link href="/2018/12/31/java1/"/>
      <url>/2018/12/31/java1/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-一个java源文件中是否可以包括多个类">1. 一个”.java”源文件中是否可以包括多个类?</a></li><li><a href="#2-源文件javac出多个class文件出来是怎么回事">2. 源文件javac出多个class文件出来是怎么回事?</a></li><li><a href="#3-什么是匿名类">3. 什么是匿名类？</a></li><li><a href="#4-switch-case中switch后的变量类型可以是什么">4. <code>switch case</code>中<code>switch</code>后的变量类型可以是什么？</a></li><li><a href="#5-char型变量与汉字">5. <code>char</code>型变量与汉字。</a></li><li><a href="#6-使用final关键字修饰一个变量时是引用不能变还是引用的对象不能变">6. 使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？</a></li><li><a href="#7-overload和override的区别">7. Overload和Override的区别。</a></li><li><a href="#8-构造器constructor是否可被override">8. 构造器Constructor是否可被override?</a></li><li><a href="#9-java抽象类abstract-class和类class的区别">9. Java抽象类（abstract class）和类（class）的区别？</a></li><li><a href="#10-java接口与抽象类如何合作">10. Java接口与抽象类如何合作?</a></li><li><a href="#11-java中实现多态的机制是什么">11. Java中实现多态的机制是什么？</a></li><li><a href="#12-java实现了闭包吗">12. Java实现了闭包吗？</a></li><li><a href="#13-string-s--new-stringxyz创建了几个string-object">13. <code>String s = new String(&quot;xyz&quot;)</code>创建了几个String Object?</a></li><li><a href="#14-try-catch-finally-return的执行顺序">14. try-catch-finally-return的执行顺序</a></li><li><a href="#15-当一个线程进入一个对象的一个synchronized方法后其它线程是否可进入此对象的其它方法">15. 当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?</a></li><li><a href="#16-arraylist和vector的区别">16. ArrayList和Vector的区别</a></li><li><a href="#17-hashmap和hashtable的区别">17. HashMap和Hashtable的区别</a></li><li><a href="#18-listsetmap是否继承自collection接口">18. List，Set，Map是否继承自Collection接口?</a></li><li><a href="#19-collection和-collections的区别">19. Collection和 Collections的区别。</a></li><li><a href="#20-java中有几种类型的流jdk为每种类型的流提供了一些抽象类以供继承请说出他们分别是哪些类">20. Java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？</a></li><li><a href="#21-描述一下jvm加载class文件的原理机制">21. 描述一下JVM加载class文件的原理机制?</a></li><li><a href="#22-能不能自己写个类也叫javalangstring">22. 能不能自己写个类，也叫java.lang.String？</a></li><li><a href="#23-java中反射的作用是什么">23. Java中反射的作用是什么?</a></li><li><a href="#24-成员变量局部变量静态变量的区别">24. 成员变量、局部变量、静态变量的区别</a></li><li><a href="#25-谈谈你对strongreferenceweakreference和softreference的认识">25. 谈谈你对StrongReference、WeakReference和SoftReference的认识</a></li><li><a href="#26-与equals的区别">26. <code>==</code>与<code>equals()</code>的区别？</a></li><li><a href="#27-equals与hashcode的区别">27. <code>equals()</code>与<code>hashCode()</code>的区别？</a></li><li><a href="#28-java集合框架示意图">28. Java集合框架示意图</a><ul><li><a href="#281-集合框架概览">28.1. 集合框架概览</a></li><li><a href="#282-list">28.2. List</a></li><li><a href="#283-set">28.3. Set</a></li><li><a href="#284-map">28.4. Map</a></li><li><a href="#285-queue">28.5. Queue</a></li></ul></li><li><a href="#29-error和exception的区别">29. Error和Exception的区别</a></li><li><a href="#30-用户线程user-thread与守护线程daemon-thread">30. 用户线程（User Thread）与守护线程（Daemon Thread）</a></li><li><a href="#31-java内存模型">31. Java内存模型</a><ul><li><a href="#311-主内存与工作内存">31.1. 主内存与工作内存</a></li><li><a href="#312-内存间交互操作">31.2. 内存间交互操作</a></li><li><a href="#313-对volatile型变量的特殊规则">31.3. 对volatile型变量的特殊规则</a></li><li><a href="#314-原子性可见性与有序性">31.4. 原子性、可见性与有序性</a><ul><li><a href="#3141-原子性atomicity">31.4.1. 原子性（Atomicity）</a></li><li><a href="#3142-可见性visibility">31.4.2. 可见性（Visibility）</a></li><li><a href="#3143-有序性ordering">31.4.3. 有序性（Ordering）</a></li></ul></li><li><a href="#315-先行发生原则">31.5. 先行发生原则</a></li></ul></li><li><a href="#32-java中的bionioaio分别是什么">32. Java中的BIO，NIO，AIO分别是什么?</a><ul><li><a href="#321-biosynchronous-blocking-io同步阻塞io">32.1. BIO（synchronous Blocking IO，同步阻塞IO）</a></li><li><a href="#322-niosynchronous-non-blocking-io同步非阻塞io">32.2. NIO（synchronous Non blocking IO，同步非阻塞IO）</a></li><li><a href="#323-aioasynchronous-non-blocking-io异步非阻塞io">32.3. AIO（Asynchronous non blocking IO，异步非阻塞IO）</a></li></ul></li><li><a href="#33-serializable接口和序列化与反序列化">33. Serializable接口和序列化与反序列化</a></li><li><a href="#34-arraylist的sublist方法注意事项">34. ArrayList的<code>subList()</code>方法注意事项</a></li><li><a href="#35-arrays的aslist方法注意事项">35. Arrays的<code>asList()</code>方法注意事项</a></li><li><a href="#36-comparator注意事项">36. Comparator注意事项</a></li><li><a href="#37-hashmap多线程下死循环问题">37. HashMap多线程下死循环问题</a></li><li><a href="#38-什么是concurrenthashmap">38. 什么是ConcurrentHashMap</a></li><li><a href="#39-map类集合k／v能否存储null值的情况">39. Map类集合k／V能否存储null值的情况</a></li><li><a href="#40-simpledataformat线程安全吗">40. SimpleDataFormat线程安全吗？</a></li><li><a href="#41-timer可以用来并行处理定时任务吗">41. Timer可以用来并行处理定时任务吗？</a></li><li><a href="#42-可以在多线程下使用random吗">42. 可以在多线程下使用Random吗？</a></li><li><a href="#43-threadjoin是如何实现的">43. <code>Thread.join()</code>是如何实现的？</a></li><li><a href="#44-gc中可回收对象的判定方法">44. GC中可回收对象的判定方法</a><ul><li><a href="#441-引用计数法">44.1. 引用计数法</a></li><li><a href="#442-可达性分析算法">44.2. 可达性分析算法</a></li></ul></li><li><a href="#45-垃圾收集算法">45. 垃圾收集算法</a><ul><li><a href="#451-标记清除算法">45.1. 标记——清除算法</a></li><li><a href="#452-复制算法">45.2. 复制算法</a></li><li><a href="#453-标记整理算法">45.3. 标记——整理算法</a></li><li><a href="#454-分代收集算法">45.4. 分代收集算法</a><ul><li><a href="#4541-年轻代">45.4.1. 年轻代</a></li><li><a href="#4542-年老代">45.4.2. 年老代</a></li><li><a href="#4543-永久代">45.4.3. 永久代</a></li></ul></li></ul></li><li><a href="#46-java是值传递还是引用传递">46. Java是值传递还是引用传递？</a></li><li><a href="#47-线程同步的方法">47. 线程同步的方法</a></li><li><a href="#48-java创建线程的方式">48. Java创建线程的方式</a><ul><li><a href="#481-继承thread类创建线程类">48.1. 继承Thread类创建线程类</a></li><li><a href="#482-通过runnable接口创建线程类">48.2. 通过Runnable接口创建线程类</a></li><li><a href="#483-通过callable和future创建线程">48.3. 通过Callable和Future创建线程</a></li></ul></li><li><a href="#49-线程池原理">49. 线程池原理</a></li><li><a href="#50-类与类加载器的关系">50. 类与类加载器的关系</a></li><li><a href="#51-双亲委派模型">51. 双亲委派模型</a></li><li><a href="#52-如何自定义类加载器">52. 如何自定义类加载器</a></li><li><a href="#53-类的生命周期">53. 类的生命周期</a></li><li><a href="#54-类初始化的时机">54. 类初始化的时机</a></li><li><a href="#55-类的加载过程">55. 类的加载过程</a><ul><li><a href="#551-加载">55.1. 加载</a></li><li><a href="#552-连接">55.2. 连接</a><ul><li><a href="#5521-验证">55.2.1. 验证</a></li><li><a href="#5522-准备">55.2.2. 准备</a></li><li><a href="#5523-解析">55.2.3. 解析</a></li></ul></li><li><a href="#553-初始化">55.3. 初始化</a></li></ul></li><li><a href="#56-符号引用和直接引用的区别">56. 符号引用和直接引用的区别</a></li><li><a href="#57-如何理解平台无关性">57. 如何理解平台无关性</a></li><li><a href="#58-运行时数据区域">58. 运行时数据区域</a><ul><li><a href="#581-程序计数器program-counter-register">58.1. 程序计数器（Program Counter Register）</a></li><li><a href="#582-java虚拟机栈java-virtual-machine-stacks">58.2. Java虚拟机栈（Java Virtual Machine Stacks）</a></li><li><a href="#583-本地方法栈native-method-stack">58.3. 本地方法栈（Native Method Stack）</a></li><li><a href="#584-java堆java-heap">58.4. Java堆（Java Heap）</a></li><li><a href="#585-方法区method-area">58.5. 方法区（Method Area）</a></li><li><a href="#586-运行时常量池runtime-constant-pool">58.6. 运行时常量池（Runtime Constant Pool）</a></li></ul></li><li><a href="#59-class文件结构">59. Class文件结构</a><ul><li><a href="#591-魔数与class文件的版本">59.1. 魔数与Class文件的版本</a></li><li><a href="#592-常量池">59.2. 常量池</a></li><li><a href="#593-访问标识">59.3. 访问标识</a></li><li><a href="#594-类索引父类索引与接口索引集合">59.4. 类索引、父类索引与接口索引集合</a></li><li><a href="#595-字段表集合">59.5. 字段表集合</a></li><li><a href="#596-方法表集合">59.6. 方法表集合</a></li><li><a href="#597-属性表集合">59.7. 属性表集合</a></li></ul></li><li><a href="#60-运行时栈帧结构">60. 运行时栈帧结构</a><ul><li><a href="#601-局部变量表local-variable-table">60.1. 局部变量表（Local Variable Table）</a></li><li><a href="#602-操作数栈operand-stack">60.2. 操作数栈（Operand Stack）</a></li><li><a href="#603-动态连接dynamic-linking">60.3. 动态连接（Dynamic Linking）</a></li><li><a href="#604-方法返回地址">60.4. 方法返回地址</a></li><li><a href="#605-附加信息">60.5. 附加信息</a></li></ul></li><li><a href="#61-基于栈的指令集和基于寄存器的指令集">61. 基于栈的指令集和基于寄存器的指令集</a><ul><li><a href="#611-例子">61.1. 例子</a></li><li><a href="#612-区别">61.2. 区别</a></li></ul></li><li><a href="#62-javac编译过程">62. Javac编译过程</a><ul><li><a href="#621-解析与填充符号表过程">62.1. 解析与填充符号表过程</a><ul><li><a href="#6211-解析词法语法分析">62.1.1. 解析（词法、语法分析）</a></li><li><a href="#6212-填充符号表">62.1.2. 填充符号表</a></li></ul></li><li><a href="#622-注解处理器">62.2. 注解处理器</a></li><li><a href="#623-语义分析与字节码生成">62.3. 语义分析与字节码生成</a></li></ul></li><li><a href="#63-什么是jit">63. 什么是JIT</a></li><li><a href="#64-什么是热点代码">64. 什么是热点代码</a></li><li><a href="#65-如何判断热点代码">65. 如何判断热点代码</a></li><li><a href="#66-java与c／c的编译器对比">66. Java与C／C++的编译器对比</a></li><li><a href="#67-java线程的实现">67. Java线程的实现</a></li><li><a href="#68-线程的状态和转换关系">68. 线程的状态和转换关系</a></li><li><a href="#69-对象的访问定位">69. 对象的访问定位</a></li><li><a href="#70-java有哪些语法糖">70. Java有哪些语法糖</a></li><li><a href="#71-java线程安全的实现">71. Java线程安全的实现</a><ul><li><a href="#711-互斥同步mutual-exclusion--synchronization">71.1. 互斥同步（Mutual Exclusion &amp; Synchronization）</a></li><li><a href="#712-非阻塞同步non-blocking-synchronization">71.2. 非阻塞同步（Non-Blocking Synchronization）</a></li><li><a href="#713-无同步方案">71.3. 无同步方案</a></li></ul></li><li><a href="#72-锁优化">72. 锁优化</a><ul><li><a href="#721-自旋锁与自适应自旋">72.1. 自旋锁与自适应自旋</a></li><li><a href="#722-锁消除">72.2. 锁消除</a></li><li><a href="#723-锁粗化">72.3. 锁粗化</a></li><li><a href="#724-轻量级锁">72.4. 轻量级锁</a></li><li><a href="#725-偏向锁">72.5. 偏向锁</a></li></ul></li><li><a href="#73-如何理解java是一门静态多分派且动态单分派的语言">73. 如何理解Java是一门静态多分派且动态单分派的语言？</a></li><li><a href="#74-为什么synchronized修饰的变量推荐定义为final">74. 为什么synchronized修饰的变量推荐定义为final？</a></li><li><a href="#75-object类有哪些方法">75. Object类有哪些方法</a></li><li><a href="#76-sleep和wait的区别">76. <code>sleep()</code>和<code>wait()</code>的区别</a></li><li><a href="#77-java版本历史与特性">77. Java版本历史与特性</a><ul><li><a href="#771-java-8">77.1. Java 8</a></li><li><a href="#772-java-7">77.2. Java 7</a></li><li><a href="#773-java-6">77.3. Java 6</a></li><li><a href="#774-java-5">77.4. Java 5</a></li></ul></li><li><a href="#78-threadlocal原理">78. ThreadLocal原理</a></li><li><a href="#79-hashmapjava-7">79. HashMap（Java 7）</a><ul><li><a href="#791-构造函数">79.1. 构造函数</a></li><li><a href="#792-确定索引位置">79.2. 确定索引位置</a></li><li><a href="#793-put">79.3. <code>put()</code></a><ul><li><a href="#7931-inflatetable">79.3.1. <code>inflateTable()</code></a></li><li><a href="#7932-putfornullkey">79.3.2. <code>putForNullKey()</code></a></li><li><a href="#7933-addentry">79.3.3. <code>addEntry()</code></a></li></ul></li><li><a href="#794-扩容机制">79.4. 扩容机制</a></li><li><a href="#795-get">79.5. <code>get()</code></a></li></ul></li><li><a href="#80-java-8对hashmap的改进">80. Java 8对HashMap的改进</a><ul><li><a href="#801-hash">80.1. <code>hash()</code></a></li><li><a href="#802-红黑树">80.2. 红黑树</a></li><li><a href="#803-resize">80.3. <code>resize()</code></a></li></ul></li><li><a href="#81-如何理解nio">81. 如何理解NIO</a><ul><li><a href="#811-什么是nio">81.1. 什么是NIO</a></li><li><a href="#812-nio与io的区别">81.2. NIO与IO的区别</a></li><li><a href="#813-为什么要使用nio">81.3. 为什么要使用NIO</a></li></ul></li><li><a href="#82-concurrent包">82. concurrent包</a></li><li><a href="#83-当前线程wait后会立即阻塞吗其他线程能够进入同步块吗">83. 当前线程<code>wait()</code>后会立即阻塞吗？其他线程能够进入同步块吗？</a></li><li><a href="#84-为何调用wait可能抛出interruptedexception异常">84. 为何调用<code>wait()</code>可能抛出InterruptedException异常？</a></li><li><a href="#85-调用notify后等待的线程会被立刻唤醒吗">85. 调用<code>notify()</code>后等待的线程会被立刻唤醒吗？</a></li><li><a href="#86-notify和notifyall有什么区别">86. <code>notify()</code>和<code>notifyAll()</code>有什么区别？</a></li><li><a href="#87-notify可能引发死锁">87. <code>notify()</code>可能引发死锁。</a></li><li><a href="#88-线程的sleepyield和join有什么区别">88. 线程的<code>sleep()</code>、<code>yield()</code>和<code>join()</code>有什么区别？</a></li><li><a href="#89-类名class与类名this的区别">89. <code>类名.class</code>与<code>类名.this</code>的区别</a></li></ul><!-- /TOC --><h2 id="1-一个”-java”源文件中是否可以包括多个类"><a href="#1-一个”-java”源文件中是否可以包括多个类" class="headerlink" title="1. 一个”.java”源文件中是否可以包括多个类?"></a>1. 一个”.java”源文件中是否可以包括多个类?</h2><p>可以，但只能有一个public类，而且如果有public类的话，这个文件的名字要和这个类的名字一样。</p><h2 id="2-源文件javac出多个class文件出来是怎么回事"><a href="#2-源文件javac出多个class文件出来是怎么回事" class="headerlink" title="2. 源文件javac出多个class文件出来是怎么回事?"></a>2. 源文件javac出多个class文件出来是怎么回事?</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>这样每个class会是一个.class文件。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这会产生两个.class文件，一个A.class，一个A$B.class。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        button<span class="token punctuation">.</span><span class="token function">addActionLisener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用匿名类，这也会产生多个.class，一个A.class，一个A$1.class。</p><h2 id="3-什么是匿名类？"><a href="#3-什么是匿名类？" class="headerlink" title="3. 什么是匿名类？"></a>3. 什么是匿名类？</h2><pre><code>new 父类构造器(参数列表)|实现接口() {        //匿名内部类的类体部分      }</code></pre><ul><li>使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。</li><li>匿名内部类中是不能定义构造函数的。</li><li>匿名内部类中不能存在任何的静态成员变量和静态方法。</li><li>匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。</li><li>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。</li></ul><h2 id="4-switch-case中switch后的变量类型可以是什么？"><a href="#4-switch-case中switch后的变量类型可以是什么？" class="headerlink" title="4. switch case中switch后的变量类型可以是什么？"></a>4. <code>switch case</code>中<code>switch</code>后的变量类型可以是什么？</h2><ul><li>可以转换为int的类型。</li><li>String类型。</li><li>枚举类型。</li></ul><h2 id="5-char型变量与汉字。"><a href="#5-char型变量与汉字。" class="headerlink" title="5. char型变量与汉字。"></a>5. <code>char</code>型变量与汉字。</h2><p>Java中的一个<code>char</code>占2个字节。Java采用unicode，2个字节来表示一个字符，如<code>char x = &#39;编&#39;</code>。</p><p><code>String.getBytes(encoding)</code>方法是获取指定编码的<code>byte</code>数组表示，通常gbk/gb2312是2个字节，utf-8是3个字节。如果不指定<code>encoding</code>则取系统默认的<code>encoding</code>。</p><h2 id="6-使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？"><a href="#6-使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？" class="headerlink" title="6. 使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？"></a>6. 使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？</h2><p>使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容 还是可以改变的。</p><h2 id="7-Overload和Override的区别。"><a href="#7-Overload和Override的区别。" class="headerlink" title="7. Overload和Override的区别。"></a>7. Overload和Override的区别。</h2><p>Overload是重载的意思，Override是覆盖的意思，也就是重写。</p><h2 id="8-构造器Constructor是否可被override"><a href="#8-构造器Constructor是否可被override" class="headerlink" title="8. 构造器Constructor是否可被override?"></a>8. 构造器Constructor是否可被override?</h2><p>构造器Constructor不能被继承，因此不能重写Override，但可以被重载Overload。</p><h2 id="9-Java抽象类（abstract-class）和类（class）的区别？"><a href="#9-Java抽象类（abstract-class）和类（class）的区别？" class="headerlink" title="9. Java抽象类（abstract class）和类（class）的区别？"></a>9. Java抽象类（abstract class）和类（class）的区别？</h2><ul><li>抽象类不能实例化；</li><li>抽象类允许有abstract方法；</li><li>抽象类的非抽象子类必须实现abstract方法。</li></ul><h2 id="10-Java接口与抽象类如何合作"><a href="#10-Java接口与抽象类如何合作" class="headerlink" title="10. Java接口与抽象类如何合作?"></a>10. Java接口与抽象类如何合作?</h2><ul><li>接口可以继承接口。抽象类可以实现（implements）接口，抽象类是可继承实体类，但前提是实体类必须有明确的构造函数。</li><li>一个Java抽象类实现一个接口时，可以不实现接口中所有的方法，但抽象类的子类必须实现。</li></ul><h2 id="11-Java中实现多态的机制是什么？"><a href="#11-Java中实现多态的机制是什么？" class="headerlink" title="11. Java中实现多态的机制是什么？"></a>11. Java中实现多态的机制是什么？</h2><p>多态由重载和重写体现。</p><p>重载通过静态分配实现，即依赖静态类型来定位方法执行的版本。静态分配发生在编译阶段，确定静态分配的动作实际上不是由虚拟机来执行的。</p><p>重写通过动态分配实现，即在运行期根据实际类型确定方法执行版本。Java虚拟机为类载方法区中建立一个虚方法表，虚方法表中存放着各个方法的实际入口地址。如果某个方法在子类中没有被重写，那么子类的虚方法表里面的地址入口和父类相同方法的入口地址是一致的，都指向父类的实现入口。如果子类中重写了这个方法，子类方法表中的地址将会替换为指向子类实现版本的入口地址。</p><h2 id="12-Java实现了闭包吗？"><a href="#12-Java实现了闭包吗？" class="headerlink" title="12. Java实现了闭包吗？"></a>12. Java实现了闭包吗？</h2><p>Java实现了闭包，但仅实现了值捕获，没有实现引用捕获。</p><h2 id="13-String-s-new-String-quot-xyz-quot-创建了几个String-Object"><a href="#13-String-s-new-String-quot-xyz-quot-创建了几个String-Object" class="headerlink" title="13. String s = new String(&quot;xyz&quot;)创建了几个String Object?"></a>13. <code>String s = new String(&quot;xyz&quot;)</code>创建了几个String Object?</h2><p>两个或一个，<code>&quot;xyz&quot;</code>对应一个对象，这个对象放在字符串常量缓冲区，常量<code>&quot;xyz&quot;</code>不管出现多少遍，都是缓冲区中的那一个。每次<code>new</code>都会创建一个新的对象，但<code>&quot;xyz&quot;</code>仍从缓冲区获取。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String b <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span> <span class="token operator">==</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span> <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span>String original<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> original<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> original<span class="token punctuation">.</span>hash<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="14-try-catch-finally-return的执行顺序"><a href="#14-try-catch-finally-return的执行顺序" class="headerlink" title="14. try-catch-finally-return的执行顺序"></a>14. try-catch-finally-return的执行顺序</h2><ol><li>不管是否出现异常，finally块都会执行；</li><li>当try或catch中有return时，finally块仍然会执行；</li><li>若try或catch中执行到return，则finally是在return后的表达式执行完成后才执行的（此时return语句并未返回，而是将要返回的值保存起来，待finally执行完成后返回；如果finally中有return，则返回值以finally中为准。</li></ol><p>参考：<a href="http://blog.csdn.net/aaoxue/article/details/8535754" target="_blank" rel="noopener">Java异常捕获之try-catch-finally-return的执行顺序</a></p><h2 id="15-当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法"><a href="#15-当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法" class="headerlink" title="15. 当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?"></a>15. 当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?</h2><p>若synchronized修饰的是static方法，则获取到的是类锁，否则是对象锁。若其他线程进入的是非synchronized修饰的方法，则可进入；若修饰的方法需要的锁与当前线程相同，则不可进入。</p><h2 id="16-ArrayList和Vector的区别"><a href="#16-ArrayList和Vector的区别" class="headerlink" title="16. ArrayList和Vector的区别"></a>16. ArrayList和Vector的区别</h2><ul><li>ArrayList在容量不够时默认是扩展50% + 1个，Vector是默认扩展1倍。</li><li>Vector提供<code>indexOf(obj, start)</code>方法，ArrayList没有。</li><li>Vector是线程安全的，而ArrayList不是。</li></ul><h2 id="17-HashMap和Hashtable的区别"><a href="#17-HashMap和Hashtable的区别" class="headerlink" title="17. HashMap和Hashtable的区别"></a>17. HashMap和Hashtable的区别</h2><ol><li>HashTable是线程安全的，而HashMap不是。</li><li>HashMap和HashTable都实现了Map接口。</li><li>HashMap继承自AbstractMap，HashTable继承自Dictionary。</li><li>HashMap允许key和value为null，而HashTable不允许。</li></ol><h2 id="18-List，Set，Map是否继承自Collection接口"><a href="#18-List，Set，Map是否继承自Collection接口" class="headerlink" title="18. List，Set，Map是否继承自Collection接口?"></a>18. List，Set，Map是否继承自Collection接口?</h2><p>List，Set是，Map不是</p><h2 id="19-Collection和-Collections的区别。"><a href="#19-Collection和-Collections的区别。" class="headerlink" title="19. Collection和 Collections的区别。"></a>19. Collection和 Collections的区别。</h2><p>Collection是集合类的上级接口，继承于它的接口主要有Set和List。</p><p>Collections是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。</p><h2 id="20-Java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？"><a href="#20-Java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？" class="headerlink" title="20. Java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？"></a>20. Java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？</h2><p>字节流，字符流。字节流继承于<code>InputStream</code>/<code>OutputStream</code>，字符流继承于<code>InputStreamReader</code>/<code>OutputStreamWriter</code>。在java.io包中还有许多其他的流，主要是为了提高性能和使用方便。</p><h2 id="21-描述一下JVM加载class文件的原理机制"><a href="#21-描述一下JVM加载class文件的原理机制" class="headerlink" title="21. 描述一下JVM加载class文件的原理机制?"></a>21. 描述一下JVM加载class文件的原理机制?</h2><p>JVM中类的装载是由ClassLoader和它的子类来实现的，ClassLoader是一个重要的Java运行时系统组件。它负责在运行时查找和装入类文件的类。</p><h2 id="22-能不能自己写个类，也叫java-lang-String？"><a href="#22-能不能自己写个类，也叫java-lang-String？" class="headerlink" title="22. 能不能自己写个类，也叫java.lang.String？"></a>22. 能不能自己写个类，也叫java.lang.String？</h2><p>可以，但在应用的时候，需要用自己的类加载器去加载，否则，系统的类加载器永远只是去加载re.jar包中的那个<code>java.lang.String</code>。</p><h2 id="23-Java中反射的作用是什么"><a href="#23-Java中反射的作用是什么" class="headerlink" title="23. Java中反射的作用是什么?"></a>23. Java中反射的作用是什么?</h2><p>Java反射机制是在运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法；这种动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射机制。Java反射机制主要提供了以下功能：</p><ol><li>在运行时判断任意一个对象所属的类；</li><li>在运行时构造任意一个类的对象；</li><li>在运行时判断任意一个类所具有的成员变量和方法；</li><li>在运行时调用任意一个对象的方法；生成动态代理。</li></ol><h2 id="24-成员变量、局部变量、静态变量的区别"><a href="#24-成员变量、局部变量、静态变量的区别" class="headerlink" title="24. 成员变量、局部变量、静态变量的区别"></a>24. 成员变量、局部变量、静态变量的区别</h2><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">成员变量</th><th style="text-align:center">局部变量</th><th style="text-align:center">静态变量</th></tr></thead><tbody><tr><td style="text-align:center">定义位置</td><td style="text-align:center">在类中，方法外</td><td style="text-align:center">方法中，或者方法的形式参数</td><td style="text-align:center">在类中，方法外</td></tr><tr><td style="text-align:center">初始化值</td><td style="text-align:center">有默认初始化值</td><td style="text-align:center">无，先定义，赋值后才能使用</td><td style="text-align:center">有默认初始化值</td></tr><tr><td style="text-align:center">调用方式</td><td style="text-align:center">对象调用</td><td style="text-align:center">—</td><td style="text-align:center">对象调用，类名调用</td></tr><tr><td style="text-align:center">存储位置</td><td style="text-align:center">堆中</td><td style="text-align:center">栈中</td><td style="text-align:center">方法区</td></tr><tr><td style="text-align:center">生命周期</td><td style="text-align:center">与对象共存亡</td><td style="text-align:center">与方法共存亡</td><td style="text-align:center">与类共存亡</td></tr><tr><td style="text-align:center">别名</td><td style="text-align:center">实例变量</td><td style="text-align:center">—</td><td style="text-align:center">类变量</td></tr></tbody></table><h2 id="25-谈谈你对StrongReference、WeakReference和SoftReference的认识"><a href="#25-谈谈你对StrongReference、WeakReference和SoftReference的认识" class="headerlink" title="25. 谈谈你对StrongReference、WeakReference和SoftReference的认识"></a>25. 谈谈你对StrongReference、WeakReference和SoftReference的认识</h2><ul><li>强引用（StrongReference）：就是在代码中普遍存在的，类似<code>Object obj = new Object()</code>这类的引用，只要强引用还存在，GC永远不会回收掉被引用的对象。</li><li>软引用（SoftReference）：用来描述一些还有用但非必须的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常时，将会把这些对象列入回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。</li><li>弱引用（WeakReference）：也是用来描述非必须对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到了下一次GC发生之前。当GC工作时，无论当时内存是否足够，都会回收只被弱引用关联的对象。</li><li>虚引用（PhantomReference）：虚引用也称幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用的唯一目的就是在这个对象被GC回收是收到一个系统通知。</li></ul><h2 id="26-与equals-的区别？"><a href="#26-与equals-的区别？" class="headerlink" title="26. ==与equals()的区别？"></a>26. <code>==</code>与<code>equals()</code>的区别？</h2><ul><li><code>==</code>判断两个对象的地址是否相等（对于基本类型判断值是否相等）。</li><li><code>equals()</code>会寻找自身或最近的父类实现，调用其<code>equals()</code>。</li><li>若无任何父类实现<code>equals()</code>，则会调用Object的<code>equals()</code>，其与==相同。</li></ul><h2 id="27-equals-与hashCode-的区别？"><a href="#27-equals-与hashCode-的区别？" class="headerlink" title="27. equals()与hashCode()的区别？"></a>27. <code>equals()</code>与<code>hashCode()</code>的区别？</h2><ul><li><code>equals()</code>仅在显示调用<code>equals()</code>时使用，而<code>hashCode()</code>在如散列表中会自动调用，以判断是否为同一对象。</li><li>重写<code>equals()</code>时必须重写<code>hashCode()</code>，否则会造成不可预料的后果。</li></ul><h2 id="28-Java集合框架示意图"><a href="#28-Java集合框架示意图" class="headerlink" title="28. Java集合框架示意图"></a>28. Java集合框架示意图</h2><h3 id="28-1-集合框架概览"><a href="#28-1-集合框架概览" class="headerlink" title="28.1. 集合框架概览"></a>28.1. 集合框架概览</h3><table><thead><tr><th style="text-align:center">Collection class</th><th style="text-align:center">Allow duplicate</th><th style="text-align:center">Ordered</th><th style="text-align:center">Sorted</th><th style="text-align:center">Thread-safe</th></tr></thead><tbody><tr><td style="text-align:center">ArrayList</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">No</td><td style="text-align:center">No</td></tr><tr><td style="text-align:center">LinkedList</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">No</td><td style="text-align:center">No</td></tr><tr><td style="text-align:center">Vector</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td></tr><tr><td style="text-align:center">HashSet</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td></tr><tr><td style="text-align:center">LinkedHashSet</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td><td style="text-align:center">No</td><td style="text-align:center">No</td></tr><tr><td style="text-align:center">TreeSet</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">No</td></tr><tr><td style="text-align:center">HashMap</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td></tr><tr><td style="text-align:center">LinkedHashMap</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td><td style="text-align:center">No</td><td style="text-align:center">No</td></tr><tr><td style="text-align:center">Hashtable</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td></tr><tr><td style="text-align:center">TreeMap</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">No</td></tr></tbody></table><p><img src="/2018/12/31/java1/collections_framework_overview.png" alt="collections framework overview"></p><h3 id="28-2-List"><a href="#28-2-List" class="headerlink" title="28.2. List"></a>28.2. List</h3><p><img src="/2018/12/31/java1/List_API_class_diagram.png" alt="List API class diagram"></p><h3 id="28-3-Set"><a href="#28-3-Set" class="headerlink" title="28.3. Set"></a>28.3. Set</h3><p><img src="/2018/12/31/java1/Set_API_class_diagram.png" alt="Set API class diagram"></p><h3 id="28-4-Map"><a href="#28-4-Map" class="headerlink" title="28.4. Map"></a>28.4. Map</h3><p><img src="/2018/12/31/java1/Map_API_class_diagram.png" alt="Map API class diagram"></p><h3 id="28-5-Queue"><a href="#28-5-Queue" class="headerlink" title="28.5. Queue"></a>28.5. Queue</h3><p><img src="/2018/12/31/java1/Queue_API_class_diagram.png" alt="Queue API class diagram"></p><h2 id="29-Error和Exception的区别"><a href="#29-Error和Exception的区别" class="headerlink" title="29. Error和Exception的区别"></a>29. Error和Exception的区别</h2><p>Error类和Exception类的父类都是throwable类，他们的区别是：</p><ul><li>Error类一般是指与虚拟机相关的问题，如系统崩溃，虚拟机错误，内存空间不足，方法调用栈溢等。对于这类错误的导致的应用程序中断，仅靠程序本身无法恢复和和预防，遇到这样的错误，建议让程序终止。</li><li>Exception类表示程序可以处理的异常，可以捕获且可能恢复。遇到这类异常，应该尽可能处理异常，使程序恢复运行，而不应该随意终止异常。</li></ul><h2 id="30-用户线程（User-Thread）与守护线程（Daemon-Thread）"><a href="#30-用户线程（User-Thread）与守护线程（Daemon-Thread）" class="headerlink" title="30. 用户线程（User Thread）与守护线程（Daemon Thread）"></a>30. 用户线程（User Thread）与守护线程（Daemon Thread）</h2><ul><li>JVM中存在两种线程：用户线程和守护线程</li><li>当线程中只剩下守护线程时JVM就会退出，反之还有任意一个用户线程在，JVM都不会退出。</li><li><code>thread.setDaemon(true)</code>必须在<code>thread.start()</code>之前设置，否则会抛出IllegalThreadStateException异常。</li><li>在守护线程中产生的线程也是守护线程。</li></ul><h2 id="31-Java内存模型"><a href="#31-Java内存模型" class="headerlink" title="31. Java内存模型"></a>31. Java内存模型</h2><p>Java内存模型（Java Memory Model，JMM）用来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。Java内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存中和从内存中取出变量这样的底层细节（此处的变量与Java编程中所说的变量有所区别，它包括了实例字段、静态字段和构成数组对象的元素，但不包括局部变量与方法参数）。</p><h3 id="31-1-主内存与工作内存"><a href="#31-1-主内存与工作内存" class="headerlink" title="31.1. 主内存与工作内存"></a>31.1. 主内存与工作内存</h3><p>Java内存模型规定了所有的变量都存储在主内存（Main Memory）中。每条线程还有自己的工作内存（Working Memory），线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。</p><p><img src="/2018/12/31/java1/java_memory_model.jpg" alt="Java Memory Model"></p><h3 id="31-2-内存间交互操作"><a href="#31-2-内存间交互操作" class="headerlink" title="31.2. 内存间交互操作"></a>31.2. 内存间交互操作</h3><p>关于主内存与工作内存之间具体的交互协议，Java内存模型定义了8种操作来完成，虚拟机保证每种操作都是原子的、不可再分的：</p><ul><li>lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。</li><li>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。</li><li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li>use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li>store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。</li><li>write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。</li></ul><p>如果要把一个变量从主内存复制到工作内存，就要顺序执行read和load操作；如果要把变量从工作内存同步到主内存，就要顺序执行store和write操作。Java内存模型只要求上述两个操作必须按顺序执行，而没有保证是连续执行。</p><p>Java内存模型还规定了在执行时满足的规则：</p><ul><li>不允许read和load，store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起会写了但主内存不接受的情况出现。</li><li>不允许一个线程丢弃它最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。</li><li>不允许一个线程无原因地(没有发生任何assign操作)把数据从线程的工作内存同步回主内存中。</li><li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化(load或assign)的变量，换句话说就是对一个变量实施use和store操作之前，必须先执行了load和assign操作。</li><li>一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</li><li>如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load操作初始化变量的值。</li><li>如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许unlock一个被其它线程锁定住的变量。</li><li>对一个变量执行unlock之前，必须先把此变量同步回主内存中。</li></ul><p>这8种内存访问操作以及上述规则限制，再加上volatile的一些特殊规定，就完全确定了Java程序中哪些内存访问操作在并发下是安全的。</p><h3 id="31-3-对volatile型变量的特殊规则"><a href="#31-3-对volatile型变量的特殊规则" class="headerlink" title="31.3. 对volatile型变量的特殊规则"></a>31.3. 对volatile型变量的特殊规则</h3><p>volatile是Java虚拟机提供的最轻量级的同步机制。当一个变量定义为volatile之后，它将具备两种特性：</p><ul><li>保证此变量对所有线程的可见性。这里“可见性”是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。</li><li>禁止指令重排优化。</li></ul><p>假定T表示一个线程，V和W分别表示两个volatile变量，那么在进行read、load、use、assign、store和write时需要满足以下三条规则：</p><ul><li>只有当线程T对变量V执行的前一个动作是load时，T才能对V执行use；并且，只有当T对V执行的后一个动作是use时，T才能对V执行load。T对V的use动作可以认为是和线程T对V的load，read动作相关联，必须连续一起出现（这条规则要求在工作内存中，每次使用V前都必须先从主内存刷新最新的值，用于保证能看见其他线程对变量V所做的修改后的值）。</li><li>只有当线程T对变量V执行的前一个动作是assign时，T才能对V执行store动作；并且，只有当T对变量V执行的后一个动作是store时，线程T才能对变量V执行assign动作。线程T对变量V的assign动作可认为是和线程T对变量V的store，write动作相关联，必须连续一起出现（这条规则要求在工作内存中，每次修改V后都必须立刻同步回主内存中，用于保证其他线程可以看到自己对变量V所做的修改）。</li><li>假定动作A是线程T对变量V实施的use或assign操作，假定动作F是和动作A相关联的load或store动作，假定动作P是和动作F相应的变量V的read或write动作；类似的，假定动作B是线程T对变量W实施的use或assign动作，假定动作G是和动作B相关联的load或store动作，假定动作Q是和动作G相应的变量W的read或write动作。如果A先于B，那P先于Q（这条规则要求volatile修饰的变量不会被指令重排序优化，保证代码的执行顺序与程序的顺序相同）。</li></ul><p>为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎不可能，为此，JMM采取保守策略。下面是基于保守策略的JMM内存屏障插入策略：</p><ul><li>在每个volatile写操作的前面插入一个StoreStore屏障。</li><li>在每个volatile写操作的后面插入一个StoreLoad屏障。</li><li>在每个volatile读操作的后面插入一个LoadLoad屏障。</li><li>在每个volatile读操作的后面插入一个LoadStore屏障。</li></ul><p><strong>LoadLoad屏障</strong></p><p>序列：Load1, LoadLoad, Load2</p><p>确保Load1所要读入的数据能够在被Load2和后续的load指令访问前读入。通常能执行预加载指令或/和支持乱序处理的处理器中需要显式声明Loadload屏障，因为在这些处理器中正在等待的加载指令能够绕过正在等待存储的指令。而对于总是能保证处理顺序的处理器上，设置该屏障相当于无操作。</p><p><strong>StoreStore屏障</strong></p><p>序列：Store1, StoreStore, Store2</p><p>确保Store1的数据在Store2以及后续Store指令操作相关数据之前对其它处理器可见（例如向主存刷新数据）。通常情况下，如果处理器不能保证从写缓冲或/和缓存向其它处理器和主存中按顺序刷新数据，那么它需要使用StoreStore屏障。</p><p><strong>LoadStore屏障</strong></p><p>序列：Load1, LoadStore, Store2</p><p>确保Load1的数据在Store2和后续Store指令被刷新之前读取。在等待Store指令可以越过loads指令的乱序处理器上需要使用LoadStore屏障。</p><p><strong>StoreLoad屏障</strong></p><p>序列: Store1, StoreLoad, Load2</p><p>确保Store1的数据在被Load2和后续的Load指令读取之前对其他处理器可见。StoreLoad屏障可以防止一个后续的load指令 不正确的使用了Store1的数据，而不是另一个处理器在相同内存位置写入一个新数据。</p><h3 id="31-4-原子性、可见性与有序性"><a href="#31-4-原子性、可见性与有序性" class="headerlink" title="31.4. 原子性、可见性与有序性"></a>31.4. 原子性、可见性与有序性</h3><p>Java内存模型是围绕着在并发过程中如何处理原子性、可见性和有序性这3个特征来建立的。</p><h4 id="31-4-1-原子性（Atomicity）"><a href="#31-4-1-原子性（Atomicity）" class="headerlink" title="31.4.1. 原子性（Atomicity）"></a>31.4.1. 原子性（Atomicity）</h4><p>由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write，我们大致可以认为基本数据类型的访问读写是具备原子性的。</p><p>如果还需要更大范围的原子性保证，Java内存模型还提供了lock和unlock操作，反映到字节码指令就是monitorenter和monitorexit，反映到Java代码中就是synchronized关键字。</p><h4 id="31-4-2-可见性（Visibility）"><a href="#31-4-2-可见性（Visibility）" class="headerlink" title="31.4.2. 可见性（Visibility）"></a>31.4.2. 可见性（Visibility）</h4><p>可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介来实现可见性的，无论是普通变量还是volatile变量都是如此，普通变量与volatile变量的区别是，volatile的特殊规则保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。因此，可以说volatile保证了多线程时操作变量的可见性，而普通变量则不能保证这一点。</p><p>synchronized和final关键字也能实现可见性，synchronized的可见性是由“对一个变量执行unlock操作之前，必须先把此变量同步回主内存中”这条规则获得的。另外，final关键字也可以实现可见性，因为被final修饰的字段在构造器中一旦初始化完成，并且构造器没有把this传递出去，那在其他线程中就能看见final字段的值。</p><h4 id="31-4-3-有序性（Ordering）"><a href="#31-4-3-有序性（Ordering）" class="headerlink" title="31.4.3. 有序性（Ordering）"></a>31.4.3. 有序性（Ordering）</h4><p>Java内存模型的有序性可以总结为一句话，如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。前半句是指“线程内表现为串行的语义”，后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。<br>Java语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由“一个变量在同一时刻只允许一条线程对其进行lock操作”这条规则获得的，这条规则规定了持有同一个锁的两个同步块只能串行地进入。</p><h3 id="31-5-先行发生原则"><a href="#31-5-先行发生原则" class="headerlink" title="31.5. 先行发生原则"></a>31.5. 先行发生原则</h3><p>对于有序性，Java语言有“先行发生”（happends-before）的原则，它是判断数据是否存在竞争、线程是否安全的主要依据。依靠这个原则，我们可以通过几条规则一揽子地解决并发环境下两个操作之间是否可能存在冲突的所有问题。</p><p>先行发生是Java内存模型中定义的两项操作之间的偏序关系，如果说操作A先行发生于操作B，其实就是说在发生操作B之前，操作A产生的影响能被操作B观察到，“影响”包括修改了内存中共享变量的值、发送了消息、调用了方法等。</p><p>下面是Java内存模型下一些“天然的”先行发生关系，这些先行发生关系无须任何同步器协助就已经存在，可以在编码中直接使用。如果两个操作之间的关系不在此列，并且无法从下列规则推导出来的话，它们就没有顺序性保障，虚拟机可以随意地进行重排：</p><ul><li>程序次序规则（Program Order Rule）：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。</li><li>管程锁定规则（Monitor Lock Rule）：一个unlock操作先行发生于后面对同一个锁的lock操作。</li><li>volatile变量规则（Volatile Variable Rule）：对一个volatile变量的写操作先行发生于后面对这个变量的读取操作。</li><li>线程启动规则（Thread Start Rule）：Thread对象的<code>start()</code>方法先行发生于此线程的每一个动作。</li><li>线程终止规则（Thread Termination Rule）：线程中的所有操作都先行发生于对此线程的终止检测。</li><li>线程中断规则（Thread Interruption Rule）：对线程<code>interrupt()</code>方法的调用先行发生于被中断线程的代码检测到中断事件的发生。</li><li>对象终结规则（Finalizer Rule）：一个对象初始化完成(构造方法执行完成)先行发生于它的<code>finalize()</code>方法的开始。</li><li>传递性（Transitivity)：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。</li></ul><p>一个操作“时间上的先发生”不代表这个操作会是“先行发生”，一个操作“先行发生”不代表这个操作会是“时间上的先发生”。</p><h2 id="32-Java中的BIO，NIO，AIO分别是什么"><a href="#32-Java中的BIO，NIO，AIO分别是什么" class="headerlink" title="32. Java中的BIO，NIO，AIO分别是什么?"></a>32. Java中的BIO，NIO，AIO分别是什么?</h2><h3 id="32-1-BIO（synchronous-Blocking-IO，同步阻塞IO）"><a href="#32-1-BIO（synchronous-Blocking-IO，同步阻塞IO）" class="headerlink" title="32.1. BIO（synchronous Blocking IO，同步阻塞IO）"></a>32.1. BIO（synchronous Blocking IO，同步阻塞IO）</h3><p>如Apache，Tomcat。服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。</p><p>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。</p><h3 id="32-2-NIO（synchronous-Non-blocking-IO，同步非阻塞IO）"><a href="#32-2-NIO（synchronous-Non-blocking-IO，同步非阻塞IO）" class="headerlink" title="32.2. NIO（synchronous Non blocking IO，同步非阻塞IO）"></a>32.2. NIO（synchronous Non blocking IO，同步非阻塞IO）</h3><p>如Nginx，Netty。服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。</p><p>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。</p><h3 id="32-3-AIO（Asynchronous-non-blocking-IO，异步非阻塞IO）"><a href="#32-3-AIO（Asynchronous-non-blocking-IO，异步非阻塞IO）" class="headerlink" title="32.3. AIO（Asynchronous non blocking IO，异步非阻塞IO）"></a>32.3. AIO（Asynchronous non blocking IO，异步非阻塞IO）</h3><p>还不是特别成熟。服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理，</p><p>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。</p><h2 id="33-Serializable接口和序列化与反序列化"><a href="#33-Serializable接口和序列化与反序列化" class="headerlink" title="33. Serializable接口和序列化与反序列化"></a>33. Serializable接口和序列化与反序列化</h2><ul><li>Serializable接口没有任何方法</li><li>一个类只要实现了Serializable接口，即可被序列化</li><li>实现Serializable接口的类，在序列化时不能有不可被序列化的成员变量</li><li>通过ObjectOutputStream和ObjectInputStream对对象进行序列化及反序列化</li><li>虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化ID是否一致（即<code>private static final long serialVersionUID</code>）</li><li>transient关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中；在被反序列化后，transient变量的值被设为初始值。</li><li>在序列化过程中，如果被序列化的类中定义了<code>writeObject()</code>和<code>readObject()</code>方法，虚拟机就会试图调用对象类里的<code>writeObject()</code>和<code>readObject()</code>方法，进行用户自定义的序列化和反序列化。如果没有这样的方法，则默认调用是ObjectOutputStream的<code>defaultWriteObject()</code>方法以及ObjectInputStream的<code>defaultReadObject()</code>方法。</li></ul><p>序列化算法一般会按步骤做如下事情：</p><ul><li>将对象实例相关的类元数据输出。</li><li>递归地输出类的超类描述直到不再有超类。</li><li>类元数据完了以后，开始从最顶层的超类开始输出对象实例的实际数据值。</li><li>从上至下递归输出实例的数据。</li></ul><h2 id="34-ArrayList的subList-方法注意事项"><a href="#34-ArrayList的subList-方法注意事项" class="headerlink" title="34. ArrayList的subList()方法注意事项"></a>34. ArrayList的<code>subList()</code>方法注意事项</h2><p><code>subList()</code>方法接口为</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其返回的是原List从[fromIndex,toIndex)之间的一部分的视图（如ArrayList的内部类SubList），实际依赖于原List，且对subList的修改也会作用到原List中。</p><p>ArrayList的<code>subList()</code>结果不可以强制转换为ArrayList（否则会抛出ClassCastException异常）。</p><pre class=" language-java"><code class="language-java"><span class="token function">SubList</span><span class="token punctuation">(</span>AbstractList<span class="token operator">&lt;</span>E<span class="token operator">></span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>parentOffset <span class="token operator">=</span> fromIndex<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> offset <span class="token operator">+</span> fromIndex<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> toIndex <span class="token operator">-</span> fromIndex<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="35-Arrays的asList-方法注意事项"><a href="#35-Arrays的asList-方法注意事项" class="headerlink" title="35. Arrays的asList()方法注意事项"></a>35. Arrays的<code>asList()</code>方法注意事项</h2><p><code>Arrays.asList()</code>可将数组转换为集合，但转换得到的集合不能使用如<code>add()</code>、<code>remove()</code>和<code>clear()</code>等方法（否则会抛出UnsupportedOperationException异常）。</p><p>原因是<code>asList()</code>返回的是Arrays的内部类ArrayList，使用到的是适配器模式，并未实现集合的某些修改方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">asList</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token function">ArrayList</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token operator">==</span>null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="36-Comparator注意事项"><a href="#36-Comparator注意事项" class="headerlink" title="36. Comparator注意事项"></a>36. Comparator注意事项</h2><p>Comparator要满足自反性、传递性和对称性，否则会抛出IllegalArgumentException。</p><ul><li>自反性：x，y的比较结果和y，x的比较结果相反。</li><li>传递性：x &gt; y，y &gt; z，则x &gt; z。</li><li>对称性：x = y，则x，z的比较结果和y，z比较结果相同。</li></ul><h2 id="37-HashMap多线程下死循环问题"><a href="#37-HashMap多线程下死循环问题" class="headerlink" title="37. HashMap多线程下死循环问题"></a>37. HashMap多线程下死循环问题</h2><p>多线程<code>put()</code>时触发<code>resize()</code>，进而导致新建Entry数组，并将之前数组中每个链表都重新hash到新的数组中；由于多线程下Entry数组私有，但Entry链表中的元素共享，且由于采用头插法hash到新的链表数组中，导致链表出现环。</p><p>而当<code>get()</code>到此环，而<code>get()</code>的hash值又与此环的任何元素都不相等时，则出现死循环。</p><p><a href="http://coolshell.cn/articles/9606.html" target="_blank" rel="noopener">疫苗：Java HashMap的死循环 | | 酷 壳 - CoolShell</a></p><h2 id="38-什么是ConcurrentHashMap"><a href="#38-什么是ConcurrentHashMap" class="headerlink" title="38. 什么是ConcurrentHashMap"></a>38. 什么是ConcurrentHashMap</h2><p>ConcurrentHashMap类中包含两个静态内部类：HashEntry和Segment。HashEntry用来封装映射表的键/值对；Segment用来充当锁的角色，每个Segment对象守护整个散列映射表的若干个桶。每个桶是由若干个HashEntry对象链接起来的链表。一个ConcurrentHashMap实例中包含由若干个Segment对象组成的数组。</p><p>Segment类继承于ReentrantLock类，从而使得Segment对象能充当锁的角色。每个Segment对象用来守护其（成员对象table中）包含的若干个桶。</p><h2 id="39-Map类集合k／V能否存储null值的情况"><a href="#39-Map类集合k／V能否存储null值的情况" class="headerlink" title="39. Map类集合k／V能否存储null值的情况"></a>39. Map类集合k／V能否存储null值的情况</h2><table><thead><tr><th style="text-align:center">集合类</th><th style="text-align:center">Key允许为null</th><th style="text-align:center">Value允许为null</th><th style="text-align:center">Super</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Hashtable</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">Dictionary</td><td style="text-align:center">线程安全</td></tr><tr><td style="text-align:center">ConcurrentHashMap</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">AbstractMap</td><td style="text-align:center">分段锁技术</td></tr><tr><td style="text-align:center">TreeMap</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td><td style="text-align:center">AbstractMap</td><td style="text-align:center">线程不安全</td></tr><tr><td style="text-align:center">HashMap</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">AbstractMap</td><td style="text-align:center">线程不安全</td></tr></tbody></table><h2 id="40-SimpleDataFormat线程安全吗？"><a href="#40-SimpleDataFormat线程安全吗？" class="headerlink" title="40. SimpleDataFormat线程安全吗？"></a>40. SimpleDataFormat线程安全吗？</h2><p>SimpleDataFormat线程不安全，一般不要定义为static变量，如果定义为static则必须加锁，或者使用DataUtils工具类。</p><h2 id="41-Timer可以用来并行处理定时任务吗？"><a href="#41-Timer可以用来并行处理定时任务吗？" class="headerlink" title="41. Timer可以用来并行处理定时任务吗？"></a>41. Timer可以用来并行处理定时任务吗？</h2><p>一个Timer对象仅有一个线程，如果向Timer提交多个TimerTask，且某个TimerTask很耗时，则其他TimerTask即使到了执行时间，也仍会等待之前的task执行完毕；甚至，如果某个TimerTask抛出异常导致线程终止，则其后的TimerTask将不会执行。</p><h2 id="42-可以在多线程下使用Random吗？"><a href="#42-可以在多线程下使用Random吗？" class="headerlink" title="42. 可以在多线程下使用Random吗？"></a>42. 可以在多线程下使用Random吗？</h2><p>Random是线程安全的（由AtomicLong实现），但在多线程时可能遇到效率问题。Random的seed是AtomicLong类型，其使用CAS（compare-and-set）操作来更新；CAS在资源高度竞争时表现会变得很糟糕。</p><p>ThreadLocalRandom克服了如上Random的缺陷。</p><h2 id="43-Thread-join-是如何实现的？"><a href="#43-Thread-join-是如何实现的？" class="headerlink" title="43. Thread.join()是如何实现的？"></a>43. <code>Thread.join()</code>是如何实现的？</h2><p><code>join()</code>方法是通过<code>wait()</code>实现的。当当前线程调用<code>otherThread.join()</code>时，当前线程会获得对象otherThread的锁，调用该对象的<code>wait()</code>方法开始等待；直到otherThread唤醒当前线程。而当otherThread退出时，会在native方法中调<code>notifyAll()</code>从而唤醒当前线程，当前线程继续运行。</p><h2 id="44-GC中可回收对象的判定方法"><a href="#44-GC中可回收对象的判定方法" class="headerlink" title="44. GC中可回收对象的判定方法"></a>44. GC中可回收对象的判定方法</h2><h3 id="44-1-引用计数法"><a href="#44-1-引用计数法" class="headerlink" title="44.1. 引用计数法"></a>44.1. 引用计数法</h3><p>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。</p><p>其优点是简单，高效；缺点是很难处理循环引用。</p><h3 id="44-2-可达性分析算法"><a href="#44-2-可达性分析算法" class="headerlink" title="44.2. 可达性分析算法"></a>44.2. 可达性分析算法</h3><p>通过一系列称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC roots没有任何引用链相连（用图论的话来说，就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。</p><p>可作为GC Roots的对象包括：</p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象。</li><li>方法区中类静态属性引用的对象。</li><li>方法区中常量引用的对象。</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li></ul><h2 id="45-垃圾收集算法"><a href="#45-垃圾收集算法" class="headerlink" title="45. 垃圾收集算法"></a>45. 垃圾收集算法</h2><h3 id="45-1-标记——清除算法"><a href="#45-1-标记——清除算法" class="headerlink" title="45.1. 标记——清除算法"></a>45.1. 标记——清除算法</h3><p>标记——清除算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象（标记过程即使用可回收对象的判定方法）。</p><p>主要有两方面的不足：</p><ul><li>效率问题，标记和清除两个过程的效率都不高。</li><li>空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li></ul><h3 id="45-2-复制算法"><a href="#45-2-复制算法" class="headerlink" title="45.2. 复制算法"></a>45.2. 复制算法</h3><p>复制算法将可用内存容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另一块上，然后把已使用过的内存空间一次性清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按序分配内存即可，实现简单，运行高效。</p><p>主要的不足是将内存缩小为了原来的一半，代价较高。</p><h3 id="45-3-标记——整理算法"><a href="#45-3-标记——整理算法" class="headerlink" title="45.3. 标记——整理算法"></a>45.3. 标记——整理算法</h3><p>标记——整理算法的标记过程仍然与标记——清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><h3 id="45-4-分代收集算法"><a href="#45-4-分代收集算法" class="headerlink" title="45.4. 分代收集算法"></a>45.4. 分代收集算法</h3><p>分代收集算法，即：分代分配，分代回收。对象将根据存活的时间被分为：年轻代（Young Generation）、年老代（Old Generation）、永久代（Permanent Generation，也就是方法区）。</p><h4 id="45-4-1-年轻代"><a href="#45-4-1-年轻代" class="headerlink" title="45.4.1. 年轻代"></a>45.4.1. 年轻代</h4><p>年轻代可以分为3个区域：Eden区和两个存活区（Survivor 0、Survivor 1）。</p><ol><li>绝大多数刚创建的对象会被分配在Eden区，其中的大多数对象很快就会消亡。Eden区是连续的内存空间，因此在其上分配内存极快；</li><li>最初一次，当Eden区满的时候，执行Minor GC，将消亡的对象清理掉，并将剩余的对象复制到一个存活区Survivor0（此时，Survivor1是空白的，两个Survivor总有一个是空白的）；</li><li>下次Eden区满了，再执行一次Minor GC，将消亡的对象清理掉，将存活的对象复制到Survivor1中，然后清空Eden区；</li><li>将Survivor0中消亡的对象清理掉，将其中可以晋级的对象晋级到Old区，将存活的对象也复制到Survivor1区，然后清空Survivor0区；</li><li>当两个存活区切换了几次（HotSpot虚拟机默认15次，用-XX:MaxTenuringThreshold控制，大于该值进入老年代，但这只是个最大值，并不代表一定是这个值）之后，仍然存活的对象（其实只有一小部分，比如，我们自己定义的对象），将被复制到老年代。</li></ol><p>这种垃圾回收的方式就是复制算法。由于绝大部分的对象都是短命的，甚至存活不到Survivor中，所以，Eden区与Survivor的比例较大，HotSpot默认是8:1，即分别占新生代的80%，10%，10%。如果一次回收中，Survivor + Eden中存活下来的内存超过了10%，则需要将一部分对象分配到老年代。</p><h4 id="45-4-2-年老代"><a href="#45-4-2-年老代" class="headerlink" title="45.4.2. 年老代"></a>45.4.2. 年老代</h4><p>对象如果在年轻代存活了足够长的时间而没有被清理掉（即在几次Young GC后存活了下来），则会被复制到年老代，年老代的空间一般比年轻代大，能存放更多的对象，在年老代上发生的GC次数也比年轻代少。当年老代内存不足时，将执行Major GC，也叫Full GC。</p><p>年老代的垃圾回收方式是标记——整理算法。</p><h4 id="45-4-3-永久代"><a href="#45-4-3-永久代" class="headerlink" title="45.4.3. 永久代"></a>45.4.3. 永久代</h4><p>永久代的回收并不是必须的。</p><p>其回收有两种：常量池中的常量和无用的类信息。常量的回收很简单，没有引用了就可以被回收。对于无用的类进行回收，必须保证3点：</p><ul><li>类的所有实例都已经被回收；</li><li>加载类的ClassLoader已经被回收；</li><li>类对象的Class对象没有被引用（即没有通过反射引用该类的地方）。</li></ul><h2 id="46-Java是值传递还是引用传递？"><a href="#46-Java是值传递还是引用传递？" class="headerlink" title="46. Java是值传递还是引用传递？"></a>46. Java是值传递还是引用传递？</h2><p>Java中方法参数传递方式是按值传递。</p><ul><li>如果参数是基本类型，传递的是基本类型的字面量值的拷贝。</li><li>如果参数是引用类型，传递的是该参量所引用的对象在堆中地址值的拷贝。</li></ul><h2 id="47-线程同步的方法"><a href="#47-线程同步的方法" class="headerlink" title="47. 线程同步的方法"></a>47. 线程同步的方法</h2><ul><li>同步方法：synchronized关键字修饰的方法。</li><li>同步代码块：synchronized关键字修饰的语句块。</li><li>volatile关键字。</li><li>可重入锁：ReentrantLock类是可重入、互斥、实现了Lock接口的锁。</li><li>ThreadLocal。</li></ul><h2 id="48-Java创建线程的方式"><a href="#48-Java创建线程的方式" class="headerlink" title="48. Java创建线程的方式"></a>48. Java创建线程的方式</h2><h3 id="48-1-继承Thread类创建线程类"><a href="#48-1-继承Thread类创建线程类" class="headerlink" title="48.1. 继承Thread类创建线程类"></a>48.1. 继承Thread类创建线程类</h3><ol><li>定义Thread类的子类，并重写该类的<code>run()</code>方法，该<code>run()</code>方法的方法体就代表了线程要完成的任务。因此把<code>run()</code>方法称为执行体。</li><li>创建Thread子类的实例，即创建了线程对象。</li><li>调用线程对象的<code>start()</code>方法来启动该线程。</li></ol><h3 id="48-2-通过Runnable接口创建线程类"><a href="#48-2-通过Runnable接口创建线程类" class="headerlink" title="48.2. 通过Runnable接口创建线程类"></a>48.2. 通过Runnable接口创建线程类</h3><ol><li>定义runnable接口的实现类，并重写该接口的<code>run()</code>方法，该<code>run()</code>方法的方法体同样是该线程的线程执行体。</li><li>创建Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li><li>调用线程对象的<code>start()</code>方法来启动该线程。</li></ol><h3 id="48-3-通过Callable和Future创建线程"><a href="#48-3-通过Callable和Future创建线程" class="headerlink" title="48.3. 通过Callable和Future创建线程"></a>48.3. 通过Callable和Future创建线程</h3><ol><li><p>创建Callable接口的实现类，并实现<code>call()</code>方法，该<code>call()</code>方法将作为线程执行体，并且有返回值。</p></li><li><p>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的<code>call()</code>方法的返回值。</p></li><li><p>使用FutureTask对象作为Thread对象的target创建并启动新线程。</p></li><li><p>调用FutureTask对象的<code>get()</code>方法来获得子线程执行结束后的返回值。</p></li></ol><h2 id="49-线程池原理"><a href="#49-线程池原理" class="headerlink" title="49. 线程池原理"></a>49. 线程池原理</h2><p>java.uitl.concurrent.ThreadPoolExecutor类是线程池中最核心的一个类，其构造函数为</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                            <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                            <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                            TimeUnit unit<span class="token punctuation">,</span>                            BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                            ThreadFactory threadFactory<span class="token punctuation">,</span>                            RejectedExecutionHandler handler<span class="token punctuation">)</span></code></pre><ul><li><code>corePoolSize</code>：核心池大小，默认情况下线程不会超过核心大小。</li><li><code>maximumPoolSize</code>：最大线程数，当达到一定负载时，线程数会超过核心数，但始终小于最大线程数。当负载较轻会回收线程至核心池数量。</li><li><code>keepAliveTime</code>：表示线程没有任务执行时，的存活时间。默认情况，当线程数大于核心小于最大数量时才会启用；如果调用allowCoreThreadTimeOut(boolean)方法，线程数下界为0。</li><li><code>unit</code>：<code>keepAliveTime</code>的时间单位。</li><li><code>workQueue</code>：阻塞队列，用来存储等待执行的任务。<ul><li>ArrayBlockingQueue：基于数组的先进先出，创建时必须指定大小。</li><li>PriorityBlockingQueue：优先级队列。</li><li>LinkedBlockingQueue：基于链表的队列，默认长度为Integer.MAX_VALUE。</li><li>SynchronousQueue：不保存任务，直接创建新线程。</li></ul></li><li><code>threadFactory</code>：线程工厂。</li><li><code>handler</code>：对拒绝任务的处理策略，四种参数。<ul><li>AbortPolicy：丢弃任务并抛异常。</li><li>DiscardPolicy：丢弃任务不抛异常。</li><li>DiscardOldestPolicy：丢弃最前面的任务。</li><li>CallerRunsPolicy：交由调用线程处理。</li></ul></li></ul><p>运行流程：</p><ol><li>接收到任务。</li><li>判断已存在线程数是否大于等于核心线程数，如果不是，则创建新线程执行任务；否则转3。</li><li>判断任务队列是否有界，如果不是，将任务加入队列中；否则转4。</li><li>判断任务队列是否已满，如果不是，将任务加入队列中；否则转5。</li><li>判断已存在线程数是否等于最大线程数，如果不是，则创建新线程执行任务；否则转6。</li><li>拒绝该任务。</li></ol><p>参考：<a href="http://www.cnblogs.com/dolphin0520/p/3932921.html" target="_blank" rel="noopener">Java并发编程：线程池的使用 - 海 子 - 博客园</a></p><h2 id="50-类与类加载器的关系"><a href="#50-类与类加载器的关系" class="headerlink" title="50. 类与类加载器的关系"></a>50. 类与类加载器的关系</h2><p>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性；每个类加载器，都拥有一个独立的类名称空间。</p><p>比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义。否则，即使这两个类来源于同一个class文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。</p><p>这里所指的“相等”，包括代表类的class对象的<code>equals()</code>方法、<code>isAssignableFrom()</code>方法、<code>isInstance()</code>方法的返回结果，也包括使用<code>instanceof</code>关键字做对象所属关系判定等情况。</p><h2 id="51-双亲委派模型"><a href="#51-双亲委派模型" class="headerlink" title="51. 双亲委派模型"></a>51. 双亲委派模型</h2><p>从Java虚拟机角度来看，只存在两种类加载器：</p><ul><li>启动类加载器（Bootstrap ClassLoader）：这个类加载器使用C++语言实现，是虚拟机自身的一部分。</li><li>所有其他类加载器：这些类加载器都由Java语言实现，独立于虚拟机外部，并且全都继承自抽象类java.lang.ClassLoader。</li></ul><p>从Java开发人员角度来看，绝大多数Java程序都会用到以下3种系统提供的类加载器：</p><ul><li>启动类加载器（Bootstrap ClassLoader）：负责将存放在&lt;JAVA_HOME&gt;/lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的（仅按文件名识别，如rt.jar）类库加载到虚拟机内存中。启动类加载器无法被Java程序直接引用。</li><li>扩展类加载器（Extension ClassLoader）：由sun.misc.Launcher$ExtClassLoader实现，负责加载JAVA_HOME&gt;/lib/ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库。开发者可以直接使用扩展类加载器。</li><li>应用程序类加载器（Application ClassLoader）：由sun.misc.Launcher$AppClassLoader实现，由于这个类加载器是ClassLoader中的<code>getSystemClassLoader()</code>方法的返回值，所以一般也称它为系统类加载器。负责加载用户类路径（ClassPath)上所指定的类库。开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li></ul><p><img src="/2018/12/31/java1/parents_delegation_model.png" alt="Parents Delegation Model"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// First, check if the class has already been loaded</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ClassNotFoundException thrown if class not found</span>                <span class="token comment" spellcheck="true">// from the non-null parent class loader</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// If still not found, then invoke findClass in order</span>                <span class="token comment" spellcheck="true">// to find the class.</span>                c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此。因此，所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时，子类加载器才会尝试自己去加载。</p><h2 id="52-如何自定义类加载器"><a href="#52-如何自定义类加载器" class="headerlink" title="52. 如何自定义类加载器"></a>52. 如何自定义类加载器</h2><p>继承ClassLoader类，实现<code>findClass()</code>方法，调用父类的<code>defineClass()</code>方法，返回加载后的类。</p><p>需要被加载的类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tomcat<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自定义类加载器：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tomcat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//类加载器的名称</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//类存放的路径</span>    <span class="token keyword">private</span> String classpath <span class="token operator">=</span> <span class="token string">"/demo/target/classes/com/example/tomcat/"</span><span class="token punctuation">;</span>    <span class="token function">MyClassLoader</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">MyClassLoader</span><span class="token punctuation">(</span>ClassLoader parent<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 重写findClass方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token function">loadClassData</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">loadClassData</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileInputStream is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>classpath <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        MyClassLoader my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token string">"myLoader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> loadClass <span class="token operator">=</span> my<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.example.tomcat.Foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Foo cast <span class="token operator">=</span> <span class="token punctuation">(</span>Foo<span class="token punctuation">)</span> loadClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cast<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="53-类的生命周期"><a href="#53-类的生命周期" class="headerlink" title="53. 类的生命周期"></a>53. 类的生命周期</h2><ul><li>加载（Loading）</li><li>连接（Linking）<ul><li>验证（Verification）</li><li>准备（Preparation）</li><li>解析（Resolution）</li></ul></li><li>初始化（Initialization）</li><li>使用（Using）</li><li>卸载（Unloading）</li></ul><h2 id="54-类初始化的时机"><a href="#54-类初始化的时机" class="headerlink" title="54. 类初始化的时机"></a>54. 类初始化的时机</h2><ul><li>遇到new、getstatic、putstatic或invokestatic这4条字节码指令时，如果类没有进行过初始化，则需先触发其初始化。生成这4条指令的最常见的Java代码场景是：<ul><li>使用new关键字实例化对象的时候</li><li>读取或设置一个类的静态字段的时候</li><li>调用一个类的静态方法的时候</li></ul></li><li>使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需先触发其初始化。</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需先触发其父类的初始化。</li><li>当虚拟机启动时，用户需要指定一个要执行的主类（包含<code>main()</code>方法的那个类），虚拟机会先初始化这个主类。</li></ul><h2 id="55-类的加载过程"><a href="#55-类的加载过程" class="headerlink" title="55. 类的加载过程"></a>55. 类的加载过程</h2><h3 id="55-1-加载"><a href="#55-1-加载" class="headerlink" title="55.1. 加载"></a>55.1. 加载</h3><ol><li>通过一个类的全限定名来获取定义此类的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</li></ol><h3 id="55-2-连接"><a href="#55-2-连接" class="headerlink" title="55.2. 连接"></a>55.2. 连接</h3><h4 id="55-2-1-验证"><a href="#55-2-1-验证" class="headerlink" title="55.2.1. 验证"></a>55.2.1. 验证</h4><p>验证的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致完成4个阶段的检验动作：文件格式验证、元数据验证、字节码验证、符号引用验证。</p><h5 id="文件格式验证"><a href="#文件格式验证" class="headerlink" title="文件格式验证"></a>文件格式验证</h5><p>即验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。主要包括以下验证点：</p><ul><li>是否以魔术0xCAFEBABE开头。</li><li>主、次版本号是否在当前虚拟机处理范围之内。</li><li>常量池的常量中是否有不被支持的常量类型（检查常亮tag标识）。</li><li>指向常亮的各种索引值中是否有指向不存在的常量或不符合类型的常量。</li><li>CONSTANT_Uft8_info型的常量中是否有不符合UTF8编码的数据。</li><li>Class文件中各个部分及文件本身是否有被删除或附加的其他信息。</li><li>……</li></ul><h5 id="元数据验证"><a href="#元数据验证" class="headerlink" title="元数据验证"></a>元数据验证</h5><p>即对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范的要求。这个阶段可能包括以下验证点：</p><ul><li>这个类是否有父类（除了java.lang.Object之外，所有的类都应该有父类）。</li><li>这个类的父类是否继承了不允许被继承的类（被final修饰的类）。</li><li>如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。</li><li>类中的字段、方法是否与父类产生矛盾（如覆盖了父类的final字段，或出现不符合规则的方法重载，如方法参数一致，但返回值类型不同）。</li><li>……</li></ul><h5 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a>字节码验证</h5><p>即通过数据流河控制流分析，确定程序语义是合法的、符合逻辑的。这个阶段将对类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件，如：</p><ul><li>保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中。</li><li>保证跳转指令不会跳转到方法体以外的字节码指令上。</li><li>保证方法体中的类型转换是有效的，例如不能把父类对象赋值给子类数据类型。</li></ul><h5 id="符号引用验证"><a href="#符号引用验证" class="headerlink" title="符号引用验证"></a>符号引用验证</h5><p>即对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验。发生在虚拟机将符号引用转化为直接引用的时候，通常包括以下几个验证点：</p><ul><li>符号引用中通过字符串描述的全限定名是否能找到对应的类。</li><li>在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。</li><li>符号引用中的类、字段、方法的访问性（private、protected、public、default）是否可以被当前类访问。</li><li>……</li></ul><h4 id="55-2-2-准备"><a href="#55-2-2-准备" class="headerlink" title="55.2.2. 准备"></a>55.2.2. 准备</h4><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量使用的内存都将在方法区中进行分配。这时候进行内存分配的仅包括类变量（被static修饰的变量），而不包括示例变量。</p><h4 id="55-2-3-解析"><a href="#55-2-3-解析" class="headerlink" title="55.2.3. 解析"></a>55.2.3. 解析</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。</p><h3 id="55-3-初始化"><a href="#55-3-初始化" class="headerlink" title="55.3. 初始化"></a>55.3. 初始化</h3><p>初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其他资源。即初始化阶段是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。</p><ul><li><code>&lt;clinit&gt;()</code>方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static {}块）中语句合并产生。编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但不能访问。</li><li><code>&lt;clinit&gt;()</code>方法与类的构造函数（或者说实例构造器<code>&lt;init&gt;()</code>方法）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的<code>&lt;clinit&gt;()</code>方法执行之前，父类<code>&lt;clinit&gt;()</code>方法已经执行完毕。</li><li>由于父类的<code>&lt;clinit&gt;()</code>方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作。</li><li><code>&lt;clinit&gt;()</code>方法对于类或接口来说并不是必须的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<code>&lt;clinit&gt;()</code>方法。</li><li>接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成<code>&lt;clinit&gt;()</code>方法。但接口与类不同的是，执行接口的<code>&lt;clinit&gt;()</code>方法不需要先执行父接口的<code>&lt;clinit&gt;()</code>方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的<code>&lt;clinit&gt;()</code>方法。</li><li>虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确的加锁、同步，如果多个线程同时去初始化一个类，那么只有一个线程去执行这个类的<code>&lt;clinit&gt;()</code>方法，其他线程都需要阻塞等待，直到活动线程执行<code>&lt;clinit&gt;()</code>方法完毕。</li></ul><h2 id="56-符号引用和直接引用的区别"><a href="#56-符号引用和直接引用的区别" class="headerlink" title="56. 符号引用和直接引用的区别"></a>56. 符号引用和直接引用的区别</h2><ul><li>符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标，符号可以是任意形式的字面量，只要使用时能无歧义地定位到目标即可。符号饮用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。</li><li>直接引用（Direct References）：直接引用可以时直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是和虚拟机实现内存布局相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。</li></ul><h2 id="57-如何理解平台无关性"><a href="#57-如何理解平台无关性" class="headerlink" title="57. 如何理解平台无关性"></a>57. 如何理解平台无关性</h2><p>虚拟机和字节码存储格式是实现语言无关性的基础。Java虚拟机不和包括Java在内的任何语言绑定，它只与“Class文件”这种特定的二进制文件格式所关联，Class文件中包含了Java虚拟机指令集和符号表以及若干其它辅助信息。任何一门功能性语言都可以表示为一个能被Java虚拟机所接受的有效的Class文件。</p><h2 id="58-运行时数据区域"><a href="#58-运行时数据区域" class="headerlink" title="58. 运行时数据区域"></a>58. 运行时数据区域</h2><p>Java虚拟机在执行Java程序过程中会把内存区域划分为若干个不同的数据区域，这些区域各有各自的用途、创建和销毁时间。有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。</p><p><img src="/2018/12/31/java1/java_runtime_data_areas.png" alt="Java Runtime Data Areas"></p><h3 id="58-1-程序计数器（Program-Counter-Register）"><a href="#58-1-程序计数器（Program-Counter-Register）" class="headerlink" title="58.1. 程序计数器（Program Counter Register）"></a>58.1. 程序计数器（Program Counter Register）</h3><p>程序计数器占用较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器，由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说就是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能够恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器。</p><p>如果线程正在执行Java方法，则计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，则这个计数器则为空。</p><h3 id="58-2-Java虚拟机栈（Java-Virtual-Machine-Stacks）"><a href="#58-2-Java虚拟机栈（Java-Virtual-Machine-Stacks）" class="headerlink" title="58.2. Java虚拟机栈（Java Virtual Machine Stacks）"></a>58.2. Java虚拟机栈（Java Virtual Machine Stacks）</h3><p>虚拟机栈也是线程私有，而且生命周期与线程相同，每个Java方法在执行的时候都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</p><p>Java虚拟机规范中，对该区域规定了两种异常情况：</p><ul><li>如果线程请求的栈深度大于虚拟机所允许的深度，讲抛出StackOverflowError异常；</li><li>虚拟机栈可以动态拓展，当扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</li></ul><h3 id="58-3-本地方法栈（Native-Method-Stack）"><a href="#58-3-本地方法栈（Native-Method-Stack）" class="headerlink" title="58.3. 本地方法栈（Native Method Stack）"></a>58.3. 本地方法栈（Native Method Stack）</h3><p>本地方法栈的作用与虚拟机栈作用是非常类似的。虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。</p><h3 id="58-4-Java堆（Java-Heap）"><a href="#58-4-Java堆（Java-Heap）" class="headerlink" title="58.4. Java堆（Java Heap）"></a>58.4. Java堆（Java Heap）</h3><p>对大多数应用来说，Java堆（Heap）是Java虚拟机所管理的内存中最大的一块，Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。该内存区域唯一的目的就是存放对象实例，Java对象实例以及数组都在堆上分配（随着JIT编译器发展等技术成熟，所有对象分配在堆上也渐渐不是那么“绝对”了）。</p><p>根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样（或者说，像链表一样虽然内存上不一定连续，但逻辑上是连续）。</p><h3 id="58-5-方法区（Method-Area）"><a href="#58-5-方法区（Method-Area）" class="headerlink" title="58.5. 方法区（Method Area）"></a>58.5. 方法区（Method Area）</h3><p>方法区与Java堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><h3 id="58-6-运行时常量池（Runtime-Constant-Pool）"><a href="#58-6-运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="58.6. 运行时常量池（Runtime Constant Pool）"></a>58.6. 运行时常量池（Runtime Constant Pool）</h3><p>运行时常量池是方法区的一部分。Class文件中除了有关类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p><p>运行时常量池相对于Class文件常量池的另一个重要特征是具备动态性，Java语言并非不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可以将新的常量池放入池中。</p><h2 id="59-Class文件结构"><a href="#59-Class文件结构" class="headerlink" title="59. Class文件结构"></a>59. Class文件结构</h2><p>Class文件由顺序的8位字节为基础单位构成的二进制流。各个项目严格按照顺序紧凑排列，无分隔符。Class文件只有两种数据结构：无符号数和表。</p><p>无符号数属于基本的数据类型，以u1、u2、u4、u8分别代表1个、2个、4个、8个字节的无符号数。可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成的字符串。</p><p>表由多个无符号数或其他表作为数据项构成的复合数据类型，所有表以“_info”结尾。表用来描述具有层次关系的复合结构数据。整个Class文件本质上就是一张表。</p><p>Class文件由魔数与Class文件的版本、常量池、访问标识、类索引、父类索引与接口索引集合、字段表集合、方法表集合、属性表集合等构成。</p><h3 id="59-1-魔数与Class文件的版本"><a href="#59-1-魔数与Class文件的版本" class="headerlink" title="59.1. 魔数与Class文件的版本"></a>59.1. 魔数与Class文件的版本</h3><p>每个Class文件的头4个字节称为魔数（Magic Number），它唯一作用就是用来确定文件是否能被虚拟机接受。</p><p>接下来的4个字节存储着Class文件的版本号，第五第六个字节为次版本号（Minor Version），第七第八为主版本号（Major Version）。版本号主要用于版本控制，高版本的JDK能向下兼容以前版本的Class文件，但不能运行以后版本的Class文件。</p><h3 id="59-2-常量池"><a href="#59-2-常量池" class="headerlink" title="59.2. 常量池"></a>59.2. 常量池</h3><p>紧接着版本号之后的就是常量池入口，常量池入口后面还必须有一个u2数据项作为常量池容量计数器（因为常量池数量不固定）。常量池是一个表类型的数据项，相当于Class文件的资源仓库，与Class文件其他项目关联最多，占用Class空间最大的数据项之一，且是第一个出现的表类型数据项目。</p><p>常量池主要存储两大类常量：</p><ul><li>字面量（Literal）：相当于Java语言中的常量概念，比如字符串，声明为final的常量值。</li><li>符号引用（Symbolic References）：属于编译原理方面的概念包括三类常量：<ul><li>类和接口的全限定名（Fully Qualified Name）</li><li>字段的名称和描述符（Descriptor）</li><li>方法的名称和描述符</li></ul></li></ul><h3 id="59-3-访问标识"><a href="#59-3-访问标识" class="headerlink" title="59.3. 访问标识"></a>59.3. 访问标识</h3><p>常量池之后就是由两个字节代表的访问标识（access flags），这些标识用于识别一些类或者接口层次的访问信息，包括：</p><ul><li>这个Class是类还是接口；</li><li>是否定义为public；</li><li>是否定义为abstract类型；</li><li>如果是类的话，是否被final修饰。</li></ul><h3 id="59-4-类索引、父类索引与接口索引集合"><a href="#59-4-类索引、父类索引与接口索引集合" class="headerlink" title="59.4. 类索引、父类索引与接口索引集合"></a>59.4. 类索引、父类索引与接口索引集合</h3><p>访问标志位之后就是u2类型的类索引，父类索引和接口索引集合。Class文件由这三项数据确定这个类的继承关系。这三项数据（u2类型的索引值）各指向类型为CONSTANT_Class_info的类描述符常量。</p><h3 id="59-5-字段表集合"><a href="#59-5-字段表集合" class="headerlink" title="59.5. 字段表集合"></a>59.5. 字段表集合</h3><p>字段表用于描述接口或者类中声明的变量。字段（field）包括类级变量以及实例级变量，但不包括在方法内部声明的局部变量。字段表中字段的各种描述信息（作用域比如public，private，是否被final，static修饰，是否可序列化等）均使用标志位表示，名称则引用常量池中的常量来描述。</p><h3 id="59-6-方法表集合"><a href="#59-6-方法表集合" class="headerlink" title="59.6. 方法表集合"></a>59.6. 方法表集合</h3><p>在方法表中，方法的描述和字段的描述基本一致，依次包括访问标志（access_flags）、名称索引（name_index）、描述符索引（descriptor_index）、属性表集合（attributes）几项。</p><p>方法中的代码经过编译器编译成字节码指令后存放在方法属性表集合中一个名为“Code”的属性里面。</p><p>如果父类方法在子类中没有被重写，方法表集合中就不会出现来自父类的方法信息。</p><h3 id="59-7-属性表集合"><a href="#59-7-属性表集合" class="headerlink" title="59.7. 属性表集合"></a>59.7. 属性表集合</h3><p>Class文件、字段表、方法表都可以携带自己的属性表集合，以用于描述某些场景专有的信息。</p><p>为了能正确解析Class文件，在Java SE 7中预定义了21项属性，虚拟机在运行时会忽略他不认识的属性。</p><h2 id="60-运行时栈帧结构"><a href="#60-运行时栈帧结构" class="headerlink" title="60. 运行时栈帧结构"></a>60. 运行时栈帧结构</h2><p>栈帧（Stack Frame）是用于虚拟机执行时方法调用和方法执行时的数据结构，它是虚拟栈数据区的组成元素。每一个方法从调用到方法返回都对应着一个栈帧入栈出栈的过程。</p><p>每一个栈帧在编译程序代码的时候所需要多大的局部变量表，多深的操作数栈都已经决定了，并且写入到方发表的Code属性之中，一次一个栈帧需要多少内存，不会受到程序运行期变量数据的影响，仅仅取决于具体的虚拟机实现。</p><p>一个线程中方法调用可能很长，很多方法都处于执行状态。对于执行引擎来说，只有处于栈顶的栈帧才是有效的，称为当前栈帧（Current Stack Frame），与之相关联的方法称为当前方法（Current Method）。</p><p>在概念模型上，典型的栈帧主要由局部变量表（Local Stack Frame）、操作数栈（Operand Stack）、动态链接（Dynamic Linking）、返回地址（Return Address）组成，如下图所示：</p><p><img src="/2018/12/31/java1/stack_frame.png" alt="Stack Frame"></p><h3 id="60-1-局部变量表（Local-Variable-Table）"><a href="#60-1-局部变量表（Local-Variable-Table）" class="headerlink" title="60.1. 局部变量表（Local Variable Table）"></a>60.1. 局部变量表（Local Variable Table）</h3><p>局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。在Java程序编译为Class文件时，就在方法的Code属性的max_locals数据项中确定了该方法所需要分配的局部变量表的最大容量。</p><p>在方法执行时，虚拟机是使用局部变量表完成参数值到参数变量列表的传递过程的，如果执行的是实例方法（非static的方法），那局部变量表中第0位索引的Slot默认是用于传递方法所属对象实例的引用，在方法中可以通过关键字“this”来访问到这个隐含的参数。其余参数则按照参数表顺序排列，占用从1开始的局部变量Slot，参数表分配完毕后，再根据方法体内部定义的变量顺序和作用域分配其余的Slot。</p><h3 id="60-2-操作数栈（Operand-Stack）"><a href="#60-2-操作数栈（Operand-Stack）" class="headerlink" title="60.2. 操作数栈（Operand Stack）"></a>60.2. 操作数栈（Operand Stack）</h3><p>操作数栈（Operand Stack）也常称为操作栈，是一个后入先出栈。在Class文件的Code属性的max_stacks指定了执行过程中最大的栈深度。Java 虚拟机的解释执行引擎称为”基于栈的执行引擎“，这里的栈就是指操作数栈。</p><p>方法执行中进行算术运算或者是调用其他的方法进行参数传递的时候是通过操作数栈进行的。</p><p>在概念模型中，两个栈帧是相互独立的。但是大多数虚拟机的实现都会进行优化，令两个栈帧出现一部分重叠。令下面的部分操作数栈与上面的局部变量表重叠在一块，这样在方法调用的时候可以共用一部分数据，无需进行额外的参数复制传递。</p><h3 id="60-3-动态连接（Dynamic-Linking）"><a href="#60-3-动态连接（Dynamic-Linking）" class="headerlink" title="60.3. 动态连接（Dynamic Linking）"></a>60.3. 动态连接（Dynamic Linking）</h3><p>每个栈帧都包含一个执行运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接（Dynamic Linking）。</p><p>Class文件中存放了大量的符号引用，字节码中的方法调用指令就是以常量池中指向方法的符号引用作为参数。这些符号引用一部分会在类加载阶段或第一次使用时转化为直接引用，这种转化称为静态解析。另一部分将在每一次运行期间转化为直接引用，这部分称为动态连接。</p><h3 id="60-4-方法返回地址"><a href="#60-4-方法返回地址" class="headerlink" title="60.4. 方法返回地址"></a>60.4. 方法返回地址</h3><p>当一个方法开始执行以后，只有两种方法可以退出当前方法：</p><ul><li>当执行遇到返回指令，会将返回值传递给上层的方法调用者，这种退出的方式称为正常完成出口（Normal Method Invocation Completion），一般来说，调用者的PC计数器可以作为返回地址。</li><li>当执行遇到异常，并且当前方法体内没有得到处理，就会导致方法退出，此时是没有返回值的，称为异常完成出口（Abrupt Method Invocation Completion），返回地址要通过异常处理器表来确定。</li></ul><p>当方法返回时，可能进行3个操作：</p><ul><li>恢复上层方法的局部变量表和操作数栈</li><li>把返回值压入调用者调用者栈帧的操作数栈</li><li>调整PC计数器的值以指向方法调用指令后面的一条指令</li></ul><h3 id="60-5-附加信息"><a href="#60-5-附加信息" class="headerlink" title="60.5. 附加信息"></a>60.5. 附加信息</h3><p>虚拟机规范并没有规定具体虚拟机实现包含什么附加信息，这部分的内容完全取决于具体实现。在实际开发中，一般会把动态连接，方法返回地址和附加信息全部归为一类，称为栈帧信息。</p><h2 id="61-基于栈的指令集和基于寄存器的指令集"><a href="#61-基于栈的指令集和基于寄存器的指令集" class="headerlink" title="61. 基于栈的指令集和基于寄存器的指令集"></a>61. 基于栈的指令集和基于寄存器的指令集</h2><h3 id="61-1-例子"><a href="#61-1-例子" class="headerlink" title="61.1. 例子"></a>61.1. 例子</h3><p>分别使用基于栈的指令集和基于寄存器的指令集计算“1+1”的结果，基于栈的指令集会是：</p><pre><code>iconst_1iconst_1iaddistore_0</code></pre><p>两条iconst_1指令连续把两个常量1压入栈后，iadd指令把栈顶的两个值出栈、相加，然后把结果放回栈顶，最后istore_0把栈顶的值放到局部变量表的第0个Slot中。</p><p>如果基于寄存器，那就会是：</p><pre><code>mov eax, 1add eax, 1</code></pre><p>mov指令把EAX寄存器的值设为1，然后add指令再把这个值加1，结果就保存在EAX寄存器里面。</p><h3 id="61-2-区别"><a href="#61-2-区别" class="headerlink" title="61.2. 区别"></a>61.2. 区别</h3><p>基于栈的指令集主要的优点就是可移植，寄存器由硬件直接提供，程序直接依赖这些硬件寄存器则不可避免地要受到硬件的约束。例如，现在32位80x86体系的处理器中提供了8个32位的寄存器，而ARM体系的CPU（在当前的手机、PDA中相当流行的一种处理器）则提供了16个32位的通用寄存器。如果使用栈架构的指令集，用户程序不会直接使用这些寄存器，就可以由虚拟机实现来自行决定把一些访问最频繁的数据（程序计数器、栈顶缓存等）放到寄存器中以获取尽量好的性能，这样实现起来也更加简单一些。栈架构的指令集还有一些其他的优点，如代码相对更加紧凑（字节码中每个字节就对应一条指令，而多地址指令集中还需要存放参数）、编译器实现更加简单（不需要考虑空间分配的问题，所需空间都在栈上操作）等。</p><p>栈架构指令集的主要缺点是执行速度相对来说会稍慢一些。所有主流物理机的指令集都是寄存器架构也从侧面印证了这一点。</p><p>虽然栈架构指令集的代码非常紧凑，但是完成相同功能所需的指令数量一般会比寄存器架构多，因为出栈、入栈操作本身就产生了相当多的指令数量。更重要的是，栈实现在内存之中，频繁的栈访问也就意味着频繁的内存访问，相对于处理器来说，内存始终是执行速度的瓶颈。尽管虚拟机可以采取栈顶缓存的手段，把最常用的操作映射到寄存器中避免直接内存访问，但这也只能是优化措施而不是解决本质问题的方法。由于指令数量和内存访问的原因，所以导致了栈架构指令集的执行速度会相对较慢。</p><h2 id="62-Javac编译过程"><a href="#62-Javac编译过程" class="headerlink" title="62. Javac编译过程"></a>62. Javac编译过程</h2><p>Javac编译过程大致可以分为3个过程：</p><ul><li>解析与填充符号表过程</li><li>插入式注解处理器的注解处理过程</li><li>分析与字节码生成过程</li></ul><p><img src="/2018/12/31/java1/javac_compiler.jpg" alt="Javac Compiler"></p><h3 id="62-1-解析与填充符号表过程"><a href="#62-1-解析与填充符号表过程" class="headerlink" title="62.1. 解析与填充符号表过程"></a>62.1. 解析与填充符号表过程</h3><h4 id="62-1-1-解析（词法、语法分析）"><a href="#62-1-1-解析（词法、语法分析）" class="headerlink" title="62.1.1. 解析（词法、语法分析）"></a>62.1.1. 解析（词法、语法分析）</h4><p>词法分析是将源代码的字符流转变为标记（Token）集合，单个字符是程序编写过程的最小元素，而标记则是编译过程的最小元素，关键字、变量名、字面量、运算符都可以成为编辑，如“int a+b=2”这句代码中包含了6个标记，分别是int、a、=、b、+、2，虽然关键字int由三个字符构成，但是它只是一个Token,不可再拆分。</p><p>语法分析是根据Token序列构造抽象语法树的过程，抽象语法树是一种用来描述程序代码语法结构的树形表示方式，语法树的每一个节点都代表着程序代码中的一个语法结构，例如包、类型、修饰符、运算符、接口、返回值甚至代码注释等都可以是一个语法结构。</p><h4 id="62-1-2-填充符号表"><a href="#62-1-2-填充符号表" class="headerlink" title="62.1.2. 填充符号表"></a>62.1.2. 填充符号表</h4><p>符号表是由一组符号地址和符号信息构成的表格，可以把它想象成哈希表K-V值对的形式。符号表中所登记的信息在编译的不同阶段都要用到。在语义分析中，符号表所登记的内容将用于语义检测和产生中间代码。在目标代码生成阶段，当对符号名进行地址分配时，符号表是地址分配的依据。</p><h3 id="62-2-注解处理器"><a href="#62-2-注解处理器" class="headerlink" title="62.2. 注解处理器"></a>62.2. 注解处理器</h3><p>在JDK1.6中实现了JSR-269规范，提供了一组插入式注解处理器的标准API在编译期间对注解进行处理，我们可以把它看做是一组编译器的插件，在这些插件里面，可以读取、修改、添加抽象语法树中的任意元素。如果这些插件在处理注解期间对语法树进行了修改，那么编译器将回到解析及填充符号表的过程重新处理，直到所有的插入式注解处理器都没有再对语法树进行修改位置。</p><h3 id="62-3-语义分析与字节码生成"><a href="#62-3-语义分析与字节码生成" class="headerlink" title="62.3. 语义分析与字节码生成"></a>62.3. 语义分析与字节码生成</h3><ul><li>标注检查：标注检查步骤检查的内容包括诸如变量使用前是否已被声明、变量与赋值之间的数据类型是否能够匹配等。</li><li>数据及控制流分析：数据及控制流分析是对程序上下文逻辑更进一步的验证，它可以检查出诸如程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理了等问题。</li><li>解语法糖：Java中最常用的语法糖主要是泛型、变长参数、自动装箱／拆箱等，虚拟机运行时不支持这些语法，它们在编译阶段被还原回简单的基础语法结构，这个过程称为解语法糖。</li><li>字节码生成：字节码生成是Javac编译过程的最后一个阶段。字节码生成阶段不仅仅是把前面各个步骤所生成的信息（语法树、符号表）转化成字节码写到磁盘中，编译器还进行了少量的代码添加和转换工作。</li></ul><h2 id="63-什么是JIT"><a href="#63-什么是JIT" class="headerlink" title="63. 什么是JIT"></a>63. 什么是JIT</h2><p>Java程序最初是通过解释器（Interpreter）进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁时，就会把这些代码认定为是“热点代码”（Hot Spot Code）。为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各种层次的优化，完成这个任务的编译器称为即时编译器（Just In Time Complier, JIT编译器）。</p><h2 id="64-什么是热点代码"><a href="#64-什么是热点代码" class="headerlink" title="64. 什么是热点代码"></a>64. 什么是热点代码</h2><p>在运行过程中会被即时编译器编译的“热点代码”有两类：</p><ul><li>被多次调用的方法</li><li>被多次执行的循环体</li></ul><h2 id="65-如何判断热点代码"><a href="#65-如何判断热点代码" class="headerlink" title="65. 如何判断热点代码"></a>65. 如何判断热点代码</h2><p>判断一段代码是不是热点代码，是不是需要触发即时编译，这样的行为称为热点探测（Hot Spot Detection），目前主要的热点探测判定方式有两种：</p><ul><li>基于采样的热点探测：采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这段方法代码就是“热点代码”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系，缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。</li><li>基于计数器的热点探测：采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是“热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨。</li></ul><h2 id="66-Java与C／C-的编译器对比"><a href="#66-Java与C／C-的编译器对比" class="headerlink" title="66. Java与C／C++的编译器对比"></a>66. Java与C／C++的编译器对比</h2><p>Java虚拟机的即时编译器与C/C++的静态优化编译器相比，可能会由于下列原因，而导致输出的本地代码有一些劣势（下面列举的也包括一些虚拟机执行子系统的性能劣势）：</p><ul><li>因为即时编译器运行占用的是用户程序的运行时间，具有很大的时间压力，它能提供的优化手段也严重受制于编译成本。如果编译速度达不到要求，那用户将在启动程序或程序的某部分察觉到重大延迟，这点使得即时编译器不敢随便引入大规模的优化技术，而编译的时间成本在静态优化编译器中并不是主要的关注点。</li><li>Java语言是动态的类型安全语言，这就意味着需要由虚拟机来确保程序不会违反语言语义或访问非结构化内存。从实现层面上看，这就意味着虚拟机必须频繁地进行动态检查，如实例方法访问时检查空指针、数组元素访问时检查上下界范围、类型转换时检查继承关系等。对于这类程序代码没有明确写出的检查行为，尽管编译器会努力进行优化，但是总体上仍然要消耗不少的运行时间。</li><li>Java语言中虽然没有virtual关键字，但是使用虚方法的频率却远远大于C/C++语言，这意味着运行时对方法接收者进行多态选择的频率要远远大于C/C++语言，也意味着即时编译器在进行一些优化（如方法内联）时的难度要远远大于C/C++的静态优化编译器。</li><li>Java语言是可以动态扩展的语言，运行时加载新的类可能改变程序类型的继承关系，这使得很多全局的优化难以进行，因为编译器无法看清程序的全貌，许多全局的优化都只能以激进优化的方式来完成，编译器不得不时刻注意并随着类型的变化而在运行时撤销或重新进行一些优化。</li><li>Java语言的对象内存是在堆上，只有方法的局部变量才能在栈上分配，而C/C++的对象则有多重内存分配方式，既可能在堆上分配，又可能在栈上分配，如果可以在栈上分配线程私有的对象，将减轻内存回收的压力。另外，C/C++中主要由用户用程序代码来回收分配的内存，这就不存在无用对象筛选的过程，因此效率上（仅是运行效率，排除开发效率）也比Java的垃圾收集机制要高。</li></ul><p>Java语言的这些性能上的劣势都是为了换取开发效率上的优势而付出的代价，动态安全、动态扩展、垃圾回收这些“拖后腿”的特性都为Java语言的开发效率作出了很大的贡献。Java编译器的另外一个红利时由它的动态性所带来的，由于C/C++编译器的所有优化都在编译期完成，以运行期性能监控为基础的优化措施它都无法进行，如调用频率预测（Call Frequency Prediction）、分支频率预测（Branch Frequency Prediction）、裁剪未被选择的分支（Untaken Branch Pruning）等，这些都会成为Java语言独有的性能优势。</p><h2 id="67-Java线程的实现"><a href="#67-Java线程的实现" class="headerlink" title="67. Java线程的实现"></a>67. Java线程的实现</h2><p>操作系统实现线程主要有3种方式：</p><ul><li>使用内核线程实现（一对一线程模型）</li><li>使用用户线程实现（一对多线程模型）</li><li>使用用户线程加轻量级进程混合实现（多对多线程模型）</li></ul><p>Java线程在JDK 1.2之前，是基于称为“绿色线程”（Green Threads）的用户线程实现的；而在JDK 1.2种，线程模型替换为基于操作系统原生线程模型来实现。对于Sun JDK来说，它的Windows版与Linux版都是使用一对一的线程模型实现的，一条Java线程就映射到一条轻量级进程之中，因为Windwos和Linux系统提供的线程模型就是一对一的。</p><p>线程调度主要有两种方式：</p><ul><li>协同式线程调度（Cooperative Threads-Scheduling）</li><li>抢占式线程调度（Preemptive Threads-Scheduling）</li></ul><p>Java使用的线程调度方式是抢占式调度，由操作系统自动完成。</p><h2 id="68-线程的状态和转换关系"><a href="#68-线程的状态和转换关系" class="headerlink" title="68. 线程的状态和转换关系"></a>68. 线程的状态和转换关系</h2><p>Java定义了5种线程状态，在任意一个时间点，一个线程只能有且只有其中一种状态：</p><ul><li>新建（New）：创建了但未启动</li><li>运行（Runable）：包括了操作系统线程状态中的Running和Ready。处于此状态的线程有可能正在执行，也有可能正在等待着CPU为它分配执行时间。</li><li>无限期等待（Waiting）：处于这种状态的线程不会被分配CPU执行时间，它们要等待被其他线程显式地唤醒。以下方法会触发该状态：<ul><li>没有设置Timeout参数的<code>Object.wait()</code>方法。</li><li>没有设置Timeout参数的<code>Thread.join()</code>方法。</li><li><code>LockSupport.park()</code>方法。</li></ul></li><li>限期等待（Timed Waiting）：处于这种状态的线程也不会被分配CPU执行时间，但系统在一定时间后会自动唤醒它。以下方法会触发该状态：<ul><li><code>Thread.sleep()</code>方法。</li><li>设置Timeout参数的<code>Object.wait()</code>方法。</li><li>设置Timeout参数的<code>Thread.join()</code>方法。</li><li><code>LockSupport.parkNanos()</code>方法。</li><li><code>LockSupport.parkUntil()</code>方法。</li></ul></li><li>阻塞（Blocked）：阻塞状态下是在等待着获取一个排他锁，这个事件将在另外一个线程放弃这个锁的时候发生；在程序等待进入同步区域的时候，线程将进入这个状态。</li><li>结束（Terminated）：线程已经结束执行。</li></ul><p><img src="/2018/12/31/java1/thread_state_transition.png" alt="Thread State Transition"></p><p><img src="/2018/12/31/java1/thread_life_cycle.png" alt="Thread Life Cycle"></p><h2 id="69-对象的访问定位"><a href="#69-对象的访问定位" class="headerlink" title="69. 对象的访问定位"></a>69. 对象的访问定位</h2><p>目前主流的访问对象方式有两种：</p><ul><li>使用句柄：Java堆划分出一块内存作为句柄池，reference种存储的是对象的句柄地址；而句柄中包含了对象实例数据和类型数据各自的地址。其优点是对象被移动（垃圾手机时移动对象是非常普遍的行为）时只会改变句柄中实例数据的地址，而reference本身不需要修改。</li><li>直接指针：reference中存储的直接就是对象实例数据的地址，而对象实例数据中需要有这个对象类型数据的地址。其优点是节省了一次指针定位的时间开销，速度更快。</li></ul><p><img src="/2018/12/31/java1/handler_access.png" alt="Handler Access"></p><p><img src="/2018/12/31/java1/direct_pointer_access.png" alt="Direct Pointer Access"></p><h2 id="70-Java有哪些语法糖"><a href="#70-Java有哪些语法糖" class="headerlink" title="70. Java有哪些语法糖"></a>70. Java有哪些语法糖</h2><ul><li>泛型与类型擦除</li><li>自动装箱、拆箱与遍历循环</li><li>条件编译</li></ul><h2 id="71-Java线程安全的实现"><a href="#71-Java线程安全的实现" class="headerlink" title="71. Java线程安全的实现"></a>71. Java线程安全的实现</h2><h3 id="71-1-互斥同步（Mutual-Exclusion-amp-Synchronization）"><a href="#71-1-互斥同步（Mutual-Exclusion-amp-Synchronization）" class="headerlink" title="71.1. 互斥同步（Mutual Exclusion &amp; Synchronization）"></a>71.1. 互斥同步（Mutual Exclusion &amp; Synchronization）</h3><p>同步是指在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一个（或一些）线程使用。而互斥是实现同步的一种手段，临界区（Critical Section）、互斥量（Mutex）和信号量（Semaphore）都是主要的互斥实现方式。互斥是因，同步是果；互斥是方法，同步是目的。</p><p>最基本的互斥同步手段时synchronized关键字，synchronized关键字在编译后，会在同步块的前后分别形成monitorenter和monitorexit这两个字节码指令，这两个字节码都需要一个reference类型参数来指明要锁定和解锁的对象；如果没有指明，那就根据synchronized修饰的是实例方法还是类方法，去取对象的实例或Class对象来作为锁对象。</p><p>在执行monitorenter指令时，首先要尝试获取对象的锁。如果这个对象没被锁定，或者当前线程已经拥有了那个对象锁，则把锁的计数器加1；相应地，在monitorexit时，锁的计数器减1，当计数器减到0时，锁就被释放了。如果获取对象锁失败，则当前线程就要阻塞等待，直到对象锁被另一线程释放。</p><p>synchronized同步块对于同一条线程来说是可重入的，不会出现自己把自己锁死的情况；同步块在已进入的线程执行完前，会阻塞后面其他线程的进入。如果要阻塞或唤醒一个线程，都需要操作系统来帮忙完成，这就需要从用户态转换到和心态，因此状态转换需要耗费很多时间。</p><p>除synchronized外，还可以使用java.util.concurrent包中的重入锁（ReentrantLock）来实现同步。ReentrantLock表现为API层面的互斥锁（look()和unlock()方法），synchronized表现为原生语法层面的互斥锁。ReentrantLock还增加了以下高级功能：</p><ul><li>等待可中断。当持有锁的线程长期不释放时，正在等待的线程可以选择放弃等待。</li><li>公平锁。多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；而非公平锁则在锁被释放时，任何一个等待锁的线程都有机会获得锁。synchronized中的锁是非公平的，ReentrantLock默认是非公平的，但可通过设置使用公平锁。</li><li>锁可绑定多个条件。ReentrantLock对象可以同时绑定多个Condition对象。在synchronized中，锁对象的wait()和notify()或notifyAll()方法可以实现一个隐含的条件，如果要和多个条件关联，就需要添加额外的锁；而ReentrantLock则只需要多次调用newCondition()方法即可。</li></ul><h3 id="71-2-非阻塞同步（Non-Blocking-Synchronization）"><a href="#71-2-非阻塞同步（Non-Blocking-Synchronization）" class="headerlink" title="71.2. 非阻塞同步（Non-Blocking Synchronization）"></a>71.2. 非阻塞同步（Non-Blocking Synchronization）</h3><p>通俗地说，就是先进行操作，如果没有其他线程争用共享数据，那操作就成功了；如果共享数据有争用，产生了冲突，那就再采取其他的补偿措施（最常见的补偿措施就是不断重试，直到成功为止）。</p><p>非阻塞同步需要硬件指令的支持，常用的有：</p><ul><li>测试并设置（Test-and-Set）</li><li>获取并增加（Fetch-and-Increment）</li><li>交换（Swap）</li><li>比较和交换（Compare-and-Swap, CAS）</li><li>加载链接／条件存储（Load-Linked/Store-Conditional, LL/SC）</li></ul><p>CAS指令需要3个操作数，分别是内存位置（V）、旧的预期值（A）和新值（B）。CAS指令执行时，当且仅当V符合旧预期值A时，处理器用新值B更新V的值，否则它就不更新。</p><p>CAS操作由sun.misc.Unsafe类中的compareAndSwapInt()和compareAndSwapLong()等几个方法包装提供，虚拟机即时编译出来的结果就是一条平台相关的处理器CAS指令。由于Unsafe类不是提供给用户程序调用的类，我们只能通过其他的API来间接使用；如java.util.concurrent中的AtomicInteger类，其中的compareAndSet()和getAndIncrement()等方法都使用了Unsafe类的CAS操作。</p><h3 id="71-3-无同步方案"><a href="#71-3-无同步方案" class="headerlink" title="71.3. 无同步方案"></a>71.3. 无同步方案</h3><p>如果一个方法本来就不涉及共享数据，那自然就无须任何同步措施去保证正确性。</p><ul><li>可重入代码（Reentrant Code）：可以在代码执行的任何时刻中断它，转而去执行另外一段代码，而在控制权返回后，原来的程序不会出现任何错误。</li><li>线程本地存储（Thread Local Storage）：如果共享数据的可见范围限制在同一个线程之内，这样就无须同步也能保证线程之间不会出现数据争用的问题。</li></ul><h2 id="72-锁优化"><a href="#72-锁优化" class="headerlink" title="72. 锁优化"></a>72. 锁优化</h2><p>适应性自旋（Adaptive Spinning）、锁消除（Lock Elimination）、锁粗化（Lock Coarsening）、轻量级锁（Lightweight Locking）和偏向锁（Biased Locking）等，都是为了在线程之间更高效地共享数据，以解决竞争问题，提高程序执行效率。</p><h3 id="72-1-自旋锁与自适应自旋"><a href="#72-1-自旋锁与自适应自旋" class="headerlink" title="72.1. 自旋锁与自适应自旋"></a>72.1. 自旋锁与自适应自旋</h3><p>在许多应用上，共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和恢复线程并不值得。如果物理机器有一个以上的处理器，能让两个或两个以上的线程同时并行执行，我们就可以让后面请求锁的那个线程“稍等一下”，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需让县城执行一个忙循环（自旋），这项技术就是所谓的自旋锁。</p><p>自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。因此，如果锁被占用的时间很短，自旋等待效果就会非常好；反之，如果锁被占用时间很长，那么自旋的线程只会白白消耗处理器资源。因此，自旋等待时间是有限度的，如果自旋超过限定次数（默认10次）仍然没有成功获得锁，则会使用传统方式去挂起线程。</p><p>JDK 1.6中默认开启了自旋锁。</p><p>在JDK 1.6中引入了自适应自旋锁。自适应意味着自旋的时间不再固定了，而是由前一次在同一锁上的自旋时间及锁的拥有者的状态来决定。</p><h3 id="72-2-锁消除"><a href="#72-2-锁消除" class="headerlink" title="72.2. 锁消除"></a>72.2. 锁消除</h3><p>锁消除是指虚拟机即时编译器在运行时，对一些代码上要求同步，但被检测到不可能存在共享数据竞争的锁进行消除。锁消除的主要判定依据来源于逃逸分析的数据支持。</p><h3 id="72-3-锁粗化"><a href="#72-3-锁粗化" class="headerlink" title="72.3. 锁粗化"></a>72.3. 锁粗化</h3><p>如果虚拟机探测到有一串连续的操作都对同一个对象加锁，将会把加锁同步的范围扩大（粗化）到整个操作序列的外部，这样只需要加一次锁就可以了。</p><h3 id="72-4-轻量级锁"><a href="#72-4-轻量级锁" class="headerlink" title="72.4. 轻量级锁"></a>72.4. 轻量级锁</h3><p>轻量级锁并不是用来代替重量级锁的，它的本意是在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥产生的性能消耗。</p><p>HotSpot虚拟机的对象头（Object Header）分为两部分信息：第一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄（Generational GC Age）等，这部分数据长度为32位或64位，称为“Mark Word”。其内容可以是：</p><p>| 存储内容 | 标志位 | 状态 |<br>| 对象哈希码、对象分代年龄 | 01 | 未锁定<br>| 指向锁记录的指针 | 00 | 轻量级锁定 |<br>| 指向重量级锁的指针 | 10 | 膨胀（重量级锁定） |<br>| 空，不需要记录信息 | 11 | GC标记 |<br>| 偏向线程ID、偏向时间戳、对象分代年龄 | 01 | 可偏向 |</p><p>在代码进入同步块的时候，如果此同步对象没有被锁定（锁标志位为“01”状态），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝（Displaced Mark Word）。</p><p>然后虚拟机使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针。如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位（Mark Word的最后2 bit）将转变为“00”，即表示此对象处于轻量级锁定状态。</p><p>如果这个更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈，如果只说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行；否则说明这个锁对象已经被其他线程抢占了，这时轻量级锁膨胀为重量级锁，锁标志的状态值变为“10”，Mark Word中存储的就是指向重量级锁（互斥锁）得指针。</p><p>轻量级锁得解锁过程也是通过CAS操作来进行。如果对象的Mark Word仍然指向线程的锁记录，那就用CAS操作把对象当前的Mark Word和线程中复制的Displaced Mark Word替换回来。如果替换成功，则整个同步过程完成；否则说明有其他线程尝试获取该锁，则需要在释放锁的同时，唤醒被挂起的线程。</p><p>轻量级锁能提升程序同步性能的依据是：对于绝大部分的锁，在整个同步周期内度不是存在竞争的。</p><h3 id="72-5-偏向锁"><a href="#72-5-偏向锁" class="headerlink" title="72.5. 偏向锁"></a>72.5. 偏向锁</h3><p>偏向锁的目的是消除数据在无竞争情况下的同步原语，进一步提高程序的运行性能。如果说轻量级锁是在无竞争的情况下使用CAS操作去消除同步使用的互斥量，那偏向锁就是在无竞争的情况下把整个同步都消除掉，连CAS操作都不需要。</p><p>偏向锁的意思是这个锁会偏向于第一个获得它的线程，如果在接下来的执行过程中，该锁没有被其他的线程获取，则持有偏向锁的线程将永远不需要再进行同步。</p><p>当锁对象第一次被线程获取的时候，虚拟机会将会把对象头中的标志位设置为“01”，即偏向模式。同时使用CAS操作把获取到这个锁的线程ID记录在对象的Mark Word中，如果CAS操作成功，持有偏向锁的线程以后每次进入这个锁相关的同步块时，虚拟机都可以不再进行任何同步操作。</p><p>当有另外一个线程去尝试获取这个锁时，偏向模式就宣告结束。根据锁对象目前是否处于被锁定的状态，撤销偏向（Revoke Bias）后恢复到未锁定（标志位为“01”）或轻量级锁定（标志位为“00”）的状态，后续的同步操作如轻量级锁那样执行。</p><h2 id="73-如何理解Java是一门静态多分派且动态单分派的语言？"><a href="#73-如何理解Java是一门静态多分派且动态单分派的语言？" class="headerlink" title="73. 如何理解Java是一门静态多分派且动态单分派的语言？"></a>73. 如何理解Java是一门静态多分派且动态单分派的语言？</h2><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>Fruit fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"People eat Fruit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>Apple apple<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"People eat Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>Fruit fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boy eats Fruit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>Apple apple<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boy eats Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行：</p><pre class=" language-java"><code class="language-java">People boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Fruit apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>boy<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：</p><pre class=" language-text"><code class="language-text">Boy eats Fruit</code></pre><h2 id="74-为什么synchronized修饰的变量推荐定义为final？"><a href="#74-为什么synchronized修饰的变量推荐定义为final？" class="headerlink" title="74. 为什么synchronized修饰的变量推荐定义为final？"></a>74. 为什么synchronized修饰的变量推荐定义为final？</h2><p>因为非final变量的引用常常会改变，一旦锁改变了，那synchronization就失去了意义。同时，也不推荐使用String对象作为synchronized代码块的锁，即使是<code>final String</code>。因为String存放在内存的String变量池中，可能会有其他代码或者第三方的代码使用了同一个String对象为锁，这样容易导致一些无法预测的问题。</p><h2 id="75-Object类有哪些方法"><a href="#75-Object类有哪些方法" class="headerlink" title="75. Object类有哪些方法"></a>75. Object类有哪些方法</h2><ul><li><code>protected Object clone()</code>：创建并返回此对象的一个副本。</li><li><code>boolean equals(Object obj)</code>：指示某个其他对象是否与此对象“相等”。</li><li><code>protected void finalize()</code>：当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。</li><li><code>Class&lt;? extendsObject&gt; getClass()</code>：返回一个对象的运行时类。</li><li><code>int hashCode()</code>：返回该对象的哈希码值。</li><li><code>void notify()</code>：唤醒在此对象监视器上等待的单个线程。</li><li><code>void notifyAll()</code>：唤醒在此对象监视器上等待的所有线程。</li><li><code>String toString()</code>：返回该对象的字符串表示。</li><li><code>void wait()</code>：导致当前的线程等待，直到其他线程调用此对象的<code>notify()</code>方法或<code>notifyAll()</code>方法。</li><li><code>void wait(long timeout)</code>：导致当前的线程等待，直到其他线程调用此对象的<code>notify()</code>方法或<code>notifyAll()</code>方法，或者超过指定的时间量。</li><li><code>void wait(long timeout, int nanos)</code>：导致当前的线程等待，直到其他线程调用此对象的<code>notify()</code>方法或<code>notifyAll()</code>方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量。</li></ul><h2 id="76-sleep-和wait-的区别"><a href="#76-sleep-和wait-的区别" class="headerlink" title="76. sleep()和wait()的区别"></a>76. <code>sleep()</code>和<code>wait()</code>的区别</h2><p><img src="/2018/12/31/java1/thread_state_transition_2.jpg" alt="Thread State Transition"></p><ul><li><code>sleep()</code>是Thread类的方法，<code>wait()</code>是Object类中定义的方法。</li><li><code>Thread.sleep()</code>不会导致锁行为的改变，如果当前线程是拥有锁的，那么<code>Thread.sleep()</code>不会让线程释放锁。</li><li><code>Thread.sleep()</code>和<code>Object.wait()</code>都会暂停当前的线程，对于CPU资源来说，不管是哪种方式暂停的线程，都表示它暂时不再需要CPU的执行时间。区别是，调用<code>wait()</code>后，需要别的线程执行<code>notify()</code>/<code>notifyAll()</code>才能够重新获得CPU执行时间。</li></ul><h2 id="77-Java版本历史与特性"><a href="#77-Java版本历史与特性" class="headerlink" title="77. Java版本历史与特性"></a>77. Java版本历史与特性</h2><h3 id="77-1-Java-8"><a href="#77-1-Java-8" class="headerlink" title="77.1. Java 8"></a>77.1. Java 8</h3><ul><li>Lambda表达式；</li><li>Pipelines和Streams；</li><li>Date和Time API；</li><li>Default方法；</li><li>Type注解；</li><li>Nashhorn JavaScript引擎；</li><li>并发计数器；</li><li>Parallel操作；</li><li>移除PermGen Error；</li><li>TLS SNI。</li></ul><h3 id="77-2-Java-7"><a href="#77-2-Java-7" class="headerlink" title="77.2. Java 7"></a>77.2. Java 7</h3><ul><li>switch语句块中允许以字符串作为分支条件；</li><li>在创建泛型对象时应用类型推断；</li><li>在一个语句块中捕获多种异常；</li><li>支持动态语言；</li><li>支持try-with-resources；</li><li>引入Java NIO.2开发包；</li><li>数值类型可以用2进制字符串表示，并且可以在字符串表示中添加下划线；</li><li>钻石型语法；</li><li>null值的自动处理。</li></ul><h3 id="77-3-Java-6"><a href="#77-3-Java-6" class="headerlink" title="77.3. Java 6"></a>77.3. Java 6</h3><ul><li>支持脚本语言；</li><li>引入JDBC 4.0 API；</li><li>引入Java Compiler API；</li><li>可插拔注解；</li><li>增加对Native PKI(Public Key Infrastructure)、Java GSS(Generic Security Service)、Kerberos和LDAP(Lightweight Directory Access Protocol)的支持；</li><li>继承Web Services；</li><li>做了很多优化。</li></ul><h3 id="77-4-Java-5"><a href="#77-4-Java-5" class="headerlink" title="77.4. Java 5"></a>77.4. Java 5</h3><ul><li>引入泛型；</li><li>增强循环，可以使用迭代方式；</li><li>自动装箱与自动拆箱；</li><li>类型安全的枚举；</li><li>可变参数；</li><li>静态引入；</li><li>元数据（注解）；</li><li>引入Instrumentation。</li></ul><h2 id="78-ThreadLocal原理"><a href="#78-ThreadLocal原理" class="headerlink" title="78. ThreadLocal原理"></a>78. ThreadLocal原理</h2><p>ThreadLocal类似Map。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap threadLocals <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">ThreadLocalMap <span class="token function">getMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">,</span> T firstValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    t<span class="token punctuation">.</span>threadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="79-HashMap（Java-7）"><a href="#79-HashMap（Java-7）" class="headerlink" title="79. HashMap（Java 7）"></a>79. HashMap（Java 7）</h2><h3 id="79-1-构造函数"><a href="#79-1-构造函数" class="headerlink" title="79.1. 构造函数"></a>79.1. 构造函数</h3><p>主要是对如下几个变量的初始化：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> threshold<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 所能容纳的key-value对极限 </span><span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 负载因子</span><span class="token keyword">int</span> modCount<span class="token punctuation">;</span>  <span class="token keyword">int</span> size<span class="token punctuation">;</span></code></pre><ul><li><code>loadFactor</code>：Load factor为负载因子(默认值是0.75)。</li><li><code>threshold</code>：<code>Entry</code>数组初始化长度<code>length</code>默认值为16，<code>threshold</code>是HashMap所能容纳的最大数据量的<code>Entry</code>(键值对)个数。<code>threshold = length * Load factor</code>。</li><li><code>size</code>：HashMap中实际存在的键值对数量。</li><li><code>modCount</code>：主要用来记录HashMap内部结构发生变化的次数，主要用于迭代的快速失败。内部结构发生变化指的是结构发生变化，例如<code>put()</code>新键值对，但是某个key对应的value值被覆盖不属于结构变化。</li></ul><h3 id="79-2-确定索引位置"><a href="#79-2-确定索引位置" class="headerlink" title="79.2. 确定索引位置"></a>79.2. 确定索引位置</h3><p>HashMap定位数组索引位置，直接决定了<code>hash()</code>方法的离散性能。Hash算法本质上就是三步：取key的hashCode值、高位运算、取模运算。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    h <span class="token operator">^=</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> h <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">indexFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>hash()</code>主要是用来“扰动”，<code>indexFor()</code>直接取hash的低位作为数组索引，所以扰动的目的就是混合<code>hashCode()</code>的高位和低位，以此来加大低位的随机性。</p><h3 id="79-3-put"><a href="#79-3-put" class="headerlink" title="79.3. put()"></a>79.3. <code>put()</code></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. table为空则创建</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> EMPTY_TABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">inflateTable</span><span class="token punctuation">(</span>threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. key为null则单独处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">putForNullKey</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 计算hash并得到数组索引</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. key存在则直接覆盖value</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">recordAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5. key不存在则添加</span>    <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="79-3-1-inflateTable"><a href="#79-3-1-inflateTable" class="headerlink" title="79.3.1. inflateTable()"></a>79.3.1. <code>inflateTable()</code></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inflateTable</span><span class="token punctuation">(</span><span class="token keyword">int</span> toSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token function">roundUpToPowerOf2</span><span class="token punctuation">(</span>toSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>inflateTable()</code>创建table，table大小永远是2的幂次，是为了计算<code>indexFor()</code>方便。</p><h4 id="79-3-2-putForNullKey"><a href="#79-3-2-putForNullKey" class="headerlink" title="79.3.2. putForNullKey()"></a>79.3.2. <code>putForNullKey()</code></h4><p><code>putForNullKey()</code>与正常的<code>put()</code>非常相似，只不过将数组索引指定为0。</p><h4 id="79-3-3-addEntry"><a href="#79-3-3-addEntry" class="headerlink" title="79.3.3. addEntry()"></a>79.3.3. <code>addEntry()</code></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        hash <span class="token operator">=</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        bucketIndex <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">createEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> bucketIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">createEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token function">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> K k<span class="token punctuation">,</span> V v<span class="token punctuation">,</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    value <span class="token operator">=</span> v<span class="token punctuation">;</span>    next <span class="token operator">=</span> n<span class="token punctuation">;</span>    key <span class="token operator">=</span> k<span class="token punctuation">;</span>    hash <span class="token operator">=</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>addEntry()</code>首先判断是否需要扩容（<code>size &gt;= threshold</code>），若需要则首先<code>resize()</code>扩容，重新计算数组索引，最后<code>createEntry()</code>插入到table中。<code>createEntry()</code>即采用头插法将新的<code>Entry</code>插入到table中。</p><h3 id="79-4-扩容机制"><a href="#79-4-扩容机制" class="headerlink" title="79.4. 扩容机制"></a>79.4. 扩容机制</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">==</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">transfer</span><span class="token punctuation">(</span>newTable<span class="token punctuation">)</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTable<span class="token punctuation">;</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> newTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">:</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            e<span class="token punctuation">.</span>hash <span class="token operator">=</span> null <span class="token operator">==</span> e<span class="token punctuation">.</span>key <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            e <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>resize()</code>创建一个大小为<code>2*table.length</code>的<code>Entry</code>数组，然后通过<code>transfer()</code>将原<code>Entry</code>数组中的元素重新hash到新的<code>Entry</code>数组中。这里插入到新table仍然采用头插法。</p><h3 id="79-5-get"><a href="#79-5-get" class="headerlink" title="79.5. get()"></a>79.5. <code>get()</code></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">getForNullKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> entry <span class="token operator">=</span> <span class="token function">getEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null <span class="token operator">==</span> entry <span class="token operator">?</span> null <span class="token operator">:</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> V <span class="token function">getForNullKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">getEntry</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span><span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>get()</code>时，通过key找到入口<code>Entry</code>，再采用单链表遍历的方式找到真正的Entry（<code>e.hash == hash &amp;&amp; (e.key == key || (key != null &amp;&amp; key.equals(e.key))</code>），最后返回value。</p><p>参考：<a href="https://tech.meituan.com/java-hashmap.html" target="_blank" rel="noopener">Java 8系列之重新认识HashMap</a></p><h2 id="80-Java-8对HashMap的改进"><a href="#80-Java-8对HashMap的改进" class="headerlink" title="80. Java 8对HashMap的改进"></a>80. Java 8对HashMap的改进</h2><h3 id="80-1-hash"><a href="#80-1-hash" class="headerlink" title="80.1. hash()"></a>80.1. <code>hash()</code></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Java 8中<code>hash()</code>仅扰动一次，而Java 7中扰动四次。</p><h3 id="80-2-红黑树"><a href="#80-2-红黑树" class="headerlink" title="80.2. 红黑树"></a>80.2. 红黑树</h3><p>Java 7中HashMap采用的是位桶+链表的方式。而Java 8中采用的是位桶+链表／红黑树的方式，当某个位桶的链表的长度超过8的时候，这个链表就将转换成红黑树。</p><h3 id="80-3-resize"><a href="#80-3-resize" class="headerlink" title="80.3. resize()"></a>80.3. <code>resize()</code></h3><p>Java 7在扩容时会重新计算<code>Entry</code>的数组索引，而在Java 8中只需要看看原来的hash值新增的那个bit是1还是0就好了（table数组大小每次扩容乘2），是0的话索引没变，是1的话索引变成“原索引+oldCap”。</p><h2 id="81-如何理解NIO"><a href="#81-如何理解NIO" class="headerlink" title="81. 如何理解NIO"></a>81. 如何理解NIO</h2><h3 id="81-1-什么是NIO"><a href="#81-1-什么是NIO" class="headerlink" title="81.1. 什么是NIO"></a>81.1. 什么是NIO</h3><p>NIO包（<code>java.nio.*</code>）引入了四个关键的抽象数据类型，它们共同解决传统的I/O类中的一些问题：</p><ul><li><code>Buffer</code>：它是包含数据且用于读写的线形表结构。其中还提供了一个特殊类用于内存映射文件的I/O操作。</li><li><code>Charset</code>：它提供Unicode字符串映射到字节序列以及逆映射的操作。</li><li><code>Channels</code>：包含socket，file和pipe三种管道，它实际上是双向交流的通道。</li><li><code>Selector</code>：它将多元异步I/O操作集中到一个或多个线程中（它可以被看成是Unix中<code>select()</code>函数或Win32中<code>WaitForSingleEvent()</code>函数的面向对象版本）。</li></ul><h3 id="81-2-NIO与IO的区别"><a href="#81-2-NIO与IO的区别" class="headerlink" title="81.2. NIO与IO的区别"></a>81.2. NIO与IO的区别</h3><p>Java NIO和IO之间第一个最大的区别是，IO是面向流的，NIO是面向缓冲区的。Java IO面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。Java NIO的缓冲导向方法略有不同。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据。</p><p>Java IO的各种流是阻塞的。这意味着，当一个线程调用<code>read()</code>或<code>write()</code>时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。</p><p>Java NIO的选择器允许一个单独的线程来监视多个输入通道，你可以注册多个通道使用一个选择器，然后使用一个单独的线程来“选择”通道：这些通道里已经有可以处理的输入，或者选择已准备写入的通道。这种选择机制，使得一个单独的线程很容易来管理多个通道。</p><h3 id="81-3-为什么要使用NIO"><a href="#81-3-为什么要使用NIO" class="headerlink" title="81.3. 为什么要使用NIO"></a>81.3. 为什么要使用NIO</h3><p>NIO 的创建目的是为了让Java程序员可以实现高速I/O而无需编写自定义的本机代码。NIO将最耗时的I/O操作(即填充和提取缓冲区)转移回操作系统，因而可以极大地提高速度。</p><h2 id="82-concurrent包"><a href="#82-concurrent包" class="headerlink" title="82. concurrent包"></a>82. concurrent包</h2><p>concurrent包主要包含：</p><ul><li>大部分关于并发的接口和类：BlockingQueue、Callable、ConcurrentMap、Executor、ExecutorService、Future、Semaphore等。</li><li>所有原子操作的类：AtomicInteger、AtomicLong等。</li><li>锁相关的类：Lock、ReentrantLock、ReadWriteLock等。</li></ul><h2 id="83-当前线程wait-后会立即阻塞吗？其他线程能够进入同步块吗？"><a href="#83-当前线程wait-后会立即阻塞吗？其他线程能够进入同步块吗？" class="headerlink" title="83. 当前线程wait()后会立即阻塞吗？其他线程能够进入同步块吗？"></a>83. 当前线程<code>wait()</code>后会立即阻塞吗？其他线程能够进入同步块吗？</h2><p>当调用<code>wait()</code>时，当前线程会放弃已经获得的锁，接着会将自己park住，放弃CPU。而在notify()中会选择一个<code>wait()</code>的线程进行unpark，被unpark的线程还需要竞争锁。</p><h2 id="84-为何调用wait-可能抛出InterruptedException异常？"><a href="#84-为何调用wait-可能抛出InterruptedException异常？" class="headerlink" title="84. 为何调用wait()可能抛出InterruptedException异常？"></a>84. 为何调用<code>wait()</code>可能抛出InterruptedException异常？</h2><p>当调用线程的<code>interrupt()</code>方法时会抛出InterruptedException，因此即使当前线程因<code>wait()</code>一直被阻塞，当被唤醒时也会去检查其状态，如果其被interrupt了，就会抛出InterruptedException。</p><h2 id="85-调用notify-后等待的线程会被立刻唤醒吗？"><a href="#85-调用notify-后等待的线程会被立刻唤醒吗？" class="headerlink" title="85. 调用notify()后等待的线程会被立刻唤醒吗？"></a>85. 调用<code>notify()</code>后等待的线程会被立刻唤醒吗？</h2><p>有不同的策略。默认策略是调用<code>notify()</code>会将一个等待队列中的线程放到锁池中，等到退出同步块时再释放锁，由锁池中的线程竞争。这里“唤醒”的定义不明确，可以说“线程由等待队列移动到锁池”是唤醒，也可以说“线程得到CPU时间”是唤醒。</p><h2 id="86-notify-和notifyAll-有什么区别？"><a href="#86-notify-和notifyAll-有什么区别？" class="headerlink" title="86. notify()和notifyAll()有什么区别？"></a>86. <code>notify()</code>和<code>notifyAll()</code>有什么区别？</h2><p>注意：<code>synchronized()</code>会使线程进入锁池，<code>wait()</code>会使线程进入等待队列。只有锁池中的线程会竞争锁，等待队列中的线程不会竞争。</p><p><code>notify()</code>会将<strong>一个</strong>等待队列中的线程移动到锁池中，<code>notifyAll()</code>则会将<strong>所有</strong>等待队列中的线程移动到锁池中。</p><h2 id="87-notify-可能引发死锁。"><a href="#87-notify-可能引发死锁。" class="headerlink" title="87. notify()可能引发死锁。"></a>87. <code>notify()</code>可能引发死锁。</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">PubSub</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">pub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pub count "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sub count "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> PubSub pb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PubSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            pb<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            pb<span class="token punctuation">.</span><span class="token function">pub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如上代码会发生死锁。<code>synchronized()</code>会使线程进入锁池，<code>wait()</code>会使线程进入等待队列，<code>notify()</code>会将一个等待队列中的线程移动到锁池中。如上代码会出现多个多次调用<code>wait()</code>导致所有线程全部处于等待队列，而无线程在锁池中的情况，导致死锁。</p><h2 id="88-线程的sleep-、yield-和join-有什么区别？"><a href="#88-线程的sleep-、yield-和join-有什么区别？" class="headerlink" title="88. 线程的sleep()、yield()和join()有什么区别？"></a>88. 线程的<code>sleep()</code>、<code>yield()</code>和<code>join()</code>有什么区别？</h2><ul><li><code>sleep()</code>：线程进入阻塞状态；</li><li><code>yield()</code>：线程进入就绪状态；</li><li><code>join()</code>：线程进入阻塞状态。</li></ul><h2 id="89-类名-class与类名-this的区别"><a href="#89-类名-class与类名-this的区别" class="headerlink" title="89. 类名.class与类名.this的区别"></a>89. <code>类名.class</code>与<code>类名.this</code>的区别</h2><p><code>类名.this</code>的语法在Java语言中叫做“qualified this”。这个语法的主要用途是：在内部类的方法中，要指定某个嵌套层次的外围类的<code>this</code>引用时，使用<code>外围类名.this</code>语法。</p><p><code>类型名.class</code>的语法在Java语言中叫做“Class Literal”，类字面量。类字面量的类型是<code>java.lang.Class&lt;类型名&gt;</code>。例如说<code>Foo.class</code>的类型就是<code>Class&lt;Foo&gt;</code>，是一个引用，指向Foo类唯一对应的那个Class对象。当需要通过Class对象来做一些反射操作的时候，常常会用到类字面量的语法。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javase </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android开发相关知识总结</title>
      <link href="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/"/>
      <url>/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Android面试题"><a href="#Android面试题" class="headerlink" title="Android面试题"></a>Android面试题</h1><!-- TOC --><ul><li><a href="#1-android四大组件">1. Android四大组件</a><ul><li><a href="#11-activity">1.1. Activity</a></li><li><a href="#12-服务">1.2. 服务</a></li><li><a href="#13-内容提供程序">1.3. 内容提供程序</a></li><li><a href="#14-广播接收器">1.4. 广播接收器</a></li></ul></li><li><a href="#2-四大组件的启动方式">2. 四大组件的启动方式</a></li><li><a href="#3-画出activity的生命周期图">3. 画出Activity的生命周期图</a></li><li><a href="#4-介绍下不同场景下activity生命周期的变化过程">4. 介绍下不同场景下Activity生命周期的变化过程</a></li><li><a href="#5-当activity-a启动activity-b时生命周期执行过程">5. 当Activity A启动Activity B时，生命周期执行过程？</a></li><li><a href="#6-内存不足时系统会杀掉后台的activity若需要进行一些临时状态的保存在哪个方法进行怎么恢复数据">6. 内存不足时系统会杀掉后台的Activity，若需要进行一些临时状态的保存，在哪个方法进行？怎么恢复数据？</a></li><li><a href="#7-什么是任务">7. 什么是任务？</a></li><li><a href="#8-activity的启动模式">8. Activity的启动模式？</a></li><li><a href="#9-横竖屏切换时候activity的生命周期">9. 横竖屏切换时候activity的生命周期？</a></li><li><a href="#10-如何将一个activity设置成窗口的样式">10. 如何将一个Activity设置成窗口的样式？</a></li><li><a href="#11-activity之间的数据传递有哪些方式">11. Activity之间的数据传递有哪些方式？</a></li><li><a href="#12-fragment的好处">12. Fragment的好处：</a></li><li><a href="#13-intent的原理作用可以传递哪些类型的参数">13. Intent的原理，作用，可以传递哪些类型的参数？</a></li><li><a href="#14-intent的主要使用方法">14. Intent的主要使用方法</a><ul><li><a href="#141-启动-activity">14.1. 启动 Activity</a></li><li><a href="#142-启动服务">14.2. 启动服务</a></li><li><a href="#143-传递广播">14.3. 传递广播</a></li></ul></li><li><a href="#15-intent包含哪些信息">15. Intent包含哪些信息</a></li><li><a href="#16-什么是intent过滤器">16. 什么是Intent过滤器</a></li><li><a href="#17-service的启动方式">17. Service的启动方式</a></li><li><a href="#18-service的生命周期">18. Service的生命周期</a></li><li><a href="#19-activity怎么和service绑定怎么在activity中启动自己对应的service">19. Activity怎么和Service绑定，怎么在Activity中启动自己对应的Service？</a></li><li><a href="#20-允许绑定的已启动服务的生命周期">20. 允许绑定的已启动服务的生命周期</a></li><li><a href="#21-service中可以弹toast吗">21. Service中可以弹Toast吗？</a></li><li><a href="#22-进程的优先级">22. 进程的优先级</a><ul><li><a href="#221-前台进程">22.1. 前台进程</a></li><li><a href="#222-可视进程">22.2. 可视进程</a></li><li><a href="#223-服务进程">22.3. 服务进程</a></li><li><a href="#224-后台进程">22.4. 后台进程</a></li><li><a href="#225-空进程">22.5. 空进程</a></li></ul></li><li><a href="#23-intentservice如何工作">23. IntentService如何工作？</a></li><li><a href="#24-intentservice与service的区别">24. IntentService与Service的区别？</a></li><li><a href="#25-android-service与activity之间的通信方式">25. Android Service与Activity之间的通信方式？</a></li><li><a href="#26-broadcastreceiver简介">26. BroadcastReceiver简介</a><ul><li><a href="#261-用途">26.1. 用途</a></li><li><a href="#262-使用场景">26.2. 使用场景</a></li><li><a href="#263-实现原理">26.3. 实现原理</a></li><li><a href="#264-注册方式">26.4. 注册方式</a></li></ul></li><li><a href="#27-为什么要用contentprovider它和sql的实现上有什么差别">27. 为什么要用ContentProvider？它和SQL的实现上有什么差别？</a></li><li><a href="#28-contentprovider怎么实现数据共享">28. ContentProvider怎么实现数据共享？</a></li><li><a href="#29-android如何访问自定义contentprovider">29. Android如何访问自定义ContentProvider</a></li><li><a href="#30-android中activityintentcontent-providerservice各有什么区别">30. Android中Activity，Intent，Content Provider，Service各有什么区别。</a></li><li><a href="#31-android数据存储方式">31. Android数据存储方式？</a></li><li><a href="#32-android中常用的布局都有哪些">32. Android中常用的布局都有哪些？</a></li><li><a href="#33-androidlayout_gravity和androidgravity的区别">33. <code>android:layout_gravity</code>和<code>android:gravity</code>的区别？</a></li><li><a href="#34-android平台架构">34. Android平台架构</a><ul><li><a href="#341-系统应用">34.1. 系统应用</a></li><li><a href="#342-java-api框架">34.2. Java API框架</a></li><li><a href="#343-原生cc库">34.3. 原生C/C++库</a></li><li><a href="#344-android-runtime">34.4. Android Runtime</a></li><li><a href="#345-硬件抽象层hal">34.5. 硬件抽象层（HAL）</a></li><li><a href="#346-linux-内核">34.6. Linux 内核</a></li></ul></li><li><a href="#35-fragment生命周期">35. Fragment生命周期</a></li><li><a href="#36-activity生命周期对片段生命周期的影响">36. Activity生命周期对片段生命周期的影响</a></li><li><a href="#37-android事件分发">37. Android事件分发</a><ul><li><a href="#371-public-boolean-dispatchtoucheventmotionevent-ev">37.1. <code>public boolean dispatchTouchEvent(MotionEvent ev)</code></a></li><li><a href="#372-public-boolean-onintercepttoucheventmotionevent-ev">37.2. <code>public boolean onInterceptTouchEvent(MotionEvent ev)</code></a></li><li><a href="#373-public-boolean-ontoucheventmotionevent-ev">37.3. <code>public boolean onTouchEvent(MotionEvent ev)</code></a></li></ul></li><li><a href="#38-android系统启动过程">38. Android系统启动过程</a><ul><li><a href="#381-boot-rom">38.1. Boot ROM</a></li><li><a href="#382-boot-loader">38.2. Boot Loader</a></li><li><a href="#383-kernel">38.3. Kernel</a></li><li><a href="#384-init">38.4. init</a><ul><li><a href="#3841-本地服务">38.4.1. 本地服务</a></li><li><a href="#3842-android服务">38.4.2. Android服务</a></li></ul></li><li><a href="#385-zygote-and-dalvikart">38.5. Zygote and Dalvik（ART）</a></li><li><a href="#386-system-server">38.6. System Server</a></li><li><a href="#387-boot-completed">38.7. Boot completed</a></li></ul></li><li><a href="#39-android应用启动过程">39. Android应用启动过程</a></li><li><a href="#40-dpdipdpippi区别">40. dp，dip，dpi，ppi区别</a></li><li><a href="#41-长度和字体的推荐单位">41. 长度和字体的推荐单位</a></li><li><a href="#42-android-view绘制流程">42. Android View绘制流程</a></li><li><a href="#43-listview优化">43. ListView优化</a></li><li><a href="#44-android-binder机制">44. Android Binder机制</a></li><li><a href="#45-binder机制优点">45. Binder机制优点</a></li><li><a href="#46-asynctask简介">46. AsyncTask简介</a></li><li><a href="#47-为什么handler需要声明为static">47. 为什么Handler需要声明为static？</a></li><li><a href="#48-广播注册后不解除注册会有什么问题">48. 广播注册后不解除注册会有什么问题？</a></li><li><a href="#49-自定义view">49. 自定义View</a><ul><li><a href="#491-实现步骤">49.1. 实现步骤</a></li></ul></li><li><a href="#50-需要被重写的方法">50. 需要被重写的方法</a></li><li><a href="#51-parcelable和serializable的区别">51. Parcelable和Serializable的区别</a></li><li><a href="#52-android中的内存泄漏">52. Android中的内存泄漏</a></li><li><a href="#53-mvc和mvp的区别">53. MVC和MVP的区别</a></li><li><a href="#54-内存泄露检测有什么好方法">54. 内存泄露检测有什么好方法？</a></li><li><a href="#55-android里面为什么要设计出bundle而不是直接用map结构">55. Android里面为什么要设计出Bundle而不是直接用Map结构</a></li><li><a href="#56-在android的mvp架构中使用了什么设计模式">56. 在Android的MVP架构中，使用了什么设计模式</a></li><li><a href="#57-android动画类型">57. Android动画类型</a></li><li><a href="#58-anr和fc的区别">58. ANR和FC的区别</a></li><li><a href="#59-android中的菜单">59. Android中的菜单</a><ul><li><a href="#591-选项菜单options-menu">59.1. 选项菜单（Options menu）</a></li><li><a href="#592-上下文菜单contextual-menus">59.2. 上下文菜单（Contextual Menus）</a><ul><li><a href="#5921-浮动上下文菜单floating-context-menu">59.2.1. 浮动上下文菜单（floating context menu）</a></li></ul></li><li><a href="#593-弹出菜单popup-menu">59.3. 弹出菜单（Popup Menu）</a></li></ul></li><li><a href="#60-baseadapter中需要重载的方法">60. BaseAdapter中需要重载的方法</a></li><li><a href="#61-android数字签名要点">61. Android数字签名要点</a></li><li><a href="#62-使用相同数字签名的原因">62. 使用相同数字签名的原因</a></li><li><a href="#63-theme和sytle">63. Theme和Sytle</a><ul><li><a href="#631-style">63.1. Style</a></li><li><a href="#632-theme">63.2. Theme</a></li></ul></li><li><a href="#64-toast的时长设置">64. Toast的时长设置</a></li><li><a href="#65-触发anr的情况">65. 触发ANR的情况</a></li><li><a href="#66-serviceconnection的onserviceconnected触发条件">66. ServiceConnection的<code>onServiceConnected()</code>触发条件</a></li><li><a href="#67-android虚拟设备不支持的功能">67. Android虚拟设备不支持的功能</a></li><li><a href="#68-remoteview的应用">68. RemoteView的应用</a></li><li><a href="#69-android对hashmap做了优化后推出的新的容器类是什么">69. Android对HashMap做了优化后推出的新的容器类是什么？</a><ul><li><a href="#691-sparsearray">69.1. SparseArray</a></li><li><a href="#692-arraymap">69.2. ArrayMap</a></li></ul></li><li><a href="#70-android安全沙盒">70. Android安全沙盒</a></li><li><a href="#71-onstartcommand有哪些返回值">71. <code>onStartCommand()</code>有哪些返回值</a></li><li><a href="#72-如何创建绑定服务">72. 如何创建绑定服务</a><ul><li><a href="#721-扩展binder类">72.1. 扩展Binder类</a></li><li><a href="#722-使用messenger">72.2. 使用Messenger</a></li></ul></li><li><a href="#73-如何绑定到服务">73. 如何绑定到服务</a></li><li><a href="#74-android支持的屏幕密度">74. Android支持的屏幕密度</a></li><li><a href="#75-如何支持多种屏幕">75. 如何支持多种屏幕</a></li><li><a href="#76-什么是资源id">76. 什么是资源ID</a></li><li><a href="#77-如何处理运行时变更">77. 如何处理运行时变更</a><ul><li><a href="#771-在配置变更期间保留对象">77.1. 在配置变更期间保留对象</a></li><li><a href="#772-自行处理配置变更">77.2. 自行处理配置变更</a></li></ul></li><li><a href="#78-androidmanifestxml包括哪些内容">78. AndroidManifest.xml包括哪些内容？</a></li><li><a href="#79-用户界面如何构成">79. 用户界面如何构成？</a></li><li><a href="#80-为什么要回收bitmap的内存">80. 为什么要回收Bitmap的内存</a></li><li><a href="#81-如何优化bitmap">81. 如何优化Bitmap</a></li><li><a href="#82-如何在新进程中创建activity／service">82. 如何在新进程中创建Activity／Service</a></li><li><a href="#83-onactivityresult什么时候会失效">83. <code>onActivityResult()</code>什么时候会失效？</a></li><li><a href="#84-android崩溃捕获">84. Android崩溃捕获</a><ul><li><a href="#841-java崩溃捕获">84.1. Java崩溃捕获</a></li><li><a href="#842-native崩溃捕获">84.2. Native崩溃捕获</a></li></ul></li><li><a href="#85-android-app构建流程">85. Android APP构建流程</a></li><li><a href="#86-class文件与dex文件的区别">86. class文件与.dex文件的区别</a></li><li><a href="#87-65535问题">87. 65535问题</a><ul><li><a href="#871-原因">87.1. 原因</a></li><li><a href="#872-解决方法">87.2. 解决方法</a></li></ul></li><li><a href="#88-dalvik与jvm的区别">88. Dalvik与JVM的区别</a></li><li><a href="#89-art相对dalvik的优化">89. ART相对Dalvik的优化</a></li><li><a href="#90-android中的classloader">90. Android中的ClassLoader</a></li><li><a href="#91-classloader方式实现热修复">91. ClassLoader方式实现热修复</a></li><li><a href="#92-asynctask需要在主线程中实例化吗">92. AsyncTask需要在主线程中实例化吗？</a><ul><li><a href="#921-api-16之前">92.1. API 16之前</a></li><li><a href="#922-api-16及之后api-22之前">92.2. API 16及之后，API 22之前</a></li><li><a href="#923-api-22及之后">92.3. API 22及之后</a></li></ul></li><li><a href="#93-android消息处理机制">93. Android消息处理机制</a><ul><li><a href="#931-looper">93.1. Looper</a></li><li><a href="#932-handler">93.2. Handler</a></li></ul></li><li><a href="#94-startactivity执行流程">94. <code>startActivity()</code>执行流程</a></li></ul><!-- /TOC --><h2 id="1-Android四大组件"><a href="#1-Android四大组件" class="headerlink" title="1. Android四大组件"></a>1. Android四大组件</h2><p>应用组件是Android应用的基本构建基块。每个组件都是一个不同的点，系统可以通过它进入您的应用。并非所有组件都是用户的实际入口点，有些组件相互依赖，但每个组件都以独立实体形式存在，并发挥特定作用—-每个组件都是唯一的构建基块，有助于定义应用的总体行为。</p><p>共有四种不同的应用组件类型。每种类型都服务于不同的目的，并且具有定义组件的创建和销毁方式的不同生命周期。</p><p>以下便是这四种应用组件类型：</p><h3 id="1-1-Activity"><a href="#1-1-Activity" class="headerlink" title="1.1. Activity"></a>1.1. Activity</h3><p>Activity表示具有用户界面的单一屏幕。例如，电子邮件应用可能具有一个显示新电子邮件列表的Activity、一个用于撰写电子邮件的Activity以及一个用于阅读电子邮件的Activity。尽管这些Activity通过协作在电子邮件应用中形成了一种紧密结合的用户体验，但每一个Activity都独立于其他Activity而存在。因此，其他应用可以启动其中任何一个Activity（如果电子邮件应用允许）。例如，相机应用可以启动电子邮件应用内用于撰写新电子邮件的Activity，以便用户共享图片。</p><h3 id="1-2-服务"><a href="#1-2-服务" class="headerlink" title="1.2. 服务"></a>1.2. 服务</h3><p>服务是一种在后台运行的组件，用于执行长时间运行的操作或为远程进程执行作业。服务不提供用户界面。例如，当用户位于其他应用中时，服务可能在后台播放音乐或者通过网络获取数据，但不会阻断用户与Activity的交互。诸如Activity等其他组件可以启动服务，让其运行或与其绑定以便与其进行交互。</p><h3 id="1-3-内容提供程序"><a href="#1-3-内容提供程序" class="headerlink" title="1.3. 内容提供程序"></a>1.3. 内容提供程序</h3><p>内容提供程序管理一组共享的应用数据。您可以将数据存储在文件系统、SQLite数据库、网络上或您的应用可以访问的任何其他永久性存储位置。其他应用可以通过内容提供程序查询数据，甚至修改数据（如果内容提供程序允许）。例如，Android系统可提供管理用户联系人信息的内容提供程序。因此，任何具有适当权限的应用都可以查询内容提供程序的某一部分（如<code>ContactsContract.Data</code>），以读取和写入有关特定人员的信息。</p><p>内容提供程序也适用于读取和写入您的应用不共享的私有数据。例如，记事本示例应用使用内容提供程序来保存笔记。</p><h3 id="1-4-广播接收器"><a href="#1-4-广播接收器" class="headerlink" title="1.4. 广播接收器"></a>1.4. 广播接收器</h3><p>广播接收器是一种用于响应系统范围广播通知的组件。许多广播都是由系统发起的—-例如，通知屏幕已关闭、电池电量不足或已拍摄照片的广播。应用也可以发起广播—-例如，通知其他应用某些数据已下载至设备，并且可供其使用。尽管广播接收器不会显示用户界面，但它们可以创建状态栏通知，在发生广播事件时提醒用户。但广播接收器更常见的用途只是作为通向其他组件的”通道”，设计用于执行极少量的工作。例如，它可能会基于事件发起一项服务来执行某项工作。</p><h2 id="2-四大组件的启动方式"><a href="#2-四大组件的启动方式" class="headerlink" title="2. 四大组件的启动方式"></a>2. 四大组件的启动方式</h2><ul><li>您可以通过将Intent传递到<code>startActivity()</code>或<code>startActivityForResult()</code>（当您想让Activity返回结果时）来启动Activity（或为其安排新任务）。</li><li>您可以通过将Intent传递到<code>startService()</code>来启动服务（或对执行中的服务下达新指令）。或者，您也可以通过将Intent传递到<code>bindService()</code>来绑定到该服务。</li><li>您可以通过将Intent传递到<code>sendBroadcast()</code>、<code>sendOrderedBroadcast()</code>或<code>sendStickyBroadcast()</code>等方法来发起广播。</li><li>您可以通过在ContentResolver上调用<code>query()</code>来对内容提供程序执行查询。</li></ul><h2 id="3-画出Activity的生命周期图"><a href="#3-画出Activity的生命周期图" class="headerlink" title="3. 画出Activity的生命周期图"></a>3. 画出Activity的生命周期图</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/activity_lifecycle.png" alt="activity lifecycle"></p><h2 id="4-介绍下不同场景下Activity生命周期的变化过程"><a href="#4-介绍下不同场景下Activity生命周期的变化过程" class="headerlink" title="4. 介绍下不同场景下Activity生命周期的变化过程"></a>4. 介绍下不同场景下Activity生命周期的变化过程</h2><ul><li>启动Activity：<code>onCreate()</code> –&gt; <code>onStart()</code> –&gt; <code>onResume()</code>，Activity进入运行状态。</li><li>Activity退居后台：当前Activity转到新的Activity界面或按Home键回到主屏：<code>onPause()</code> –&gt; <code>onStop()</code>，进入停滞状态；这里有一种特殊情况，如果新Activity采用了透明主题，那么当前Activity不会回调<code>onStop()</code>。</li><li>Activity返回前台：<code>onRestart()</code> –&gt; <code>onStart()</code> –&gt; <code>onResume()</code>，再次回到运行状态。</li><li>Activity退居后台，且系统内存不足，系统会杀死这个后台状态的Activity，若再次回到这个Activity，则会走<code>onCreate()</code> –&gt; <code>onStart()</code> –&gt; <code>onResume()</code>。</li><li>锁定屏与解锁屏幕只会调用<code>onPause()</code>，而不会调用<code>onStop()</code>方法，开屏后则调用<code>onResume()</code>。</li></ul><h2 id="5-当Activity-A启动Activity-B时，生命周期执行过程？"><a href="#5-当Activity-A启动Activity-B时，生命周期执行过程？" class="headerlink" title="5. 当Activity A启动Activity B时，生命周期执行过程？"></a>5. 当Activity A启动Activity B时，生命周期执行过程？</h2><p><code>A.onPause()</code> –&gt; <code>B.onCreate()</code>，<code>B.onStart()</code>，<code>B.onResume()</code> –&gt; <code>A.onStop()</code>，如果B是个透明的，或者是对话框的样式，就不会调用<code>A.onStop()</code>。</p><h2 id="6-内存不足时系统会杀掉后台的Activity，若需要进行一些临时状态的保存，在哪个方法进行？怎么恢复数据？"><a href="#6-内存不足时系统会杀掉后台的Activity，若需要进行一些临时状态的保存，在哪个方法进行？怎么恢复数据？" class="headerlink" title="6. 内存不足时系统会杀掉后台的Activity，若需要进行一些临时状态的保存，在哪个方法进行？怎么恢复数据？"></a>6. 内存不足时系统会杀掉后台的Activity，若需要进行一些临时状态的保存，在哪个方法进行？怎么恢复数据？</h2><ul><li>Activity的<code>onSaveInstanceState()</code>和<code>onRestoreInstanceState()</code>并不是生命周期方法，它们不同于<code>onCreate()</code>、<code>onPause()</code>等生命周期方法，它们并不一定会被触发。</li><li>当应用遇到意外情况（如：内存不足、用户直接按Home键）由系统销毁一个Activity，<code>onSaveInstanceState()</code>会被调用。但是当用户主动去销毁一个Activity时，例如在应用中按返回键，<code>onSaveInstanceState()</code>就不会被调用。除非该activity是被用户主动销毁的，通常<code>onSaveInstanceState()</code>只适合用于保存一些临时性的状态，而<code>onPause()</code>适合用于数据的持久化保存。</li><li>重写<code>onSaveInstanceState()</code>方法，在此方法中保存需要保存的数据，该方法将会在activity被回收之前调用。通过重写<code>onRestoreInstanceState()</code>方法可以从中提取保存好的数据。</li></ul><h2 id="7-什么是任务？"><a href="#7-什么是任务？" class="headerlink" title="7. 什么是任务？"></a>7. 什么是任务？</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/activity_task.png" alt="Activity Task"></p><p>任务是一个有机整体，当用户开始新任务或通过“主页”按钮转到主屏幕时，可以移动到“后台”。尽管在后台时，该任务中的所有Activity全部停止，但是任务的返回栈仍旧不变，也就是说，当另一个任务发生时，该任务仅仅失去焦点而已，如图所示。然后，任务可以返回到“前台”，用户就能够回到离开时的状态。</p><h2 id="8-Activity的启动模式？"><a href="#8-Activity的启动模式？" class="headerlink" title="8. Activity的启动模式？"></a>8. Activity的启动模式？</h2><ul><li>standard（默认模式）：系统在启动Activity的任务中创建Activity的新实例并向其传送Intent。Activity可以多次实例化，而每个实例均可属于不同的任务，并且一个任务可以拥有多个实例。</li><li>singleTop：如果当前任务的顶部已存在Activity的一个实例，则系统会通过调用该实例的onNewIntent()方法向其传送Intent，而不是创建Activity的新实例。Activity可以多次实例化，而每个实例均可属于不同的任务，并且一个任务可以拥有多个实例（但前提是位于返回栈顶部的Activity并不是Activity的现有实例）。例如，假设任务的返回栈包含根Activity A以及Activity B、C和位于顶部的D（堆栈是A-B-C-D；D位于顶部）。收到针对D类Activity的Intent。如果D具有默认的”standard”启动模式，则会启动该类的新实例，且堆栈会变成A-B-C-D-D。但是，如果D的启动模式是”singleTop”，则D的现有实例会通过onNewIntent()接收Intent，因为它位于堆栈的顶部；而堆栈仍为A-B-C-D。但是，如果收到针对B类Activity的Intent，则会向堆栈添加B的新实例，即便其启动模式为”singleTop”也是如此。</li><li>singleTask：系统创建新任务并实例化位于新任务底部的Activity。但是，如果该Activity的一个实例已存在于一个单独的任务中，则系统会通过调用现有实例的onNewIntent()方法向其传送Intent，而不是创建新实例。一次只能存在Activity的一个实例。</li><li>singleInstace：与”singleTask”相同，只是系统不会将任何其他Activity启动到包含实例的任务中。该Activity始终是其任务唯一仅有的成员；由此Activity启动的任何Activity均在单独的任务中打开。</li></ul><h2 id="9-横竖屏切换时候activity的生命周期？"><a href="#9-横竖屏切换时候activity的生命周期？" class="headerlink" title="9. 横竖屏切换时候activity的生命周期？"></a>9. 横竖屏切换时候activity的生命周期？</h2><ul><li>不设置Activity的<code>android：configChanges</code>时，切屏会重新调用各个生命周期，切横屏时会执行一次，切竖屏时会执行两次。</li><li>设置Activity的<code>android：configChanges=&quot;orientation&quot;</code>时，切屏还是会重新调用各个生命周期，切横、竖屏时只会执行一次。</li><li>设置Activity的<code>android：configChanges=&quot;orientation|keyboardHidden&quot;</code>时，切屏不会重新调用各个生命周期，只会执行<code>onConfigurationChanged()</code>方法。</li></ul><h2 id="10-如何将一个Activity设置成窗口的样式？"><a href="#10-如何将一个Activity设置成窗口的样式？" class="headerlink" title="10. 如何将一个Activity设置成窗口的样式？"></a>10. 如何将一个Activity设置成窗口的样式？</h2><p>只需要给我们的Activity配置如下属性即可<code>android:theme=&quot;@android:style/Theme.Dialog&quot;</code>。</p><h2 id="11-Activity之间的数据传递有哪些方式？"><a href="#11-Activity之间的数据传递有哪些方式？" class="headerlink" title="11. Activity之间的数据传递有哪些方式？"></a>11. Activity之间的数据传递有哪些方式？</h2><ul><li><code>intent.putExtra()</code>方法；</li><li>使用全局变量Application；</li><li>使用静态变量；</li><li>剪切板ClipboardManager传递数据；</li><li>借助Application共享Handler利用消息处理机制；</li><li>使用Broadcast广播；</li><li>使用EventBus。</li></ul><h2 id="12-Fragment的好处："><a href="#12-Fragment的好处：" class="headerlink" title="12. Fragment的好处："></a>12. Fragment的好处：</h2><ul><li>Fragment可以使你能够将activity分离成多个可重用的组件，每个都有它自己的生命周期和UI。</li><li>Fragment可以轻松得创建动态灵活的UI设计，可以适应于不同的屏幕尺寸。从手机到平板电脑。</li><li>Fragment是一个独立的模块，紧紧地与activity绑定在一起。可以运行中动态地移除、加入、交换等。</li><li>Fragment提供一个新的方式让你在不同的安卓设备上统一你的UI。</li><li>Fragment解决Activity间的切换不流畅，轻量切换。</li><li>Fragment替代TabActivity做导航，性能更好。</li><li>Fragment在Android 4.2中新增嵌套fragment使用方法，能够生成更好的界面效果。</li></ul><h2 id="13-Intent的原理，作用，可以传递哪些类型的参数？"><a href="#13-Intent的原理，作用，可以传递哪些类型的参数？" class="headerlink" title="13. Intent的原理，作用，可以传递哪些类型的参数？"></a>13. Intent的原理，作用，可以传递哪些类型的参数？</h2><ul><li>Intent是连接Activity、Service、BroadcastReceiver和ContentProvider四大组件的信使，可以传递八种基本数据类型以及<code>String</code>、<code>Bundle</code>类型，以及实现了<code>Serializable</code>或者<code>Parcelable</code>的类型。</li><li><p>Intent可以划分成显式意图和隐式意图。</p><ul><li>显式意图：调用<code>Intent.setComponent()</code>或<code>Intent.setClass()</code>方法明确指定了组件名的Intent为显式意图，显式意图明确指定了Intent应该传递给哪个组件。</li><li>隐式意图：没有明确指定组件名的Intent为隐式意图。Android系统会根据隐式意图中设置的动作（<code>action</code>）、类别（<code>category</code>）、数据（URI和数据类型）找到最合适的组件来处理这个意图。</li></ul></li></ul><h2 id="14-Intent的主要使用方法"><a href="#14-Intent的主要使用方法" class="headerlink" title="14. Intent的主要使用方法"></a>14. Intent的主要使用方法</h2><h3 id="14-1-启动-Activity"><a href="#14-1-启动-Activity" class="headerlink" title="14.1. 启动 Activity"></a>14.1. 启动 Activity</h3><p>Activity表示应用中的一个屏幕。通过将Intent传递给<code>startActivity()</code>，您可以启动新的 Activity实例。Intent描述了要启动的Activity，并携带了任何必要的数据。</p><p>如果您希望在Activity完成后收到结果，请调用<code>startActivityForResult()</code>。在 Activity的<code>onActivityResult()</code>回调中，您的Activity将结果作为单独的Intent对象接收。</p><h3 id="14-2-启动服务"><a href="#14-2-启动服务" class="headerlink" title="14.2. 启动服务"></a>14.2. 启动服务</h3><p>Service是一个不使用用户界面而在后台执行操作的组件。通过将Intent传递给<code>startService()</code>，您可以启动服务执行一次性操作（例如，下载文件）。Intent描述了要启动的服务，并携带了任何必要的数据。</p><p>如果服务旨在使用客户端——服务器接口，则通过将Intent传递给<code>bindService(</code>)，您可以从其他组件绑定到此服务。</p><h3 id="14-3-传递广播"><a href="#14-3-传递广播" class="headerlink" title="14.3. 传递广播"></a>14.3. 传递广播</h3><p>广播是任何应用均可接收的消息。系统将针对系统事件（例如：系统启动或设备开始充电时）传递各种广播。通过将Intent传递给<code>sendBroadcast()</code>、<code>sendOrderedBroadcast()</code>或<code>sendStickyBroadcast()</code>，您可以将广播传递给其他应用。</p><h2 id="15-Intent包含哪些信息"><a href="#15-Intent包含哪些信息" class="headerlink" title="15. Intent包含哪些信息"></a>15. Intent包含哪些信息</h2><ul><li>组件名称：要启动的组件名称。</li><li>操作：指定要执行的通用操作（例如，“查看”或“选取”）的字符串。</li><li>数据：引用待操作数据和／或该数据MIME类型的URI（Uri对象）。提供的数据类型通常由Intent的操作决定。例如，如果操作是<code>ACTION_EDIT</code>，则数据应包含待编辑文档的URI。</li><li>类别：一个包含应处理Intent组件类型的附加信息的字符串。</li><li>Extra：携带完成请求操作所需的附加信息的键值对。</li><li>标志：在Intent类中定义的、充当Intent元数据的标志。</li></ul><h2 id="16-什么是Intent过滤器"><a href="#16-什么是Intent过滤器" class="headerlink" title="16. 什么是Intent过滤器"></a>16. 什么是Intent过滤器</h2><p>要公布应用可以接收哪些隐式Intent，请在清单文件中使用<code>&lt;intent-filter&gt;</code>元素为每个应用组件声明一个或多个Intent过滤器。每个Intent过滤器均由应用清单文件中的<code>&lt;intent-filter&gt;</code>元素定义，并嵌套在相应的应用组件（例如，<code>&lt;activity&gt;</code>元素）中。在<code>&lt;intent-filter&gt;</code>内部，您可以使用以下三个元素中的一个或多个指定要接受的Intent类型：</p><ul><li><code>&lt;action&gt;</code>：在<code>name</code>属性中，声明接受的Intent操作。该值必须是操作的文本字符串值，而不是类常量。</li><li><code>&lt;data&gt;</code>：使用一个或多个指定数据URI各个方面（scheme、host、port、path等）和MIME类型的属性，声明接受的数据类型。</li><li><code>&lt;category&gt;</code>：在<code>name</code>属性中，声明接受的Intent类别。该值必须是操作的文本字符串值，而不是类常量。</li></ul><h2 id="17-Service的启动方式"><a href="#17-Service的启动方式" class="headerlink" title="17. Service的启动方式"></a>17. Service的启动方式</h2><ul><li><code>startService()</code>：只是启动Service，Activity和Service并没有绑定，只有当Service调用<code>stopService()</code>服务才会终止。</li><li><code>bindService()</code>：这种启动方式Activity和Service进行了绑定，启动Service的组件可以通过回调获取Service的代理对象和Service交互；当启动方销毁时，Service也会自动进行<code>unBind()</code>操作，当发现所有绑定都进行了<code>unBind()</code>时才会销毁Service。</li></ul><h2 id="18-Service的生命周期"><a href="#18-Service的生命周期" class="headerlink" title="18. Service的生命周期"></a>18. Service的生命周期</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/service_lifecycle.png" alt="service lifecycle"></p><h2 id="19-Activity怎么和Service绑定，怎么在Activity中启动自己对应的Service？"><a href="#19-Activity怎么和Service绑定，怎么在Activity中启动自己对应的Service？" class="headerlink" title="19. Activity怎么和Service绑定，怎么在Activity中启动自己对应的Service？"></a>19. Activity怎么和Service绑定，怎么在Activity中启动自己对应的Service？</h2><ul><li>Activity通过<code>bindService(Intent service，ServiceConnection conn，int flags)</code>跟Service进行绑定，当绑定成功的时候Service会将代理对象通过回调的形式传给<code>conn</code>，这样我们就拿到了Service提供的服务代理对象。</li><li>在Activity中可以通过<code>startService()</code>和<code>bindService()</code>方法启动Service。一般情况下如果想获取Service的服务对象那么肯定需要通过<code>bindService()</code>方法，比如音乐播放器，第三方支付等。如果仅仅只是为了开启一个后台任务那么可以使用<code>startService()</code>方法。</li></ul><h2 id="20-允许绑定的已启动服务的生命周期"><a href="#20-允许绑定的已启动服务的生命周期" class="headerlink" title="20. 允许绑定的已启动服务的生命周期"></a>20. 允许绑定的已启动服务的生命周期</h2><p>当服务与所有客户端之间的绑定全部取消时，Android系统便会销毁服务。不过，如果您选择实现<code>onStartCommand()</code>回调方法，则您必须显式停止服务，因为系统现在已将服务视为已启动。在此情况下，服务将一直运行到其通过<code>stopSelf()</code>自行停止，或其他组件调用<code>stopService()</code>为止，无论其是否绑定到任何客户端。</p><p>此外，如果您的服务已启动并接受绑定，则当系统调用您的<code>onUnbind()</code>方法时，如果您想在客户端下一次绑定到服务时接收<code>onRebind()</code>调用，则可选择返回true。<code>onRebind()</code>返回空值，但客户端仍在其<code>onServiceConnected()</code>回调中接收IBinder。</p><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/service_binding_tree_lifecycle.png" alt="service binding tree lifecycle"></p><h2 id="21-Service中可以弹Toast吗？"><a href="#21-Service中可以弹Toast吗？" class="headerlink" title="21. Service中可以弹Toast吗？"></a>21. Service中可以弹Toast吗？</h2><ul><li>这个问题其实就是问一下Service是执行在UI线程中吗？类似的问题还有”Service的<code>onCreate()</code>回调函数可以做耗时的操作吗？”，”Service是否在main thread中执行”，”Service和Activity在同一个线程吗？”等；</li><li>我们要牢记一句真理”默认情况下四大组件都是在UI线程中执行的”，Service本身就是Context的子类，我们可以获取到Context对象，所以Service中当然可以弹Toast，同理，Service的<code>onCreate()</code>回调函数不可以做耗时的操作。</li></ul><h2 id="22-进程的优先级"><a href="#22-进程的优先级" class="headerlink" title="22. 进程的优先级"></a>22. 进程的优先级</h2><h3 id="22-1-前台进程"><a href="#22-1-前台进程" class="headerlink" title="22.1. 前台进程"></a>22.1. 前台进程</h3><p>用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：</p><ul><li>托管用户正在交互的Activity（已调用Activity的<code>onResume()</code>方法）；</li><li>托管某个Service，后者绑定到用户正在交互的Activity；</li><li>托管正在”前台”运行的Service（服务已调用<code>startForeground()</code>）；</li><li>托管正执行一个生命周期回调的Service（<code>onCreate()</code>、<code>onStart()</code>或<code>onDestroy()</code>）；</li><li>托管正执行其<code>onReceive()</code>方法的BroadcastReceiver。</li></ul><p>通常，在任意给定时间前台进程都为数不多。只有在内存不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。此时，设备往往已达到内存分页状态，因此需要终止一些前台进程来确保用户界面正常响应。</p><h3 id="22-2-可视进程"><a href="#22-2-可视进程" class="headerlink" title="22.2. 可视进程"></a>22.2. 可视进程</h3><p>没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。如果一个进程满足以下任一条件，即视为可见进程：</p><ul><li>托管不在前台、但仍对用户可见的Activity（已调用其<code>onPause()</code>方法）。例如，如果前台Activity启动了一个对话框，允许在其后显示上一Activity，则有可能会发生这种情况。</li><li>托管绑定到可见（或前台）Activity的Service。</li></ul><p>可见进程被视为是极其重要的进程，除非为了维持所有前台进程同时运行而必须终止，否则系统不会终止这些进程。</p><h3 id="22-3-服务进程"><a href="#22-3-服务进程" class="headerlink" title="22.3. 服务进程"></a>22.3. 服务进程</h3><p>正在运行已使用<code>startService()</code>方法启动的服务且不属于上述两个更高类别进程的进程。尽管服务进程与用户所见内容没有直接关联，但是它们通常在执行一些用户关心的操作（例如，在后台播放音乐或从网络下载数据）。因此，除非内存不足以维持所有前台进程和可见进程同时运行，否则系统会让服务进程保持运行状态。</p><h3 id="22-4-后台进程"><a href="#22-4-后台进程" class="headerlink" title="22.4. 后台进程"></a>22.4. 后台进程</h3><p>包含目前对用户不可见的Activity的进程（已调用Activity的<code>onStop()</code>方法）。这些进程对用户体验没有直接影响，系统可能随时终止它们，以回收内存供前台进程、可见进程或服务进程使用。通常会有很多后台进程在运行，因此它们会保存在LRU（最近最少使用）列表中，以确保包含用户最近查看的Activity的进程最后一个被终止。如果某个Activity正确实现了生命周期方法，并保存了其当前状态，则终止其进程不会对用户体验产生明显影响，因为当用户导航回该Activity时，Activity会恢复其所有可见状态。</p><h3 id="22-5-空进程"><a href="#22-5-空进程" class="headerlink" title="22.5. 空进程"></a>22.5. 空进程</h3><p>不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间。为使总体系统资源在进程缓存和底层内核缓存之间保持平衡，系统往往会终止这些进程。</p><h2 id="23-IntentService如何工作？"><a href="#23-IntentService如何工作？" class="headerlink" title="23. IntentService如何工作？"></a>23. IntentService如何工作？</h2><ul><li>创建默认的工作线程，用于在应用的主线程外执行传递给<code>onStartCommand()</code>的所有Intent。</li><li>创建工作队列，用于将Intent逐一传递给<code>onHandleIntent()</code>实现，这样您就永远不必担心多线程问题。</li><li>在处理完所有启动请求后停止服务，因此您永远不必调用<code>stopSelf()</code>。</li><li>提供<code>onBind()</code>的默认实现（返回<code>null</code>）。</li><li>提供<code>onStartCommand()</code>的默认实现，可将Intent依次发送到工作队列和<code>onHandleIntent()</code>实现。</li></ul><h2 id="24-IntentService与Service的区别？"><a href="#24-IntentService与Service的区别？" class="headerlink" title="24. IntentService与Service的区别？"></a>24. IntentService与Service的区别？</h2><ul><li>Service也不是专门一条新线程，因此不应该在Service中直接处理耗时的任务；</li><li>Service不会专门启动一条单独的进程，Service与它所在应用位于同一个进程中；</li><li>IntentService是Service的子类，是一个异步的，会自动停止的服务，很好解决了传统的Service中处理完耗时操作忘记停止并销毁Service的问题；</li><li>IntentService会创建独立的worker线程来处理所有的Intent请求；</li><li>IntentService不会阻塞UI线程，而普通Serveice会导致ANR异常；</li><li>Intentservice若未执行完成上一次的任务，将不会新开一个线程，是等待之前的任务完成后，再执行新的任务，等任务完成后再次调用<code>stopSelf()</code>；</li><li>正在运行的IntentService的程序相比起纯粹的后台程序更不容易被系统杀死，该程序的优先级是介于前台程序与纯后台程序之间的。</li></ul><h2 id="25-Android-Service与Activity之间的通信方式？"><a href="#25-Android-Service与Activity之间的通信方式？" class="headerlink" title="25. Android Service与Activity之间的通信方式？"></a>25. Android Service与Activity之间的通信方式？</h2><ul><li><p>通过Binder对象：当Activity通过调用<code>bindService(Intent service，ServiceConnection conn，int flags)</code>，得到一个Service的一个对象，通过这个对象我们可以直接访问Service中的方法。</p><ul><li>添加一个继承Binder的内部类，并添加相应的逻辑方法。</li><li>重写Service的<code>onBind()</code>方法，返回我们刚刚定义的那个内部类实。</li><li>Activity中创建一个ServiceConnection的匿名内部类，并且重写里面的<code>onServiceConnected()</code>方法和<code>onServiceDisconnected()</code>方法，这两个方法分别会在活动与服务成功绑定以及解除绑定的时候调用，在<code>onServiceConnected()</code>方法中，我们可以得到一个刚才那个service的binder对象，通过对这个binder对象进行向下转型，得到我们那个自定义的Binder实例，有了这个实例，做可以调用这个实例里面的具体方法进行需要的操作了。</li></ul></li><li><p>通过Broadcast Receiver：当我们的进度发生变化的时候我们发送一条广播，然后在Activity的注册广播接收器，接收到广播之后更新视图</p></li><li><p>EventBus</p></li></ul><h2 id="26-BroadcastReceiver简介"><a href="#26-BroadcastReceiver简介" class="headerlink" title="26. BroadcastReceiver简介"></a>26. BroadcastReceiver简介</h2><p>在Android中，Broadcast是一种广泛运用的在应用程序之间传输信息的机制。</p><h3 id="26-1-用途"><a href="#26-1-用途" class="headerlink" title="26.1. 用途"></a>26.1. 用途</h3><ul><li>实现了不同的程序之间的数据传输与共享，因为只要是和发送广播的<code>action</code>相同的接受者都能接受这个广播。典型的应用就是Android自带的短信，电话等等广播，只要我们实现了他们的<code>action</code>的广播，那么我们就能接收他们的数据了，以便做出一些处理。比如说拦截系统短信，拦截骚扰电话等。</li><li>起到了一个通知的作用，比如在Service中要通知主程序，更新主程序的UI等。因为Service是没有界面的，所以不能直接获得主程序中的控件，这样我们就只能在主程序中实现一个广播接受者专门用来接受Service发过来的数据和通知了。</li></ul><h3 id="26-2-使用场景"><a href="#26-2-使用场景" class="headerlink" title="26.2. 使用场景"></a>26.2. 使用场景</h3><ul><li>同一app内部的同一组件内的消息通信（单个或多个线程之间）；</li><li>同一app内部的不同组件之间的消息通信（单个进程）；</li><li>同一app具有多个进程的不同组件之间的消息通信；</li><li>不同app之间的组件之间消息通信；</li><li>Android系统在特定情况下与App之间的消息通信。</li></ul><h3 id="26-3-实现原理"><a href="#26-3-实现原理" class="headerlink" title="26.3. 实现原理"></a>26.3. 实现原理</h3><p>从实现原理看上，Android中的广播使用了观察者模式，基于消息的发布/订阅事件模型。因此，从实现的角度来看，Android中的广播将广播的发送者和接受者极大程度上解耦，使得系统能够方便集成，更易扩展。具体实现流程要点粗略概括如下：</p><ol><li>广播接收者BroadcastReceiver通过Binder机制向AMS（Activity Manager Service)进行注册；</li><li>广播发送者通过binder机制向AMS发送广播；</li><li>AMS查找符合相应条件（IntentFilter/Permission等）的BroadcastReceiver，将广播发送到BroadcastReceiver（一般情况下是Activity）相应的消息循环队列中；</li><li>消息循环执行拿到此广播，回调BroadcastReceiver中的<code>onReceive()</code>方法。</li></ol><h3 id="26-4-注册方式"><a href="#26-4-注册方式" class="headerlink" title="26.4. 注册方式"></a>26.4. 注册方式</h3><ul><li>静态注册；</li><li>动态注册。</li></ul><h2 id="27-为什么要用ContentProvider？它和SQL的实现上有什么差别？"><a href="#27-为什么要用ContentProvider？它和SQL的实现上有什么差别？" class="headerlink" title="27. 为什么要用ContentProvider？它和SQL的实现上有什么差别？"></a>27. 为什么要用ContentProvider？它和SQL的实现上有什么差别？</h2><ul><li>ContentProvider屏蔽了数据存储的细节，内部实现对用户完全透明，用户只需要关心操作数据的uri就可以了，ContentProvider可以实现不同app之间共享。SQL只能在该工程的内部共享数据，ContentProvider能在工程之间实现数据共享。</li><li>SQL也有增删改查的方法，但是SQL只能查询本应用下的数据库。而ContentProvider还可以去增删改查本地文件.xml文件的读取等。</li></ul><h2 id="28-ContentProvider怎么实现数据共享？"><a href="#28-ContentProvider怎么实现数据共享？" class="headerlink" title="28. ContentProvider怎么实现数据共享？"></a>28. ContentProvider怎么实现数据共享？</h2><p>一个程序可以通过实现一个ContentProvider的抽象接口将自己的数据完全暴露出去，而且ContentProvider是以类似数据库中表的方式将数据暴露。ContentProvider存储和检索数据，通过它可以让所有的应用程序访问到，这也是应用程序之间唯一共享数据的方法。要想使应用程序的数据公开化，可通过2种方法：创建一个属于你自己的Content provider或者将你的数据添加到一个已经存在的ContentProvider中，前提是有相同数据类型并且有写入ContentProvider的权限。</p><h2 id="29-Android如何访问自定义ContentProvider"><a href="#29-Android如何访问自定义ContentProvider" class="headerlink" title="29. Android如何访问自定义ContentProvider"></a>29. Android如何访问自定义ContentProvider</h2><ol><li>得到ContentResolver类对象：<code>ContentResolver cr = getContentResolver()</code>；</li><li>定义要查询的字段<code>String</code>数组；</li><li>使用<code>cr.query()</code>返回一个<code>Cursor</code>对象；</li><li>使用<code>while</code>循环得到<code>Cursor</code>里面的内容。</li></ol><h2 id="30-Android中Activity，Intent，Content-Provider，Service各有什么区别。"><a href="#30-Android中Activity，Intent，Content-Provider，Service各有什么区别。" class="headerlink" title="30. Android中Activity，Intent，Content Provider，Service各有什么区别。"></a>30. Android中Activity，Intent，Content Provider，Service各有什么区别。</h2><ul><li>Activity：活动，是最基本的Android应用程序组件。一个活动就是一个单独的屏幕，每一个活动都被实现为一个独立的类，并且从活动基类继承而来。</li><li>Intent：意图，描述应用想干什么。最重要的部分是动作和动作对应的数据。</li><li>Content Provider：内容提供器，Android应用程序能够将它们的数据保存到文件、SQLite数据库中，甚至是任何有效的设备中。当你想将你的应用数据和其他应用共享时，内容提供器就可以发挥作用了。</li><li>Service：服务，具有一段较长生命周期且没有用户界面的程序。</li></ul><h2 id="31-Android数据存储方式？"><a href="#31-Android数据存储方式？" class="headerlink" title="31. Android数据存储方式？"></a>31. Android数据存储方式？</h2><ul><li>SharedPreferences：以键值对的形式保存少量的数据，且这些数据的格式非常简单：字符串型、基本类型的值。</li><li>文件存储数据：Context提供了两个方法来打开数据文件里的文件IO流<code>FileInputStream openFileInput(String name)</code>，<code>FileOutputStream(String name，int mode)</code>，这两个方法第一个参数用于指定文件名，第二个参数指定打开文件的模式；文件默认存储位置：<code>/data/data/包名/files/文件名</code>。</li><li>SQLite存储数据。</li><li>使用ContentProvider存储数据。</li><li>网络存储数据。</li></ul><h2 id="32-Android中常用的布局都有哪些？"><a href="#32-Android中常用的布局都有哪些？" class="headerlink" title="32. Android中常用的布局都有哪些？"></a>32. Android中常用的布局都有哪些？</h2><ul><li>FrameLayout；</li><li>RelativeLayout；</li><li>LinearLayout；</li><li>AbsoluteLayout；</li><li>TableLayout；</li><li>GridLayout。</li></ul><h2 id="33-android-layout-gravity和android-gravity的区别？"><a href="#33-android-layout-gravity和android-gravity的区别？" class="headerlink" title="33. android:layout_gravity和android:gravity的区别？"></a>33. <code>android:layout_gravity</code>和<code>android:gravity</code>的区别？</h2><ul><li><code>android:layout_gravity</code>是让该布局在其父控件中的布局方式。</li><li><code>android:gravity</code>是该布局布置其子对象的布局方式。</li></ul><h2 id="34-Android平台架构"><a href="#34-Android平台架构" class="headerlink" title="34. Android平台架构"></a>34. Android平台架构</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/android_platform.png" alt="android platform"></p><h3 id="34-1-系统应用"><a href="#34-1-系统应用" class="headerlink" title="34.1. 系统应用"></a>34.1. 系统应用</h3><p>Android随附一套用于电子邮件、短信、日历、互联网浏览和联系人等的核心应用。平台随附的应用与用户可以选择安装的应用一样，没有特殊状态。因此第三方应用可成为用户的默认网络浏览器、短信Messenger甚至默认键盘（有一些例外，例如系统的”设置”应用）。</p><p>系统应用可用作用户的应用，以及提供开发者可从其自己的应用访问的主要功能。例如，如果您的应用要发短信，您无需自己构建该功能，可以改为调用已安装的短信应用向您指定的接收者发送消息。</p><h3 id="34-2-Java-API框架"><a href="#34-2-Java-API框架" class="headerlink" title="34.2. Java API框架"></a>34.2. Java API框架</h3><p>您可通过以Java语言编写的API使用Android OS的整个功能集。这些API形成创建Android应用所需的构建块，它们可简化核心模块化系统组件和服务的重复使用，包括以下组件和服务：</p><ul><li>丰富、可扩展的视图系统，可用以构建应用的UI，包括列表、网格、文本框、按钮甚至可嵌入的网络浏览器；</li><li>资源管理器，用于访问非代码资源，例如本地化的字符串、图形和布局文件；</li><li>通知管理器，可让所有应用在状态栏中显示自定义提醒；</li><li>Activity管理器，用于管理应用的生命周期，提供常见的导航返回栈；</li><li>内容提供程序，可让应用访问其他应用（例如”联系人”应用）中的数据或者共享其自己的数据。</li></ul><p>开发者可以完全访问Android系统应用使用的框架API。</p><h3 id="34-3-原生C-C-库"><a href="#34-3-原生C-C-库" class="headerlink" title="34.3. 原生C/C++库"></a>34.3. 原生C/C++库</h3><p>许多核心Android系统组件和服务（例如ART和HAL）构建自原生代码，需要以C和C++编写的原生库。Android平台提供Java框架API以向应用显示其中部分原生库的功能。例如，您可以通过Android框架的Java OpenGL API访问OpenGL ES，以支持在应用中绘制和操作2D和3D图形。</p><p>如果开发的是需要C或C++代码的应用，可以使用Android NDK直接从原生代码访问某些原生平台库。</p><h3 id="34-4-Android-Runtime"><a href="#34-4-Android-Runtime" class="headerlink" title="34.4. Android Runtime"></a>34.4. Android Runtime</h3><p>对于运行Android 5.0（API级别21）或更高版本的设备，每个应用都在其自己的进程中运行，并且有其自己的Android Runtime(ART)实例。ART编写为通过执行DEX文件在低内存设备上运行多个虚拟机，DEX文件是一种专为Android设计的字节码格式，经过优化，使用的内存很少。编译工具链（例如Jack）将Java源代码编译为DEX字节码，使其可在Android平台上运行。</p><p>ART的部分主要功能包括：</p><ul><li>预先（AOT）和即时（JIT）编译；</li><li>优化的垃圾回收（GC）；</li><li>更好的调试支持，包括专用采样分析器、详细的诊断异常和崩溃报告，并且能够设置监视点以监控特定字段；</li></ul><p>在Android版本5.0（API级别21）之前，Dalvik是Android Runtime。如果您的应用在ART上运行效果很好，那么它应该也可在Dalvik上运行，但反过来不一定。</p><p>Android还包含一套核心运行时库，可提供Java API框架使用的Java编程语言大部分功能，包括一些Java 8语言功能。</p><h3 id="34-5-硬件抽象层（HAL）"><a href="#34-5-硬件抽象层（HAL）" class="headerlink" title="34.5. 硬件抽象层（HAL）"></a>34.5. 硬件抽象层（HAL）</h3><p>硬件抽象层（HAL）提供标准界面，向更高级别的Java API框架显示设备硬件功能。HAL包含多个库模块，其中每个模块都为特定类型的硬件组件实现一个界面，例如相机或蓝牙模块。当框架API要求访问设备硬件时，Android系统将为该硬件组件加载库模块。</p><h3 id="34-6-Linux-内核"><a href="#34-6-Linux-内核" class="headerlink" title="34.6. Linux 内核"></a>34.6. Linux 内核</h3><p>Android平台的基础是Linux内核。例如，Android Runtime（ART）依靠Linux内核来执行底层功能，例如线程和低层内存管理。</p><p>使用Linux内核可让Android利用主要安全功能，并且允许设备制造商为著名的内核开发硬件驱动程序。</p><h2 id="35-Fragment生命周期"><a href="#35-Fragment生命周期" class="headerlink" title="35. Fragment生命周期"></a>35. Fragment生命周期</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/fragment_lifecycle.png" alt="fragment lifecycle"></p><ul><li><code>onCreate()</code>：系统会在创建片段时调用此方法。您应该在实现内初始化您想在片段暂停或停止后恢复时保留的必需片段组件。</li><li><code>onCreateView()</code>：系统会在片段首次绘制其用户界面时调用此方法。要想为您的片段绘制UI，您从此方法中返回的View必须是片段布局的根视图。如果片段未提供UI，您可以返回<code>null</code>。</li><li><code>onPause()</code>：系统将此方法作为用户离开片段的第一个信号（但并不总是意味着此片段会被销毁）进行调用。您通常应该在此方法内确认在当前用户会话结束后仍然有效的任何更改（因为用户可能不会返回）。</li></ul><h2 id="36-Activity生命周期对片段生命周期的影响"><a href="#36-Activity生命周期对片段生命周期的影响" class="headerlink" title="36. Activity生命周期对片段生命周期的影响"></a>36. Activity生命周期对片段生命周期的影响</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/activity_fragment_lifecycle.png" alt="activity fragment lifecycle"></p><p>片段所在的Activity的生命周期会直接影响片段的生命周期，其表现为，Activity的每次生命周期回调都会引发每个片段的类似回调。例如，当Activity收到<code>onPause()</code>时，Activity中的每个片段也会收到<code>onPause()</code>。</p><p>不过，片段还有几个额外的生命周期回调，用于处理与Activity的唯一交互，以执行构建和销毁片段UI等操作。这些额外的回调方法是：</p><ul><li><code>onAttach()</code>：在片段已与Activity关联时调用（Activity传递到此方法内）；</li><li><code>onCreateView()</code>：调用它可创建与片段关联的视图层次结构；</li><li><code>onActivityCreated()</code>：在Activity的<code>onCreate()</code>方法已返回时调用；</li><li><code>onDestroyView()</code>：在移除与片段关联的视图层次结构时调用；</li><li><code>onDetach()</code>：在取消片段与Activity的关联时调用。</li></ul><h2 id="37-Android事件分发"><a href="#37-Android事件分发" class="headerlink" title="37. Android事件分发"></a>37. Android事件分发</h2><table><thead><tr><th style="text-align:center">事件相关方法</th><th style="text-align:center">方法功能</th><th style="text-align:center">Activity</th><th style="text-align:center">ViewGroup</th><th style="text-align:center">View</th></tr></thead><tbody><tr><td style="text-align:center"><code>dispatchTouchEvent</code></td><td style="text-align:center">事件分发</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td></tr><tr><td style="text-align:center"><code>onInterceptTouchEvent</code></td><td style="text-align:center">事件拦截</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td><td style="text-align:center">No</td></tr><tr><td style="text-align:center"><code>onTouchEvent</code></td><td style="text-align:center">事件消费</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td></tr></tbody></table><h3 id="37-1-public-boolean-dispatchTouchEvent-MotionEvent-ev"><a href="#37-1-public-boolean-dispatchTouchEvent-MotionEvent-ev" class="headerlink" title="37.1. public boolean dispatchTouchEvent(MotionEvent ev)"></a>37.1. <code>public boolean dispatchTouchEvent(MotionEvent ev)</code></h3><p>当有监听到事件时，首先由Activity进行捕获，进入事件分发处理流程。（因为activity没有事件拦截，View和ViewGroup有）会将事件传递给最外层View的<code>dispatchTouchEvent(MotionEvent ev)</code>方法，该方法对事件进行分发。</p><ul><li><code>return true</code>：表示该View内部消化掉了所有事件。</li><li><code>return false</code>：事件在本层不再继续进行分发，并交由上层控件的<code>onTouchEvent()</code>方法进行消费（如果本层控件已经是Activity，那么事件将被系统消费或处理）。</li><li>如果事件分发返回系统默认的<code>super.dispatchTouchEvent(ev)</code>，事件将分发给本层的事件拦截<code>onInterceptTouchEvent()</code>方法进行处理。</li></ul><h3 id="37-2-public-boolean-onInterceptTouchEvent-MotionEvent-ev"><a href="#37-2-public-boolean-onInterceptTouchEvent-MotionEvent-ev" class="headerlink" title="37.2. public boolean onInterceptTouchEvent(MotionEvent ev)"></a>37.2. <code>public boolean onInterceptTouchEvent(MotionEvent ev)</code></h3><ul><li><code>return true</code>：表示将事件进行拦截，并将拦截到的事件交由本层控件的<code>onTouchEvent()</code>进行处理。</li><li><code>return false</code>：则表示不对事件进行拦截，事件得以成功分发到子View。并由子View的<code>dispatchTouchEvent()</code>进行处理。</li><li>如果返回<code>super.onInterceptTouchEvent(ev)</code>，默认表示拦截该事件，并将事件传递给当前View的<code>onTouchEvent()</code>方法，和<code>return true</code>一样。</li></ul><h3 id="37-3-public-boolean-onTouchEvent-MotionEvent-ev"><a href="#37-3-public-boolean-onTouchEvent-MotionEvent-ev" class="headerlink" title="37.3. public boolean onTouchEvent(MotionEvent ev)"></a>37.3. <code>public boolean onTouchEvent(MotionEvent ev)</code></h3><p>在<code>dispatchTouchEvent()</code>（事件分发）返回<code>super.dispatchTouchEvent(ev)</code>并且<code>onInterceptTouchEvent()</code>（事件拦截返回<code>true</code>或<code>super.onInterceptTouchEvent(ev)</code>的情况下，那么事件会传递到<code>onTouchEvent()</code>方法，该方法对事件进行响应。</p><ul><li>如果<code>return true</code>，表示<code>onTouchEvent()</code>处理完事件后消费了此次事件。此时事件终结。</li><li>如果<code>return fasle</code>，则表示不响应事件，那么该事件将会不断向上层View的<code>onTouchEvent()</code>方法传递，直到某个View的<code>onTouchEvent()</code>方法返回<code>true</code>，如果到了最顶层View还是返回<code>false</code>，那么认为该事件不消耗，则在同一个事件系列中，当前View无法再次接收到事件，该事件会交由Activity的<code>onTouchEvent()</code>进行处理。</li><li>如果<code>return super.dispatchTouchEvent(ev)</code>，则表示不响应事件，结果与<code>return false</code>一样。</li></ul><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/touch_eventbus.gif" alt="touch eventbus"></p><ul><li>如果ViewGroup找到了能够处理该事件的View，则直接交给子View处理，自己的<code>onTouchEvent()</code>不会被触发。</li><li>可以通过复写<code>onInterceptTouchEvent(ev)</code>方法，拦截子View的事件（即<code>return true</code>），把事件交给自己处理，则会执行自己对应的<code>onTouchEvent()</code>方法。</li><li>子View可以通过调用<code>getParent().requestDisallowInterceptTouchEvent(true)</code>阻止ViewGroup对其<code>MOVE</code>或者<code>UP</code>事件进行拦截。</li><li>一个点击事件产生后，它的传递过程如下：Activity-&gt;Window-&gt;View。顶级View接收到事件之后，就会按相应规则去分发事件。如果一个View的<code>onTouchEvent()</code>方法返回<code>false</code>，那么将会交给父容器的<code>onTouchEvent()</code>方法进行处理，逐级往上，如果所有的View都不处理该事件，则交由Activity的<code>onTouchEvent()</code>进行处理。</li><li>如果某一个View开始处理事件，如果他不消耗<code>ACTION_DOWN</code>事件（也就是<code>onTouchEvent()</code>返回<code>false</code>），则同一事件序列比如接下来进行<code>ACTION_MOVE</code>，则不会再交给该View处理。</li><li>ViewGroup默认不拦截任何事件。</li><li>诸如TextView、ImageView这些不作为容器的View，一旦接受到事件，就调用<code>onTouchEvent()</code>方法，它们本身没有<code>onInterceptTouchEvent()</code>方法。正常情况下，它们都会消耗事件（返回<code>true</code>），除非它们是不可点击的（<code>clickable</code>和<code>longClickable</code>都为<code>false</code>），那么就会交由父容器的<code>onTouchEvent()</code>处理。</li><li>点击事件分发过程如下<code>dispatchTouchEvent()</code> —&gt; <code>OnTouchListener</code>的<code>onTouch()</code>方法 —&gt; <code>onTouchEvent()</code> –&gt; <code>OnClickListener</code>的<code>onClick()</code>方法。也就是说，我们平时调用的<code>setOnClickListener()</code>，优先级是最低的，所以，<code>onTouchEvent()</code>或<code>OnTouchListener()</code>的<code>onTouch()</code>方法如果返回<code>true</code>，则不响应<code>onClick()</code>方法。</li></ul><p>参考：<a href="https://github.com/Mr-YangCheng/ForAndroidInterview/blob/master/android/Android%20View%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md" target="_blank" rel="noopener">ForAndroidInterview/Android View事件分发机制源码分析.md at master · Mr-YangCheng/ForAndroidInterview</a></p><p>参考：<a href="https://www.cnblogs.com/sunzn/archive/2013/05/10/3064129.html" target="_blank" rel="noopener">Android 编程下 Touch 事件的分发和消费机制 - sunzn - 博客园</a></p><h2 id="38-Android系统启动过程"><a href="#38-Android系统启动过程" class="headerlink" title="38. Android系统启动过程"></a>38. Android系统启动过程</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/android_boot_process.png" alt="android boot process"></p><h3 id="38-1-Boot-ROM"><a href="#38-1-Boot-ROM" class="headerlink" title="38.1. Boot ROM"></a>38.1. Boot ROM</h3><p>Android设备上电后，首先会从处理器片上ROM的启动引导代码开始执行，片上ROM会寻找Bootloader代码，并加载到内存。</p><h3 id="38-2-Boot-Loader"><a href="#38-2-Boot-Loader" class="headerlink" title="38.2. Boot Loader"></a>38.2. Boot Loader</h3><p>BootLoader是在操作系统内核运行之前运行。可以初始化硬件设备、建立内存空间映射图，从而将系统的软硬件环境带到一个合适状态，以便为最终调用操作系统内核准备好正确的环境。</p><h3 id="38-3-Kernel"><a href="#38-3-Kernel" class="headerlink" title="38.3. Kernel"></a>38.3. Kernel</h3><p>Android内核启动时，会设置缓存、被保护存储器、计划列表，加载驱动。当内核完成系统设置，它首先在系统文件中寻找”init”文件，然后启动root进程或者系统的第一个进程。</p><h3 id="38-4-init"><a href="#38-4-init" class="headerlink" title="38.4. init"></a>38.4. init</h3><p>init进程，它是一个由内核启动的用户级进程。内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。init始终是第一个进程。</p><p>init程序最核心的工作主要有3点：</p><ul><li>创建和挂载一些系统目录/设备节点，设置权限，如：<code>/dev</code>，<code>/proc</code>，和<code>/sys</code>；</li><li>解析init.rc，并启动属性服务，以及一系列的服务和进程；</li><li>显示boot logo，默认是”Android”字样。</li></ul><p>第二步的这些服务包含2部分，一部分是本地服务，另一部分是Android服务，所有的这些服务都会向ServiceManager进程注册，由它统一管理，这些服务的启动过程介绍如下：</p><h4 id="38-4-1-本地服务"><a href="#38-4-1-本地服务" class="headerlink" title="38.4.1. 本地服务"></a>38.4.1. 本地服务</h4><p>本地服务是指运行在C++层的系统守护进程，一部分本地服务是init进程直接启动的，它们定义在init.rc脚本中，如ueventd、servicemanager、debuggerd、rild、mediaserver等。还有一部分本地服务，是由这些本地服务进一步创建的，如mediaserver服务会启动AudioFlinger，MediaPlayerService，以及CameraService等本地服务。</p><p>注意，每一个由init直接启动的本地服务都是一个独立的Linux进程，在系统启动以后，我们通过<code>adb shell</code>命令进入手机后，输入<code>top</code>命令就可以查看到这些本地进程的存在。</p><h4 id="38-4-2-Android服务"><a href="#38-4-2-Android服务" class="headerlink" title="38.4.2. Android服务"></a>38.4.2. Android服务</h4><p>init进程会执行app_process程序，创建Zygote进程，它是Android系统最重要的进程，所有后续的Android应用程序都是由它<code>fork</code>出来的。</p><p>Zygote进程会首先<code>fork</code>出SystemServer进程，SystemServer进程的全部任务就是将所有的Android核心服务启动起来。</p><h3 id="38-5-Zygote-and-Dalvik（ART）"><a href="#38-5-Zygote-and-Dalvik（ART）" class="headerlink" title="38.5. Zygote and Dalvik（ART）"></a>38.5. Zygote and Dalvik（ART）</h3><p>Zygote被init进程启动，开始运行和初始化dalvik虚拟机。</p><h3 id="38-6-System-Server"><a href="#38-6-System-Server" class="headerlink" title="38.6. System Server"></a>38.6. System Server</h3><p>系统服务是在系统中运行的第一个java组件，它会启动所有的Android服务，比如：电话服务，蓝牙服务，每个服务的启动被直接写在<code>SystemServer.java</code>这个类的<code>run()</code>方法里面。</p><h3 id="38-7-Boot-completed"><a href="#38-7-Boot-completed" class="headerlink" title="38.7. Boot completed"></a>38.7. Boot completed</h3><p>一旦系统服务启动并运行，Android系统启动就完成了，同时发出<code>ACTION_BOOT_COMPLETED</code>广播。</p><h2 id="39-Android应用启动过程"><a href="#39-Android应用启动过程" class="headerlink" title="39. Android应用启动过程"></a>39. Android应用启动过程</h2><ol><li>Launcher接收到点击事件，获取应用的信息，向SystemServer（ActivityManagerService简称AMS运行在里面）发起启动应用的请求；</li><li>SystemServer（AMS）请求Launcher Pause（Launcher需要保存状态进入后台）；</li><li>LauncherPause，向SystemServer（AMS）发送Pause完毕；</li><li>SystemServer（AMS）向Zygote请求启动一个新进程（calculator）；</li><li>Zygote fork出新进程（calculator），在新进程中执行ActivityThread类的<code>main()</code>方法；</li><li>calculator向SystemServer（AMS）请求attach到AMS；</li><li>SystemServer（AMS）请求calculator launch；</li><li>calculator调用<code>onCreate()</code>，<code>onResume()</code>回调；</li><li>calculator界面显示自屏幕上（还需细分）。</li></ol><p>参考：<a href="http://androidzhibinw.github.io/android/app/startup/activity/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/%E5%90%AF%E5%8A%A8/%E5%88%86%E6%9E%90/2015/09/21/android-app-startup-process/" target="_blank" rel="noopener">Android 应用程序启动过程分析</a></p><h2 id="40-dp，dip，dpi，ppi区别"><a href="#40-dp，dip，dpi，ppi区别" class="headerlink" title="40. dp，dip，dpi，ppi区别"></a>40. dp，dip，dpi，ppi区别</h2><p>px（Pixels，像素）：屏幕上的点。 in（Inch，英寸）：长度单位。 mm（Millimeter，毫米）：长度单位。 pt（Point，磅）：1/72in。 dpi（Dots Per Inch，每英寸所打印的点数）：1in长度的点数。 ppi（Pixels Per Inch，像素密度）：1in长度的像素点数。 dp/dip（Density-independent Pixels，与密度无关的像素）：一种基于屏幕密度的抽象单位。在160dpi的显示器上，1dp = 1px。 sp（Scale-independent Pixels，与刻度无关的像素）：与dp类似，但是可以根据用户的字体大小首选项进行缩放。</p><p>在屏幕密度为160dpi，1dp = 1px，1pt = 160/72sp，1pt = 1/72in。当屏幕密度为240dpi时，1dp = 1.5px。</p><p>参考：<a href="http://stackoverflow.com/questions/8478882/how-do-dp-dip-dpi-ppi-pixels-and-inches-relate" target="_blank" rel="noopener">mobile - How do dp, dip, dpi, ppi, pixels and inches relate? - Stack Overflow</a></p><h2 id="41-长度和字体的推荐单位"><a href="#41-长度和字体的推荐单位" class="headerlink" title="41. 长度和字体的推荐单位"></a>41. 长度和字体的推荐单位</h2><p>长度推荐dp（Density-independent Pixels），字号大小推荐sp（Scale-independent Pixels）。</p><h2 id="42-Android-View绘制流程"><a href="#42-Android-View绘制流程" class="headerlink" title="42. Android View绘制流程"></a>42. Android View绘制流程</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/android_draw_view_flow.png" alt="android_draw_view_flow"></p><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/android_draw_view_chain.png" alt="android_draw_view_chain"></p><p>参考：<a href="https://github.com/android-cn/android-open-project-analysis/tree/master/tech/viewdrawflow" target="_blank" rel="noopener">android-open-project-analysis/tech/viewdrawflow at master · android-cn/android-open-project-analysis</a></p><p>参考：<a href="http://vincgao.com/2016/02/android-layout/" target="_blank" rel="noopener">Android Layout绘制</a></p><h2 id="43-ListView优化"><a href="#43-ListView优化" class="headerlink" title="43. ListView优化"></a>43. ListView优化</h2><ul><li>复用convertView：用以避免重复创建View，重复创建View代价较大，而且如果重用view不改变宽高，重用View可以减少重新分配缓存造成的内存频繁分配/回收。</li><li>使用View Holder模式：findViewById的实现是遍历，如果你定义的View越复杂代价越大。 Google推荐的做法是用ViewHolder，然后保存在view的tag中。现在RecyclerView也是强制使用ViewHolder了。</li><li>分批加载与分页加载相结合：不需要一次等待好几分钟把数据都加载完再在ListView上显示。</li><li>使用异步线程加载图片</li><li>在快速滑动时不要加载图片</li><li>使用RecyclerView</li></ul><h2 id="44-Android-Binder机制"><a href="#44-Android-Binder机制" class="headerlink" title="44. Android Binder机制"></a>44. Android Binder机制</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/binder_architecture.jpg" alt="binder architecture"></p><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/binder_architecture_2.jpg" alt="binder architecture 2"></p><ol><li>Server进程启动之后，会进入中断等待状态，等待Client的请求。</li><li>当Client需要和Server通信时，会将请求发送给Binder驱动。</li><li>Binder驱动收到请求之后，会唤醒Server进程。</li><li>接着，Binder驱动还会反馈信息给Client，告诉Client：它发送给Binder驱动的请求，Binder驱动已经收到。</li><li>Client将请求发送成功之后，就进入等待状态。等待Server的回复。</li><li>Binder驱动唤醒Server之后，就将请求转发给Server进程。</li><li>Server进程解析出请求内容，并将回复内容发送给Binder驱动。</li><li>Binder驱动收到回复之后，唤醒Client进程。</li><li>接着，Binder驱动还会反馈信息给Server，告诉Server：它发送给Binder驱动的回复，Binder驱动已经收到。</li><li>Server将回复发送成功之后，再次进入等待状态，等待Client的请求。</li><li>最后，Binder驱动将回复转发给Client。</li></ol><h2 id="45-Binder机制优点"><a href="#45-Binder机制优点" class="headerlink" title="45. Binder机制优点"></a>45. Binder机制优点</h2><ul><li>性能：Binder数据拷贝只需要一次，而管道、消息队列、Socket都需要2次，但共享内存方式一次内存拷贝都不需要；从性能角度看，Binder性能仅次于共享内存。</li><li>稳定性：Binder是基于C/S架构的，Server端与Client端相对独立，稳定性较好。</li><li>安全性：传统Linux IPC的接收方无法获得对方进程可靠的UID/PID，从而无法鉴别对方身份。Android系统中对外只暴露Client端，Client端将任务发送给Server端，Server端会根据权限控制策略，判断UID/PID是否满足访问权限，目前权限控制很多时候是通过弹出权限询问对话框，让用户选择是否运行。</li></ul><h2 id="46-AsyncTask简介"><a href="#46-AsyncTask简介" class="headerlink" title="46. AsyncTask简介"></a>46. AsyncTask简介</h2><p>包含4个方法：</p><ul><li><code>onPreExecute()</code>：UI线程；</li><li><code>doInBackground(Params...)</code>：非UI线程；</li><li><code>onProgressUpdate(Progress...)</code>：UI线程；</li><li><code>onPostExecute(Result)</code>：UI线程。</li></ul><p>原理：</p><ul><li>线程池；</li><li>单例模式；</li><li><code>mainLooper()</code>；</li><li>串行。</li></ul><h2 id="47-为什么Handler需要声明为static？"><a href="#47-为什么Handler需要声明为static？" class="headerlink" title="47. 为什么Handler需要声明为static？"></a>47. 为什么Handler需要声明为static？</h2><p>所有发送到消息队列的消息Message都会拥有一个对Handler的引用，在java里，非静态内部类和匿名类都会潜在的引用它们所属的外部类。但是，静态内部类却不会。当Activity结束（finish）时，里面的延时消息在得到处理前，会一直保存在主线程的消息队列里持续10分钟。这条消息持有对handler的引用，而handler又持有对其外部类（在这里，即SampleActivity）的潜在引用。这条引用关系会一直保持直到消息得到处理，从而，这阻止了SampleActivity被垃圾回收器回收，同时造成应用程序的泄漏。</p><h2 id="48-广播注册后不解除注册会有什么问题？"><a href="#48-广播注册后不解除注册会有什么问题？" class="headerlink" title="48. 广播注册后不解除注册会有什么问题？"></a>48. 广播注册后不解除注册会有什么问题？</h2><p>内存泄漏。系统会保留Receiver的引用。</p><h2 id="49-自定义View"><a href="#49-自定义View" class="headerlink" title="49. 自定义View"></a>49. 自定义View</h2><h3 id="49-1-实现步骤"><a href="#49-1-实现步骤" class="headerlink" title="49.1. 实现步骤"></a>49.1. 实现步骤</h3><ol><li>继承View类或其子类；</li><li>复写view中的一些函数；</li><li>为自定义View类增加属性（两种方式）；</li><li>绘制控件（导入布局）；</li><li>响应用户事件；</li><li>定义回调函数（根据自己需求来选择）。</li></ol><h2 id="50-需要被重写的方法"><a href="#50-需要被重写的方法" class="headerlink" title="50. 需要被重写的方法"></a>50. 需要被重写的方法</h2><ul><li><code>onDraw()</code>：view中<code>onDraw()</code>是个空函数，也就是说具体的视图都要覆写该函数来实现自己的绘制。对于ViewGroup则不需要实现该函数，因为作为容器是”没有内容”的（但必须实现<code>dispatchDraw()</code>函数，告诉子view绘制自己）。</li><li><code>onLayout()</code>：主要是为viewGroup类型布局子视图用的，在View中这个函数为空函数。</li><li><code>onMeasure()</code>：用于计算视图大小（即长和宽）的方式，并通过<code>setMeasuredDimension(width, height)</code>保存计算结果。</li><li><code>onTouchEvent()</code>：定义触屏事件来响应用户操作。</li></ul><h2 id="51-Parcelable和Serializable的区别"><a href="#51-Parcelable和Serializable的区别" class="headerlink" title="51. Parcelable和Serializable的区别"></a>51. Parcelable和Serializable的区别</h2><p>Serializable仅需实现Serializable接口。缺点是使用了反射，序列化的过程较慢。这种机制会在序列化的时候创建许多的临时对象，容易触发垃圾回收。</p><p>Parcelable需要实现Parcelable接口，但序列化的过程已经提前确定，所以运行速度快。</p><h2 id="52-Android中的内存泄漏"><a href="#52-Android中的内存泄漏" class="headerlink" title="52. Android中的内存泄漏"></a>52. Android中的内存泄漏</h2><ol><li>查询数据库没有关闭游标。</li><li>构造Adapter时，没有使用缓存的convertView。</li><li>Bitmap对象不再使用时调用<code>recycle()</code>释放内存。</li><li>无用时没有释放对象的引用。</li><li>在Activity中使用非静态的内部类，并开启一个长时间运行的线程，因为内部类持有Activity的引用，会导致Activity本来可以被GC时却长期得不到回收。</li><li>使用Handler处理消息前，Activity通过例如<code>finish()</code>退出，导致内存泄漏。</li><li>动态注册广播在Activity销毁前没有<code>unregisterReceiver()</code>。</li></ol><h2 id="53-MVC和MVP的区别"><a href="#53-MVC和MVP的区别" class="headerlink" title="53. MVC和MVP的区别"></a>53. MVC和MVP的区别</h2><p>我们都知道MVP是从经典的模式MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter（MVC中的Controller）来进行的，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过Controller。</p><h2 id="54-内存泄露检测有什么好方法？"><a href="#54-内存泄露检测有什么好方法？" class="headerlink" title="54. 内存泄露检测有什么好方法？"></a>54. 内存泄露检测有什么好方法？</h2><ol><li>DDMS Heap发现内存泄露dataObject totalSize的大小，是否稳定在一个范围内，如果操作程序，不断增加，说明内存泄露。</li><li>使用Heap Tool进行内存快照前后对比BlankActivity手动触发GC进行前后对比，对象是否被及时回收。</li></ol><h2 id="55-Android里面为什么要设计出Bundle而不是直接用Map结构"><a href="#55-Android里面为什么要设计出Bundle而不是直接用Map结构" class="headerlink" title="55. Android里面为什么要设计出Bundle而不是直接用Map结构"></a>55. Android里面为什么要设计出Bundle而不是直接用Map结构</h2><p>Map里实现了Serializable接口，而在Bundle实现了Parcelable的接口。</p><h2 id="56-在Android的MVP架构中，使用了什么设计模式"><a href="#56-在Android的MVP架构中，使用了什么设计模式" class="headerlink" title="56. 在Android的MVP架构中，使用了什么设计模式"></a>56. 在Android的MVP架构中，使用了什么设计模式</h2><ul><li>Observer模式：通过EventBus实现订阅者，发布者的功能，实现Model与Presenter的交互。</li><li>Proxy模式：View保持对Presenter的引用，通过Presenter代理，进行交互操作。</li></ul><h2 id="57-Android动画类型"><a href="#57-Android动画类型" class="headerlink" title="57. Android动画类型"></a>57. Android动画类型</h2><ul><li>属性动画（Property Animation）：是Android 3.0之后推出的，其机制不再是针对 View 来设计的，也不限于只能实现移动、缩放、旋转和淡入这几种简单的动画操作，同时也不再只是一种视觉上的动画效果。属性动画实际上是一种在一定时间段内不断修改某个对象的某个属性值的机制。</li><li><p>视图动画（View Animation）：</p><ul><li><p>补间动画（Tween animation）：是操作某一个控件让其展现出旋转、渐变、移动、缩放的一种转换过程。是一种视觉上的变化，不是真正位置上的变化。只能运用在 View 对象上，并且功能相对来说较为局限。例如：旋转动画只能够在x、y轴进行，而不能在z轴放心进行旋转。因此，补间动画通常用于执行一些比较简单的动画。</p><ul><li>渐变动画（AlphaAnimation）；</li><li>缩放动画（ScaleAnimation）；</li><li>位移动画（TranslateAnimation）；</li><li>旋转动画（RotateAnimation）。</li></ul></li><li><p>帧动画（Frame animation）：帧动画是一系列图片按照一定的顺序展示的过程，和放电影的机制相似，它的原理是在一定的时间段内切换多张有细微差异的图片从而达到动画的效果。由于是一帧一帧加载，所以需要较多的图片。从而增大 APK 的大小，不过 Frame 动画可以实现一些比较难的效果，例如：等待的环形进度。</p></li></ul></li></ul><h2 id="58-ANR和FC的区别"><a href="#58-ANR和FC的区别" class="headerlink" title="58. ANR和FC的区别"></a>58. ANR和FC的区别</h2><ul><li>ANR（Application Not Responding）：主线程阻塞。</li><li>FC（Forced Close）：内存耗尽，堆栈溢出，运行时错误等。</li></ul><h2 id="59-Android中的菜单"><a href="#59-Android中的菜单" class="headerlink" title="59. Android中的菜单"></a>59. Android中的菜单</h2><h3 id="59-1-选项菜单（Options-menu）"><a href="#59-1-选项菜单（Options-menu）" class="headerlink" title="59.1. 选项菜单（Options menu）"></a>59.1. 选项菜单（Options menu）</h3><p>在选项菜单中，您应当包括与当前Activity上下文相关的操作和其他选项，如”搜索”、”撰写电子邮件”和”设置”。</p><ul><li>要为Activity指定选项菜单，请重写<code>onCreateOptionsMenu()</code>。</li><li>此外，您还可以使用<code>add()</code>添加菜单项，并使用<code>findItem()</code>检索项目，以便使用MenuItem API修改其属性。</li><li>系统将在启动Activity时调用<code>onCreateOptionsMenu()</code>，以便向应用栏显示项目。</li><li>用户从选项菜单中选择项目时，系统将调用Activity的<code>onOptionsItemSelected()</code>方法。此方法将传递所选的MenuItem。您可以通过调用<code>getItemId()</code>方法来识别项目，该方法将返回菜单项的唯一ID。</li><li>系统调用<code>onCreateOptionsMenu()</code>后，将保留您填充的Menu实例。除非菜单由于某些原因而失效，否则不会再次调用<code>onCreateOptionsMenu()</code>。</li><li>如需根据在Activity生命周期中发生的事件修改选项菜单，则可通过<code>onPrepareOptionsMenu()</code>方法执行此操作。此方法向您传递Menu对象（因为该对象目前存在），以便您能够对其进行修改，如添加、移除或禁用项目。</li><li>当菜单项显示在应用栏中时，选项菜单被视为始终处于打开状态。 发生事件时，如果您要执行菜单更新，则必须调用<code>invalidateOptionsMenu()</code>来请求系统调用<code>onPrepareOptionsMenu()</code>。</li></ul><h3 id="59-2-上下文菜单（Contextual-Menus）"><a href="#59-2-上下文菜单（Contextual-Menus）" class="headerlink" title="59.2. 上下文菜单（Contextual Menus）"></a>59.2. 上下文菜单（Contextual Menus）</h3><h4 id="59-2-1-浮动上下文菜单（floating-context-menu）"><a href="#59-2-1-浮动上下文菜单（floating-context-menu）" class="headerlink" title="59.2.1. 浮动上下文菜单（floating context menu）"></a>59.2.1. 浮动上下文菜单（floating context menu）</h4><p>用户长按（按住）一个声明支持上下文菜单的视图时，菜单显示为菜单项的浮动列表（类似于对话框）。</p><ul><li>通过调用<code>registerForContextMenu()</code>，注册应与上下文菜单关联的View并将其传递给View。</li><li>在Activity或Fragment中实现<code>onCreateContextMenu()</code>方法。</li><li><p>实现<code>onContextItemSelected()</code>。</p><h4 id="上下文操作模式（contextual-action-mode）"><a href="#上下文操作模式（contextual-action-mode）" class="headerlink" title="上下文操作模式（contextual action mode）"></a>上下文操作模式（contextual action mode）</h4><p>上下文操作模式是 ActionMode 的一种系统实现，它将用户交互的重点转到执行上下文操作上。用户通过选择项目启用此模式时，屏幕顶部将出现一个”上下文操作栏”，显示用户可对当前所选项执行的操作。 启用此模式后，用户可以选择多个项目（若您允许）、取消选择项目以及继续在 Activity 内导航（在您允许的最大范围内）。</p></li><li><p>实现ActionMode.Callback接口。在其回调方法中，您既可以为上下文操作栏指定操作，又可以响应操作项目的点击事件，还可以处理操作模式的其他生命周期事件。</p></li><li><p>当需要显示操作栏时（例如，用户长按视图），请调用<code>startActionMode()</code>。</p></li></ul><h3 id="59-3-弹出菜单（Popup-Menu）"><a href="#59-3-弹出菜单（Popup-Menu）" class="headerlink" title="59.3. 弹出菜单（Popup Menu）"></a>59.3. 弹出菜单（Popup Menu）</h3><p>PopupMenu 是锚定到 View 的模态菜单。如果空间足够，它将显示在定位视图下方，否则显示在其上方。</p><ul><li>实例化PopupMenu及其构造函数，该函数将提取当前应用的Context以及菜单应锚定到的View。</li><li>使用MenuInflater将菜单资源扩充到<code>PopupMenu.getMenu()</code>返回的Menu对象中。</li><li>调用<code>PopupMenu.show()</code>。</li></ul><h2 id="60-BaseAdapter中需要重载的方法"><a href="#60-BaseAdapter中需要重载的方法" class="headerlink" title="60. BaseAdapter中需要重载的方法"></a>60. BaseAdapter中需要重载的方法</h2><p>最基本的：</p><ul><li><code>int getCount ()</code>：How many items are in the data set represented by this Adapter.</li><li><code>Object getItem (int position)</code>：Get the data item associated with the specified position in the data set.</li><li><code>long getItemId (int position)</code>：Get the row id associated with the specified position in the list.</li><li><code>View getView (int position, View convertView, ViewGroup parent)</code>：Get a View that displays the data at the specified position in the data set.</li></ul><p>如果有多种View：</p><ul><li><code>int getItemViewType (int position)</code>：Get the type of View that will be created by getView(int, View, ViewGroup) for the specified item.</li><li><code>int getViewTypeCount ()</code>：Returns the number of types of Views that will be created by getView(int, View, ViewGroup).</li></ul><h2 id="61-Android数字签名要点"><a href="#61-Android数字签名要点" class="headerlink" title="61. Android数字签名要点"></a>61. Android数字签名要点</h2><ul><li>所有的应用程序都必须有数字证书，Android系统不会安装一个没有数字证书的应用程序。</li><li>Android程序包使用的数字证书可以是自签名的，不需要一个权威的数字证书机构签名认证。</li><li>如果要正式发布一个Android应用，必须使用一个合适的私钥生成的数字证书来给程序签名，而不能使调试证书来发布。</li><li>数字证书都是有有效期的，Android只是在应用程序安装的时候才会检查证书的有效期。如果程序已经安装在系统中，即使证书过期也不会影响程序的正常功能。</li></ul><h2 id="62-使用相同数字签名的原因"><a href="#62-使用相同数字签名的原因" class="headerlink" title="62. 使用相同数字签名的原因"></a>62. 使用相同数字签名的原因</h2><ul><li>应用升级：当系统安装应用的更新时，它会比较新版本和现有版本中的证书。如果证书匹配，则系统允许更新。如果您使用不同的证书签署新版本，则必须为应用分配另一个软件包名称—-在此情况下，用户将新版本作为全新应用安装。</li><li>应用模块化：Android允许通过相同证书签署的多个APK在同一个进程中运行（如果应用请求这样），以便系统将它们视为单个应用。通过此方式，您可以在模块中部署您的应用，且用户可以独立更新每个模块。</li><li>通过权限共享代码/数据：Android提供基于签名的权限执行，以便应用可以将功能展示给使用指定证书签署的另一应用。通过使用同一个证书签署多个APK并使用基于签名的权限检查功能，您的应用可采用安全的方式共享代码和数据。</li></ul><h2 id="63-Theme和Sytle"><a href="#63-Theme和Sytle" class="headerlink" title="63. Theme和Sytle"></a>63. Theme和Sytle</h2><h3 id="63-1-Style"><a href="#63-1-Style" class="headerlink" title="63.1. Style"></a>63.1. Style</h3><p>样式是指为View或窗口指定外观和格式的属性集合。样式可以指定高度、填充、字体颜色、字号、背景色等许多属性。 样式是在与指定布局的XML不同的XML资源中进行定义。</p><ul><li>要创建一组样式，请在您的项目的<code>res/values/</code>目录中保存一个XML文件。</li><li>该XML文件的根节点必须是<code>&lt;resources&gt;</code>。</li><li>对于您想创建的每个样式，向该文件添加一个<code>&lt;style&gt;</code>元素，该元素带有对样式进行唯一标识的<code>name</code>属性（该属性为必需属性）。</li><li>然后为该样式的每个属性添加一个<code>&lt;item&gt;</code>元素，该元素带有声明样式属性以及属性值的<code>name</code>（该属性为必需属性）。</li><li>根据样式属性，<code>&lt;item&gt;</code>的值可以是关键字字符串、十六进制颜色值、对另一资源类型的引用或其他值。</li><li>您可以通过<code>&lt;style&gt;</code>元素中的<code>parent</code>属性指定应作为您的样式所继承属性来源的样式。</li><li>当您对布局中的单个View应用样式时，该样式定义的属性只应用于该View。如果对ViewGroup应用样式，子View元素将不会继承样式属性—-只有被您直接应用样式的元素才会应用其属性。</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CodeFont<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@android:style/TextAppearance.Medium<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        &lt;item name=<span class="token string">"android:layout_width"</span>>fill_parent&lt;/item>        &lt;item name=<span class="token string">"android:layout_height"</span>>wrap_content&lt;/item>        &lt;item name=<span class="token string">"android:textColor"</span>><span class="token hexcode">#00FF00</span>&lt;/item>        &lt;item name=<span class="token string">"android:typeface"</span>>monospace&lt;/item>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span><span class="token style-attr language-css"><span class="token attr-name">    <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">@style/CodeFont</span><span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/hello<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h3 id="63-2-Theme"><a href="#63-2-Theme" class="headerlink" title="63.2. Theme"></a>63.2. Theme</h3><p>主题是指对整个Activity或应用而不是对单个View（如上例所示）应用的样式。以主题形式应用样式时，Activity或应用中的每个视图都将应用其支持的每个样式属性。例如，您可以Activity主题形式应用同一CodeFont样式，之后该Activity内的所有文本都将具有绿色固定宽度字体。</p><ul><li>在XML中定义您想用作Activity或应用主题的样式与定义视图样式的方法完全相同。</li><li>Activity或应用内的每个View都将应用其支持的每个属性。例如，如果您对某个Activity应用前面示例中的CodeFont样式，则所有支持这些文本样式属性的View元素也会应用这些属性。任何不支持这些属性的View都会忽略这些属性。如果某个View仅支持部分属性，将只应用这些属性。</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span> <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/CustomTheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@android:style/Theme.Dialog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="64-Toast的时长设置"><a href="#64-Toast的时长设置" class="headerlink" title="64. Toast的时长设置"></a>64. Toast的时长设置</h2><p>Toast的显示时长仅有两种：<code>LENGTH_SHORT</code>和<code>LENGTH_LONG</code>。</p><p><code>Toast makeText (Context context, CharSequence text, int duration)</code>：duration <code>int</code>: How long to display the message. Either <code>LENGTH_SHORT</code> or <code>LENGTH_LONG</code>。</p><h2 id="65-触发ANR的情况"><a href="#65-触发ANR的情况" class="headerlink" title="65. 触发ANR的情况"></a>65. 触发ANR的情况</h2><ul><li>KeyDispatchTimeout(5 seconds)：按键或触摸事件在特定时间内无响应；</li><li>BroadcastTimeout(10 seconds)：BroadcastReceiver在特定时间内无法处理完成；</li><li>ServiceTimeout(20 seconds)：Service在特定的时间内无法处理完成</li></ul><h2 id="66-ServiceConnection的onServiceConnected-触发条件"><a href="#66-ServiceConnection的onServiceConnected-触发条件" class="headerlink" title="66. ServiceConnection的onServiceConnected()触发条件"></a>66. ServiceConnection的<code>onServiceConnected()</code>触发条件</h2><ul><li><code>bindService()</code>方法执行成功；</li><li><code>onBind()</code>方法返回非空IBinder对象。</li></ul><h2 id="67-Android虚拟设备不支持的功能"><a href="#67-Android虚拟设备不支持的功能" class="headerlink" title="67. Android虚拟设备不支持的功能"></a>67. Android虚拟设备不支持的功能</h2><ul><li>WLAN</li><li>蓝牙</li><li>NFC</li><li>SD 卡插入/弹出</li><li>连接到设备的耳机</li><li>USB</li></ul><h2 id="68-RemoteView的应用"><a href="#68-RemoteView的应用" class="headerlink" title="68. RemoteView的应用"></a>68. RemoteView的应用</h2><ul><li>AppWidget</li><li>Notification</li></ul><h2 id="69-Android对HashMap做了优化后推出的新的容器类是什么？"><a href="#69-Android对HashMap做了优化后推出的新的容器类是什么？" class="headerlink" title="69. Android对HashMap做了优化后推出的新的容器类是什么？"></a>69. Android对HashMap做了优化后推出的新的容器类是什么？</h2><h3 id="69-1-SparseArray"><a href="#69-1-SparseArray" class="headerlink" title="69.1. SparseArray"></a>69.1. SparseArray</h3><p>SparseArray比HashMap更省内存，在某些条件下性能更好，主要是因为它避免了对key的自动装箱（int转为Integer类型），它内部则是通过两个数组来进行数据存储的，一个存储key，另外一个存储value，为了优化性能，它内部对数据还采取了压缩的方式来表示稀疏数组的数据，从而节约内存空间。</p><h3 id="69-2-ArrayMap"><a href="#69-2-ArrayMap" class="headerlink" title="69.2. ArrayMap"></a>69.2. ArrayMap</h3><p>ArrayMap是一个&lt;key,value&gt;映射的数据结构，它设计上更多的是考虑内存的优化，内部是使用两个数组进行数据存储，一个数组记录key的hash值，另外一个数组记录Value值，它和SparseArray一样，也会对key使用二分法进行从小到大排序，在添加、删除、查找数据的时候都是先使用二分查找法得到相应的index，然后通过index来进行添加、查找、删除等操作。</p><h2 id="70-Android安全沙盒"><a href="#70-Android安全沙盒" class="headerlink" title="70. Android安全沙盒"></a>70. Android安全沙盒</h2><ul><li>Android操作系统是一种多用户Linux系统，其中的每个应用都是一个不同的用户；</li><li>默认情况下，系统会为每个应用分配一个唯一的Linux用户ID（该ID仅由系统使用，应用并不知晓）。系统为应用中的所有文件设置权限，使得只有分配给该应用的用户ID才能访问这些文件；</li><li>每个进程都具有自己的虚拟机 (VM)，因此应用代码是在与其他应用隔离的环境中运行；</li><li>默认情况下，每个应用都在其自己的Linux进程内运行。Android会在需要执行任何应用组件时启动该进程，然后在不再需要该进程或系统必须为其他应用恢复内存时关闭该进程。</li></ul><h2 id="71-onStartCommand-有哪些返回值"><a href="#71-onStartCommand-有哪些返回值" class="headerlink" title="71. onStartCommand()有哪些返回值"></a>71. <code>onStartCommand()</code>有哪些返回值</h2><p><code>onStartCommand()</code>的返回值用于描述系统应该如何在服务终止的情况下继续运行服务。其值可以为</p><ul><li><code>START_NOT_STICKY</code>：如果系统在<code>onStartCommand()</code>返回后终止服务，则除非有挂起Intent要传递，否则系统不会重建服务。这是最安全的选项，可以避免在不必要时以及应用能够轻松重启所有未完成的作业时运行服务。</li><li><code>START_STICKY</code>：如果系统在<code>onStartCommand()</code>返回后终止服务，则会重建服务并调用<code>onStartCommand()</code>，但不会重新传递最后一个Intent。相反，除非有挂起Intent要启动服务（在这种情况下，将传递这些Intent），否则系统会通过空Intent调用<code>onStartCommand()</code>。这适用于不执行命令、但无限期运行并等待作业的媒体播放器（或类似服务）。</li><li><code>START_REDELIVER_INTENT</code>：如果系统在<code>onStartCommand()</code>返回后终止服务，则会重建服务，并通过传递给服务的最后一个Intent调用<code>onStartCommand()</code>。任何挂起Intent均依次传递。这适用于主动执行应该立即恢复的作业（例如下载文件）的服务。</li></ul><h2 id="72-如何创建绑定服务"><a href="#72-如何创建绑定服务" class="headerlink" title="72. 如何创建绑定服务"></a>72. 如何创建绑定服务</h2><p>建提供绑定的服务时，您必须提供IBinder，用以提供客户端用来与服务进行交互的编程接口。</p><h3 id="72-1-扩展Binder类"><a href="#72-1-扩展Binder类" class="headerlink" title="72.1. 扩展Binder类"></a>72.1. 扩展Binder类</h3><p>如果服务是供您的自有应用专用，并且在与客户端相同的进程中运行（常见情况），则应通过扩展Binder类并从<code>onBind()</code>返回它的一个实例来创建接口。客户端收到Binder后，可利用它直接访问Binder实现中乃至Service中可用的公共方法。</p><ol><li>在您的服务中，创建一个可满足下列任一要求的Binder实例：</li></ol><ul><li>包含客户端可调用的公共方法</li><li>返回当前Service实例，其中包含客户端可调用的公共方法</li><li>或返回由服务承载的其他类的实例，其中包含客户端可调用的公共方法</li></ul><ol start="2"><li>从<code>onBind()</code>回调方法返回此Binder实例。</li><li>在客户端中，从<code>onServiceConnected()</code>回调方法接收Binder，并使用提供的方法调用绑定服务。</li></ol><h3 id="72-2-使用Messenger"><a href="#72-2-使用Messenger" class="headerlink" title="72.2. 使用Messenger"></a>72.2. 使用Messenger</h3><ol><li>服务实现一个Handler，由其接收来自客户端的每个调用的回调</li><li>Handler用于创建Messenger对象（对Handler的引用）</li><li>Messenger创建一个IBinder，服务通过<code>onBind()</code>使其返回客户端</li><li>客户端使用IBinder将Messenger（引用服务的Handler）实例化，然后使用后者将Message对象发送给服务</li><li>服务在其Handler中（具体地讲，是在<code>handleMessage()</code>方法中）接收每个 Message。</li></ol><p>这样，客户端并没有调用服务的“方法”。而客户端传递的“消息”（Message对象）是服务在其Handler中接收的。</p><h2 id="73-如何绑定到服务"><a href="#73-如何绑定到服务" class="headerlink" title="73. 如何绑定到服务"></a>73. 如何绑定到服务</h2><p>应用组件（客户端）可通过调用<code>bindService()</code>绑定到服务。Android系统随后调用服务的onBind()方法，该方法返回用于与服务交互的IBinder。</p><p>绑定是异步的。<code>bindService()</code>会立即返回，“不会”使IBinder返回客户端。要接收IBinder，客户端必须创建一个ServiceConnection实例，并将其传递给<code>bindService()</code>。ServiceConnection包括一个回调方法，系统通过调用它来传递IBinder。</p><ol><li><p>实现ServiceConnection。您的实现必须重写两个回调方法：<code>onServiceConnected()</code>：系统会调用该方法以传递服务的onBind()方法返回的IBinder。<code>onServiceDisconnected()</code>：Android 系统会在与服务的连接意外中断时（例如当服务崩溃或被终止时）调用该方法。当客户端取消绑定时，系统“不会”调用该方法。</p></li><li><p>调用<code>bindService()</code>，传递ServiceConnection实现。</p></li><li><p>当系统调用您的<code>onServiceConnected()</code>回调方法时，您可以使用接口定义的方法开始调用服务。</p></li><li><p>要断开与服务的连接，请调用<code>unbindService()</code>。如果应用在客户端仍绑定到服务时销毁客户端，则销毁会导致客户端取消绑定。更好的做法是在客户端与服务交互完成后立即取消绑定客户端。</p></li></ol><h2 id="74-Android支持的屏幕密度"><a href="#74-Android支持的屏幕密度" class="headerlink" title="74. Android支持的屏幕密度"></a>74. Android支持的屏幕密度</h2><ul><li>ldpi（低）：120dpi</li><li>mdpi（中）：160dpi</li><li>hdpi（高）：240dpi</li><li>xhdpi（超高）：320dpi</li><li>xxhdpi（超超高）：480dpi</li><li>xxxhdpi（超超超高）：640dpi</li></ul><h2 id="75-如何支持多种屏幕"><a href="#75-如何支持多种屏幕" class="headerlink" title="75. 如何支持多种屏幕"></a>75. 如何支持多种屏幕</h2><ul><li>在清单中显式声明您的应用支持哪些屏幕尺寸；</li><li>为不同屏幕尺寸提供不同的布局；</li><li>为不同屏幕密度提供不同的位图可绘制对象。</li></ul><h2 id="76-什么是资源ID"><a href="#76-什么是资源ID" class="headerlink" title="76. 什么是资源ID"></a>76. 什么是资源ID</h2><p>所有资源ID都在您项目的R类中定义，后者由aapt工具自动生成。</p><p>编译应用时，aapt会生成R类，其中包含您的res/目录中所有资源的资源ID。每个资源类型都有对应的R子类（例如，R.drawable对应于所有可绘制对象资源），而该类型的每个资源都有对应的静态整型数（例如，R.drawable.icon）。这个整型数就是可用来检索资源的资源ID。</p><p>资源ID始终由以下部分组成：</p><ul><li>资源类型：每个资源都被分到一个“类型”组中，例如string、drawable和layout。</li><li>资源名称：它是不包括扩展名的文件名；或是XML android:name属性中的值，如果资源是简单值的话（例如字符串）。</li></ul><h2 id="77-如何处理运行时变更"><a href="#77-如何处理运行时变更" class="headerlink" title="77. 如何处理运行时变更"></a>77. 如何处理运行时变更</h2><p>有些设备配置可能会在运行时发生变化（例如屏幕方向、键盘可用性及语言）。发生这种变化时，Android会重启正在运行的Activity（先后调用<code>onDestroy()</code>和<code>onCreate()</code>）。</p><h3 id="77-1-在配置变更期间保留对象"><a href="#77-1-在配置变更期间保留对象" class="headerlink" title="77.1. 在配置变更期间保留对象"></a>77.1. 在配置变更期间保留对象</h3><p>如果Activity因配置变更而重启，则可通过保留Fragment来减轻重新初始化Activity的负担。此片段可能包含对您要保留的有状态对象的引用。</p><ol><li>扩展Fragment类并声明对有状态对象的引用。</li><li>在创建片段后调用<code>setRetainInstance(boolean)</code>。</li><li>将片段添加到Activity。</li><li>重启Activity后，使用FragmentManager检索片段。</li></ol><h3 id="77-2-自行处理配置变更"><a href="#77-2-自行处理配置变更" class="headerlink" title="77.2. 自行处理配置变更"></a>77.2. 自行处理配置变更</h3><p>要声明由Activity处理配置变更，请在清单文件中编辑相应的<code>&lt;activity&gt;</code>元素，以包含<code>android:configChanges</code>属性以及代表要处理的配置的值。<code>android:configChanges</code>属性的文档中列出了该属性的可能值（最常用的值包括”orientation”和”keyboardHidden”，分别用于避免因屏幕方向和可用键盘改变而导致重启）。</p><h2 id="78-AndroidManifest-xml包括哪些内容？"><a href="#78-AndroidManifest-xml包括哪些内容？" class="headerlink" title="78. AndroidManifest.xml包括哪些内容？"></a>78. AndroidManifest.xml包括哪些内容？</h2><ul><li>为应用的Java软件包命名。软件包名称充当应用的唯一标识符。</li><li>描述应用的各个组件，包括构成应用的Activity、服务、广播接收器和内容提供程序。它还为实现每个组件的类命名并发布其功能，例如它们可以处理的Intent消息。这些声明向Android系统告知有关组件以及可以启动这些组件的条件的信息。</li><li>确定托管应用组件的进程。</li><li>声明应用必须具备哪些权限才能访问API中受保护的部分并与其他应用交互。还声明其他应用与该应用组件交互所需具备的权限。</li><li>声明应用所需的最低Android API级别。</li><li>列出应用必须链接到的库。</li></ul><h2 id="79-用户界面如何构成？"><a href="#79-用户界面如何构成？" class="headerlink" title="79. 用户界面如何构成？"></a>79. 用户界面如何构成？</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/viewgroup.png" alt="View Group"></p><p>Android应用中的所有用户界面元素都是使用View和ViewGroup对象构建而成。View对象用于在屏幕上绘制可供用户交互的内容。ViewGroup对象用于储存其他View（和ViewGroup）对象，以便定义界面的布局。</p><p>每个应用组件的用户界面都是使用View和ViewGroup对象的层次结构定义的。每个视图组都是一个用于组织子视图的不可见容器，而子视图可以是输入控件或其他可绘制某一UI部分的小部件。 </p><h2 id="80-为什么要回收Bitmap的内存"><a href="#80-为什么要回收Bitmap的内存" class="headerlink" title="80. 为什么要回收Bitmap的内存"></a>80. 为什么要回收Bitmap的内存</h2><p>Bitmap的实例化只能通过BitmapFactory，而Bitmap对象的生成则是通过JNI调用，所以Bitmap包含Java和C两部分内存。Java部分内存可以通过虚拟机自动回收，但C部分则需要手动释放，所以需要显式调用<code>recycle()</code>方法来释放。</p><h2 id="81-如何优化Bitmap"><a href="#81-如何优化Bitmap" class="headerlink" title="81. 如何优化Bitmap"></a>81. 如何优化Bitmap</h2><ul><li>加载合适尺寸的图片；</li><li>及时回收Bitmap；</li><li>捕获OOM异常；</li><li>压缩图片；</li><li>使用合适的颜色模式。</li></ul><h2 id="82-如何在新进程中创建Activity／Service"><a href="#82-如何在新进程中创建Activity／Service" class="headerlink" title="82. 如何在新进程中创建Activity／Service"></a>82. 如何在新进程中创建Activity／Service</h2><p>在AndroidManifest中，组件元素条目（activity、service、receiver或provider）中设置<code>android:process</code>属性，此属性可以指定该组件应在哪个进程运行。</p><p>每新建一个进程，Application的<code>onCreate()</code>都将被调用一次。</p><h2 id="83-onActivityResult-什么时候会失效？"><a href="#83-onActivityResult-什么时候会失效？" class="headerlink" title="83. onActivityResult()什么时候会失效？"></a>83. <code>onActivityResult()</code>什么时候会失效？</h2><p>在<code>startActivity()</code>为SingleTask时会失效。</p><blockquote><p>For example, if the activity you are launching uses the singleTask launch mode, it will not run in your task and thus you will immediately receive a cancel result.</p></blockquote><p>如果你正加载的activity使用了singleTask的加载模式，它不会在你的栈中运行，而且这样你会马上收到一个取消的结果。即在<code>onActivityResult()</code>里马上得到一个RESULT_CANCEL。</p><h2 id="84-Android崩溃捕获"><a href="#84-Android崩溃捕获" class="headerlink" title="84. Android崩溃捕获"></a>84. Android崩溃捕获</h2><h3 id="84-1-Java崩溃捕获"><a href="#84-1-Java崩溃捕获" class="headerlink" title="84.1. Java崩溃捕获"></a>84.1. Java崩溃捕获</h3><p>Java提供有UncaughtExceptionHandler接口，该接口含有一个方法：<code>void uncaughtException(Thread t, Throwable e)</code>。</p><p>Uncaught异常发生时会终止线程，此时，系统便会通知UncaughtExceptionHandler，调用<code>uncaughtException()</code>函数。如果该handler没有被显式设置，则会调用对应线程组的默认handler。</p><p>如果要捕获该异常，必须实现UncaughtExceptionHandler，并通过<code>public static void setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler handler)</code>进行设置。</p><h3 id="84-2-Native崩溃捕获"><a href="#84-2-Native崩溃捕获" class="headerlink" title="84.2. Native崩溃捕获"></a>84.2. Native崩溃捕获</h3><p>对Native代码的崩溃，可以通过调用<code>int sigaction(int signum,const struct sigaction *act,struct sigaction *oldact))</code>注册信号处理函数来完成。</p><h2 id="85-Android-APP构建流程"><a href="#85-Android-APP构建流程" class="headerlink" title="85. Android APP构建流程"></a>85. Android APP构建流程</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/build_process.png" alt="Build Process"></p><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/build_process_2.png" alt="Build Process"></p><p>典型的Android APP构建流程：</p><ol><li>Java编译器对工程本身的java代码进行编译，这些java代码有三个来源：app的源代码，由资源文件生成的R文件（aapt工具），以及有aidl文件生成的java接口文件（aidl工具）。产出为.class文件。</li><li>class文件和依赖的三方库文件通过dex工具生成Delvik虚拟机可执行的.dex文件，可能有一个或多个，包含了所有的class信息，包括项目自身的class和依赖的class。产出为.dex文件。</li><li>apkbuilder工具将.dex文件和编译后的资源文件生成未经签名对齐的apk文件。这里编译后的资源文件包括两部分，一是由aapt编译产生的编译后的资源文件，二是依赖的三方库里的资源文件。产出为未经签名的.apk文件。</li><li>分别由Jarsigner和zipalign对apk文件进行签名和对齐，生成最终的apk文件。</li></ol><h2 id="86-class文件与-dex文件的区别"><a href="#86-class文件与-dex文件的区别" class="headerlink" title="86. class文件与.dex文件的区别"></a>86. class文件与.dex文件的区别</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/class_vs_dex.png" alt="class vs dex"></p><h2 id="87-65535问题"><a href="#87-65535问题" class="headerlink" title="87. 65535问题"></a>87. 65535问题</h2><h3 id="87-1-原因"><a href="#87-1-原因" class="headerlink" title="87.1. 原因"></a>87.1. 原因</h3><p>单个dex文件中，method个数采用使用原生类型short来索引，即2个字节最多65536个method，field、class的个数也均有此限制。</p><h3 id="87-2-解决方法"><a href="#87-2-解决方法" class="headerlink" title="87.2. 解决方法"></a>87.2. 解决方法</h3><p>build.gradle中配置<code>multiDexEnabled true</code>，将dex分包。</p><h2 id="88-Dalvik与JVM的区别"><a href="#88-Dalvik与JVM的区别" class="headerlink" title="88. Dalvik与JVM的区别"></a>88. Dalvik与JVM的区别</h2><ul><li>JVM可以执行的文件是.class结尾的字节码文件，而Dalvik执行的是dex文件（不符合JVM规范）。</li><li>Dalvik基于寄存器，而JVM基于栈。</li><li>Dalvik负责进程隔离和线程管理，每一个Android应用在底层都会对应一个独立的Dalvik虚拟机实例，其代码在虚拟机的解释下得以执行。</li></ul><p>除此之外：</p><ul><li>有一个特殊的虚拟机进程Zygote，他是虚拟机实例的孵化器。它在系统启动的时候就会产生，它会完成虚拟机的初始化、库的加载、预制类库和初始化的操作。如果系统需要一个新的虚拟机实例，它会迅速复制自身，以最快的速度提供给系统。</li></ul><h2 id="89-ART相对Dalvik的优化"><a href="#89-ART相对Dalvik的优化" class="headerlink" title="89. ART相对Dalvik的优化"></a>89. ART相对Dalvik的优化</h2><ul><li>AOT替换JIT：使用AOT直接在安装时用dex2oat将其完全翻译成native代码。</li><li>GC性能提升：并行GC。</li><li>提升内存效率：专门开辟内存存放large object，因为large object移动成本太大；引入moving collector技术，将不连续的物理内存块对齐，解决内存碎片化问题。</li></ul><p>参考：<a href="https://source.android.com/devices/tech/dalvik/" target="_blank" rel="noopener">ART and Dalvik | Android Open Source Project</a></p><h2 id="90-Android中的ClassLoader"><a href="#90-Android中的ClassLoader" class="headerlink" title="90. Android中的ClassLoader"></a>90. Android中的ClassLoader</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/classloader.png" alt="ClassLoader"></p><ul><li>在Android中，App安装到手机后，apk里面的class.dex中的class均是通过PathClassLoader来加载的。</li><li>DexClassLoader可以用来加载SD卡上加载包含class.dex的.jar和.apk文件。</li><li>DexClassLoader和PathClassLoader的基类BaseDexClassLoader查找class是通过其内部的<code>DexPathList pathList</code>来查找的。</li><li>DexPathList内部有一个<code>Element[] dexElements</code>数组，其<code>findClass()</code>方法的实现就是遍历该数组，查找class，一旦找到需要的类，就直接返回，停止遍历。</li></ul><h2 id="91-ClassLoader方式实现热修复"><a href="#91-ClassLoader方式实现热修复" class="headerlink" title="91. ClassLoader方式实现热修复"></a>91. ClassLoader方式实现热修复</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/classloader_hotpatch.jpg" alt="ClassLoader Hot Patch"></p><p>主要步骤：</p><ol><li>假设MainActivity中有一个方法<code>showMsg()</code>需要修复。</li><li>修复<code>showMsg()</code>方法，制作补丁包patch.jar，该patch.jar文件中就包含已经修复了的dex文件。</li><li>在Application的<code>onCreate()</code>方法中检测是否已经下载好补丁包，如果存在补丁包，就通过DexClassLoader加载patch.jar，然后通过反射拿到DexClassLoader中的 DexPathList对象，进而拿到<code>Element[] dexElements</code>数组，这里标记该Element数组为<code>newDexElements</code>。</li><li>还是通过反射，拿到App默认的ClassLoader即PathClassLoader的DexPathList对象，进而拿到Element数组，这里标记下该数组为<code>baseDexElements</code>。</li><li>将<code>newDexElements</code>和<code>baseDexElements</code>合成一个新的数组<code>allDexElements</code>，且保证<code>newDexElements</code>中的值在<code>allDexElements</code>数组的最前面。</li><li>然后还是通过通过反射，将合成的Element数组设置给PathClassLoader的DexPathList对象。</li><li>在Application完成初始化之后，会开始加载MainActivity，加载过程就是通过DexPathList对象的<code>findClass()</code>方法来完成的，会从头开始遍历其Element数组，会优先查找到之前插入的补丁包中的dexFile，而原apk中的则不会查找到，因此就实现了热修复的目的。</li></ol><p>参考：<a href="http://jaeger.itscoder.com/android/2016/09/20/nuva-source-code-analysis.html" target="_blank" rel="noopener">热修复实现：ClassLoader 方式的实现</a></p><h2 id="92-AsyncTask需要在主线程中实例化吗？"><a href="#92-AsyncTask需要在主线程中实例化吗？" class="headerlink" title="92. AsyncTask需要在主线程中实例化吗？"></a>92. AsyncTask需要在主线程中实例化吗？</h2><h3 id="92-1-API-16之前"><a href="#92-1-API-16之前" class="headerlink" title="92.1. API 16之前"></a>92.1. API 16之前</h3><p>AsyncTask的静态Handler创建和初始化时默认采用的是当前现场的Looper。若子线程无Looper，则会出错；若有Looper则会导致处理消息时无法在主线程执行，出错。所以AsyncTask必须在主线程实例化。</p><h3 id="92-2-API-16及之后，API-22之前"><a href="#92-2-API-16及之后，API-22之前" class="headerlink" title="92.2. API 16及之后，API 22之前"></a>92.2. API 16及之后，API 22之前</h3><p>在ActivityThread的<code>main()</code>中直接调用了<code>AsyncTask.init()</code>，保证Handler在主线程实例化。所以AsyncTask不需要在主线程实例化。</p><h3 id="92-3-API-22及之后"><a href="#92-3-API-22及之后" class="headerlink" title="92.3. API 22及之后"></a>92.3. API 22及之后</h3><p>不再在ActivityThread的<code>main()</code>中调用。AsyncTask通过<code>getMainLooper()</code>获得主线程Looper。所以AsyncTask不需要在主线程实例化。</p><h2 id="93-Android消息处理机制"><a href="#93-Android消息处理机制" class="headerlink" title="93. Android消息处理机制"></a>93. Android消息处理机制</h2><p>Android消息处理机制主要涉及4个类：Looper、Handler、MessageQueue和Message。</p><h3 id="93-1-Looper"><a href="#93-1-Looper" class="headerlink" title="93.1. Looper"></a>93.1. Looper</h3><p>Looper的使用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LooperThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Handler mHandler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// process incoming messages here</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Looper概览：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Looper</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Looper<span class="token operator">></span> sThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> MessageQueue mQueue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Looper</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Only one Looper may be created per thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Looper</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Looper <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            Message msg <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// might block</span>            msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>prepare()</code>会检查此线程是否已经存在Looper，随后便会实例化一个Looper（创建一个MessageQueue），并将此Looper设置为此线程的ThreadLocal变量，这样完成Looper和线程的绑定。</p><p><code>loop()</code>即进从MessageQueue取消息并处理的死循环。</p><h3 id="93-2-Handler"><a href="#93-2-Handler" class="headerlink" title="93.2. Handler"></a>93.2. Handler</h3><p>Handler概览：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Looper mLooper<span class="token punctuation">;</span>    <span class="token keyword">final</span> MessageQueue mQueue<span class="token punctuation">;</span>    <span class="token keyword">final</span> Handler<span class="token punctuation">.</span>Callback mCallback<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLooper <span class="token operator">=</span> Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mLooper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                    <span class="token string">"Can't create handler inside thread that has not called Looper.prepare()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mQueue <span class="token operator">=</span> mLooper<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>callback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">handleCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> Message <span class="token function">obtainMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> Message <span class="token function">obtainMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> what<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> what<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Message <span class="token function">getPostMessage</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Message m <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span>callback <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">post</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span><span class="token function">getPostMessage</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> delayMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> delayMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MessageQueue queue <span class="token operator">=</span> mQueue<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>MessageQueue queue<span class="token punctuation">,</span> Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">enqueueMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handleCallback</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        message<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>一般的用法是对<code>mHandler</code>调用<code>obtainMessage()</code>获得Message并设置参数后通过<code>sendMessage()</code>发送出去。在<code>obtainMessage()</code>和<code>sendMessage()</code>都会设置Message的Handler为本Handler（Message的<code>target</code>变量），若需向Message传递Runnable对象，则会在Message的<code>callback</code>变量中记录。</p><p><code>sendMessage()</code>最终会调用MessageQueue的<code>enqueueMessage()</code>方法，将此Message绑定到对应Looper对应的MessageQueue上。而Looper中收到Message后，会调用Message的<code>target</code>变量（即Handler）的<code>dispatchMessage()</code>方法。对于普通Message，<code>dispatchMessage()</code>又会去调用<code>handleMessage()</code>方法，而这个方法会被用户重载，所以会执行<code>mHandler</code>中指定的代码。</p><p>参考：<a href="http://www.cnblogs.com/codingmyworld/archive/2011/09/12/2174255.html" target="_blank" rel="noopener">android的消息处理机制（图+源码分析）——Looper,Handler,Message - CodingMyWorld - 博客园</a></p><h2 id="94-startActivity-执行流程"><a href="#94-startActivity-执行流程" class="headerlink" title="94. startActivity()执行流程"></a>94. <code>startActivity()</code>执行流程</h2><p><img src="/2018/12/31/android-kai-fa-xiang-guan-zhi-shi-zong-jie/start_activity_process.jpg" alt="Start Activity Process"></p><ul><li>当Activity的目标进程不存在时，会首先创建进程。</li><li>Activity Manager Service（AMS）向目标进程的主线程发送<code>LAUNCH_ACTIVITY</code>，目标进程通过反射创建目标Activity，然后进入<code>onCreate()</code>生命周期。</li></ul><p>参考：<a href="http://gityuan.com/2016/03/12/start-activity/" target="_blank" rel="noopener">startActivity启动过程分析 - Gityuan博客 | 袁辉辉博客</a></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安卓开发项目相关问题总结</title>
      <link href="/2018/12/31/an-zhuo-kai-fa-xiang-mu-xiang-guan-wen-ti-zong-jie/"/>
      <url>/2018/12/31/an-zhuo-kai-fa-xiang-mu-xiang-guan-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h1><!-- TOC --><ul><li><a href="#1-基于android和java的流式二维码数据传输系统">1. 基于Android和Java的流式二维码数据传输系统</a><ul><li><a href="#11-简介">1.1. 简介</a></li><li><a href="#12-应用和优点">1.2. 应用和优点</a></li><li><a href="#13-传输效率">1.3. 传输效率</a></li><li><a href="#14-研究贡献">1.4. 研究贡献</a><ul><li><a href="#141-第一阶段">1.4.1. 第一阶段</a></li><li><a href="#142-第二阶段">1.4.2. 第二阶段</a></li></ul></li><li><a href="#15-开发app遇到的问题">1.5. 开发APP遇到的问题</a><ul><li><a href="#151-不能实时解码">1.5.1. 不能实时解码</a></li><li><a href="#152-代码扩展性差">1.5.2. 代码扩展性差</a></li></ul></li><li><a href="#16-用到了哪些机器学习方法">1.6. 用到了哪些机器学习方法</a></li><li><a href="#17-mediacodec应用在哪里">1.7. <code>MediaCodec</code>应用在哪里？</a></li><li><a href="#18-代码结构">1.8. 代码结构</a><ul><li><a href="#181-发送方">1.8.1. 发送方</a></li><li><a href="#182-接收方">1.8.2. 接收方</a></li></ul></li></ul></li><li><a href="#2-基于androidflask和mysql的用户情绪和隐私收集系统">2. 基于Android、Flask和MySQL的用户情绪和隐私收集系统</a><ul><li><a href="#21-简介">2.1. 简介</a></li><li><a href="#22-收集哪些隐私信息">2.2. 收集哪些隐私信息</a></li><li><a href="#23-如何长驻后台">2.3. 如何长驻后台</a></li><li><a href="#24-如何实现用户登录注册">2.4. 如何实现用户登录注册</a></li><li><a href="#25-问卷内容是什么">2.5. 问卷内容是什么？</a></li><li><a href="#26-调查问卷如何分发和收集">2.6. 调查问卷如何分发和收集</a></li><li><a href="#27-app如何定时抓取用户信息">2.7. APP如何定时抓取用户信息</a></li><li><a href="#28-如何上传用户数据">2.8. 如何上传用户数据</a></li><li><a href="#29-app崩溃如何分析恢复">2.9. APP崩溃如何分析恢复</a></li><li><a href="#210-后台提供哪些统计和管理">2.10. 后台提供哪些统计和管理</a></li><li><a href="#211-用到哪些第三方库">2.11. 用到哪些第三方库</a></li><li><a href="#212-后台是如何搭建的">2.12. 后台是如何搭建的</a></li><li><a href="#213-遇到过哪些问题">2.13. 遇到过哪些问题</a></li></ul></li></ul><!-- /TOC --><h2 id="1-基于Android和Java的流式二维码数据传输系统"><a href="#1-基于Android和Java的流式二维码数据传输系统" class="headerlink" title="1. 基于Android和Java的流式二维码数据传输系统"></a>1. 基于Android和Java的流式二维码数据传输系统</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1. 简介"></a>1.1. 简介</h3><p>流式二维码数据传输系统，以动态二维码的形式在手机／电脑之间传送文件。发送端可以是手机、电脑等任意有屏幕的设备，接收端是带有摄像头的手机。发送端将文件数据编码后嵌入到多个二维码中，二维码动态显式于电脑／手机屏幕上。接收端APP通过摄像头连续捕捉发送的二维码，识别并解码还原出数据，完成文件传输过程。</p><h3 id="1-2-应用和优点"><a href="#1-2-应用和优点" class="headerlink" title="1.2. 应用和优点"></a>1.2. 应用和优点</h3><ul><li>目前手机之间需要传送小文件（如照片）需要蓝牙或wifi进行配对连接，然后传输文件，这样有两个弊端：需要设备硬件支持，需要提前配对连接。而这种基于二维码的传输不需要硬件支持（手机几乎全都有摄像头），运行于软件层面上；且不需要提前建立连接，即用即传。</li><li>目前将文件从台式电脑传送到手机需要通过USB有线连接，或手机加入与台式机在同一局域网的wifi网络，这样很不方便。而通过基于二维码的传输只需要将二维码在电脑屏幕上显示，手机打开摄像头拍摄即可完成文件传输。</li><li>一些如企业等有保密需求的环境下，手机不能连接wifi加入同一局域网，通过基于二维码的传输则可方便解决。</li></ul><h3 id="1-3-传输效率"><a href="#1-3-传输效率" class="headerlink" title="1.3. 传输效率"></a>1.3. 传输效率</h3><p>在发送方最高为30fps的环境下，我们设计的黑白二维码可以达到200kbps，彩色（4色）二维码可以达到300kbps，应用机器学习后可以达到380kbps。</p><p>1080P每帧的处理时间在20ms左右。边界检测6ms，小方块采样8ms，识别2ms，纠错2ms。</p><h3 id="1-4-研究贡献"><a href="#1-4-研究贡献" class="headerlink" title="1.4. 研究贡献"></a>1.4. 研究贡献</h3><p>两个阶段</p><h4 id="1-4-1-第一阶段"><a href="#1-4-1-第一阶段" class="headerlink" title="1.4.1. 第一阶段"></a>1.4.1. 第一阶段</h4><ul><li>新的二维码布局：不同于一个小方块一种颜色，ShiftCode可以在小方块内部嵌套了一个更小的方块，以小方块的移动方向来嵌入数据。优点：嵌入数据更多，可扩展，为解决帧重叠问题提供可能。</li><li>解决帧重叠问题：对于30fps的接收方，当发送方帧速率超过15fps时就会出现帧重叠的问题。采用前后两帧相同位置小方块前景色和后景色相反的设计，可以在小方块发生帧重叠时正确区分前后帧小方块的移动方向，从而将重叠帧分离开。</li><li>可靠性解决方案：对于每一帧的数据，使用Reed-Solomon纠错编码，其优点是可以对连续出错有较好的纠错能力。对所有发送的帧数据使用RaptorQ冗余编码，因为这种传输是单向传输，并没有丢帧重传机制，RaptorQ可以将原始的N帧数据计算生成(N + K)帧数据，只要接收到任意的N帧即可还原出原数据。</li></ul><h4 id="1-4-2-第二阶段"><a href="#1-4-2-第二阶段" class="headerlink" title="1.4.2. 第二阶段"></a>1.4.2. 第二阶段</h4><ul><li>基于机器学习的通用动态二维码识别方案：对于任何现有的基于规则的动态二维码方案，都可以将其识别步骤替换为机器学习方案，识别效率和准确度上都有很大提升。</li><li>统一的识别框架：只需要将小方块采样点颜色和其对应的真实数据交给机器学习训练，得到机器学习模型，后续真正传输时只需要采样小方块，交给模型即可得到真实数据。</li><li>解决帧重叠问题：以黑白为例，重叠帧中小方块可能有4个状态：【黑+黑】、【黑+白】、【白+黑】和【白+白】，通过人为制造【黑+黑】、【黑+白】、【白+黑】和【白+白】这4个状态，接下就只需要确定小方块属于其中哪个状态。这实际是一个分类问题，只需要提前训练好状态的分类，即可判断出小方块的重叠情况。更细节的需要涉及到rolling shutter现象。</li></ul><h3 id="1-5-开发APP遇到的问题"><a href="#1-5-开发APP遇到的问题" class="headerlink" title="1.5. 开发APP遇到的问题"></a>1.5. 开发APP遇到的问题</h3><h4 id="1-5-1-不能实时解码"><a href="#1-5-1-不能实时解码" class="headerlink" title="1.5.1. 不能实时解码"></a>1.5.1. 不能实时解码</h4><p>问题：接收端为30fps，即一秒钟要处理30张图片，每一张图片总的（边界检测、采样、识别、纠错）处理时间要在33ms内。前期没有专门优化导致每帧处理时间需要1秒以上。</p><p>解决方法：</p><ul><li>使用Android Device Monitor的TraceView工具分析每一帧的处理耗时分布，找到耗时最长的函数进行优化，如此循环。</li><li>因Android提供的帧数据是NV21格式，最初是将图片由NV21转换为RGB，非常耗时。最初尝试将转换函数的浮点运算转换为整数运算，效果不好；之后尝试使用OpenGL ES的shader，即GPU来进行转换运算，有一定效果但耗时仍长；再尝试使用JNI即C++来运算，仍未达到预期。再后来转变思路，因为不会用到图片中所有像素点，所以可以在需要时再当场对单个像素点转换，这样暂时解决了问题。但后来发现因为采样点还是比较多，总体来看转换函数耗时还是很大，最后项目整体由RGB转到YUV，不再需要颜色转换，问题顺利解决。</li><li>二维码边界检测是使用一个小矩形逐渐放大直到框住二维码，这个过程需要逐像素行检查和扩展，很耗时。考虑到传输过程中摄像头不会大幅度移动，即二维码相对图片中的位置较为稳定，那么框住的矩形也会较为稳定，这样在确定一个矩形后，对于下一帧，只需要将矩形缩小1/3或1/5即可，节约了很多计算。</li><li>边界检测的结果是定位到二维码的四个顶点，最初是根据这四个顶点通过反透视变换生成一个标准的二维码，需要将原二维码中每个像素计算映射到标准二维码中，很耗时。后来考虑到反透视变换实际上只是计算出一个变换矩阵，而对于拍到二维码，只需要获得采样点的像素值即可，不需要将整个二维码中全部像素点都映射；所以只在需要某个采样点像素值时，将其标准化坐标通过透视变换矩阵转换为真实坐标，再获得像素值即可。</li><li>其他主要是Java语法层面优化，比如变量复用，减少<code>new</code>之类的。</li></ul><h4 id="1-5-2-代码扩展性差"><a href="#1-5-2-代码扩展性差" class="headerlink" title="1.5.2. 代码扩展性差"></a>1.5.2. 代码扩展性差</h4><p>问题：如有新的处理方法或新的二维码加入，需要修改代码时就有种牵一发而动全身的感觉，代码扩展性差。</p><p>解决方法：</p><ul><li>恶补面向对象编程思想，设计模式。</li><li>充分利用继承和抽象复用代码，如不同形状二维码，不同颜色二维码。</li><li>使用工厂方法管理不同二维码的实例化，复用同一套处理框架。</li><li>使用策略模式根据不同需求调整使用不同的二维码定位算法。</li><li>将各种不同二维码的构造生成方法抽象为统一的平台，将二维码分割成border、padding、数据区等块，对于每一块独立指定二维码形状和数据等即可生成二维码。这样避免了为每种二维码写一个大同小异的生成方法，也避免了需要计算各种偏移量等。</li></ul><h3 id="1-6-用到了哪些机器学习方法"><a href="#1-6-用到了哪些机器学习方法" class="headerlink" title="1.6. 用到了哪些机器学习方法"></a>1.6. 用到了哪些机器学习方法</h3><ul><li>实际是一个分类问题，features是小方块采样点颜色和对应参考颜色，class是小方块的真实数据。</li><li>最基本的是使用决策树（Decision Tree），分类效果较好。</li><li>为解决决策树学习时间长的问题，使用随机森林（Random Forest），学习速度有明显提高。</li><li>为解决每次传输需要当场学习出一个模型的问题，使用混合专家模型（Mixture of Experts），对不同场景进行几次传输得到多个模型，使用混合专家模型时只需要在最开始放上少量的学习帧，即可得到各模型的权重，形成一个新的模型。</li></ul><h3 id="1-7-MediaCodec应用在哪里？"><a href="#1-7-MediaCodec应用在哪里？" class="headerlink" title="1.7. MediaCodec应用在哪里？"></a>1.7. <code>MediaCodec</code>应用在哪里？</h3><ul><li><code>MediaCodec</code>用来快速将视频文件解码为图片帧。</li><li>项目支持的输入包括摄像头预览、图片和视频。</li><li>视频的解码最初使用<code>MediaMetadataRetriever</code>，这样有两个主要缺点：软件解码，耗时长；只能使用<code>getFrameAtTime()</code>获取帧，不精确。</li><li><code>MediaCodec</code>是Android提供的硬件解码API，可以快速将视频文件解码为图片帧。</li><li>但<code>MediaCodec</code>存在一个问题：其仅支持处理器芯片支持的帧格式（YUV420中的众多格式），且没有通用支持的格式，即没有设备通用性。</li><li>利用Android API 21的新特性：<code>COLOR_FormatYUV420Flexible</code>的支持，和新的<code>Image</code>类。</li><li>在解码时指定解码格式为<code>COLOR_FormatYUV420Flexible</code>（这个所有设备都支持），解码生成的帧指定为Image类，其可以单独获取YUV各个分量的数据。拼接这些数据即可得到指定YUV420格式的图片帧。实现了设备通用性。</li><li>对1080P的视频，每个图片帧可以在30ms内得到。</li></ul><h3 id="1-8-代码结构"><a href="#1-8-代码结构" class="headerlink" title="1.8. 代码结构"></a>1.8. 代码结构</h3><h4 id="1-8-1-发送方"><a href="#1-8-1-发送方" class="headerlink" title="1.8.1. 发送方"></a>1.8.1. 发送方</h4><ul><li>二维码由Districts、District、Zone组成，其将二维码划分为不同区域（Zone）。每个区域指定其Block的类型，以及二进制数据。由底层处理数据向二维码图片的转换，包括位置、偏移、大小等。</li><li>不同的二维码可能有类似的边框样式或数据内容，通过继承关系组织不同的二维码，如BlackWhiteCode是最基础的二维码，其上可以衍生出ColorCode、ShiftCode等。</li></ul><h4 id="1-8-2-接收方"><a href="#1-8-2-接收方" class="headerlink" title="1.8.2. 接收方"></a>1.8.2. 接收方</h4><ul><li>使用两个线程一个队列，一个线程用来从摄像头／视频文件获取图片帧，并放入队列；另一个线程从队列中取出图片帧，处理图片帧，直到再无图片帧或数据传输完成。</li><li>将图片帧数据封装为RawImage，提供像素值获取、二维码定位等功能。</li><li>RawImage由MediatBarcode封装，MediatBarcode同时提供反透视变换功能，将二维码分割为Districts、District、Zone区域，提供获取区域像素值数据等功能。</li><li>MediateBarcode供不同的二维码使用，这些二维码同样有继承关系，最基本的BlackWhiteCode提供有通用的Zone处理方法，如获取帧编号等。</li><li>StreamDecode提供处理队列中二维码的骨架，其管理二维码间的关联关系，如二维码定位矩阵的保存、帧间冗余算法的纪录。</li></ul><h2 id="2-基于Android、Flask和MySQL的用户情绪和隐私收集系统"><a href="#2-基于Android、Flask和MySQL的用户情绪和隐私收集系统" class="headerlink" title="2. 基于Android、Flask和MySQL的用户情绪和隐私收集系统"></a>2. 基于Android、Flask和MySQL的用户情绪和隐私收集系统</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1. 简介"></a>2.1. 简介</h3><p>APP主要包括两部分，一部分是填写调查问卷，另一部分是在后台持续收集用户隐私信息。调查问卷由用户向服务器请求得到，填写完成后提交给服务器；收集隐私是APP长驻后台，定时抓取用户数据并保存到本地数据库，定时将数据库发送给服务器。</p><h3 id="2-2-收集哪些隐私信息"><a href="#2-2-收集哪些隐私信息" class="headerlink" title="2.2. 收集哪些隐私信息"></a>2.2. 收集哪些隐私信息</h3><p>收集的隐私信息包括录音（持续5秒）、通话记录、短信、联系人信息、地理位置（高德地图API）、手机信息、传感器信息（磁力计、陀螺仪等）、周围wifi、屏幕亮灭、前台运行APP、后台运行APP等。</p><h3 id="2-3-如何长驻后台"><a href="#2-3-如何长驻后台" class="headerlink" title="2.3. 如何长驻后台"></a>2.3. 如何长驻后台</h3><ul><li>服务启动时即拿到PARTIAL_WAKE_LOCK，且不放弃。PARTIAL_WAKE_LOCK在屏幕熄灭的情况下仍保持CPU运行。</li><li>使用第三方云巴推送平台，定时向所有用户推送消息，用来唤醒APP。</li><li>用户配合关闭手机厂商的省电设置等。</li></ul><h3 id="2-4-如何实现用户登录注册"><a href="#2-4-如何实现用户登录注册" class="headerlink" title="2.4. 如何实现用户登录注册"></a>2.4. 如何实现用户登录注册</h3><p>因为是科研项目，并没有实现完整的登录注册功能。只需要填写学号、手机号，服务器后台查询不冲突即注册成功；只需要填写学号，服务器能够查询到相关信息即可登录。</p><h3 id="2-5-问卷内容是什么？"><a href="#2-5-问卷内容是什么？" class="headerlink" title="2.5. 问卷内容是什么？"></a>2.5. 问卷内容是什么？</h3><p>问卷内容我不关系。主要是询问用户是否开心、沮丧等，及其程度。</p><h3 id="2-6-调查问卷如何分发和收集"><a href="#2-6-调查问卷如何分发和收集" class="headerlink" title="2.6. 调查问卷如何分发和收集"></a>2.6. 调查问卷如何分发和收集</h3><ul><li>用户收到APP推送或主动打开APP，点击“填写调查问卷”即向服务器发送请求，服务器判断距离用户上次提交问卷时间间隔有没有达到6小时，若未达到则返回错误提示；若达到则进入分发问卷流程。</li><li>分发问卷时，服务器从数据库中读取题目，并拼装为json格式，同时针对每次分发生成一个唯一的id，用来记录问卷的提交。</li><li>用户填写完问卷点击提交时，同步提交问卷的唯一id；服务器首先验证唯一id是否有效，然后读取客户端发送的json格式回答，解析后保存到数据库中。</li></ul><h3 id="2-7-APP如何定时抓取用户信息"><a href="#2-7-APP如何定时抓取用户信息" class="headerlink" title="2.7. APP如何定时抓取用户信息"></a>2.7. APP如何定时抓取用户信息</h3><p>APP启动同步创建一个Service，Service启动时即实例化一个<code>SingleThreadScheduledExecutor</code>，并设定定时执行周期为一分钟。</p><p>本地数据库中新建一个表，每行纪录需要运行的任务（抓取哪些信息、心跳、上传数据库、清理数据库、切换新数据库）、执行间隔时间、下次运行时间。每当定时周期达到时，就查询数据库，一旦某个任务的下次运行时间小于当前时间，则执行任务，并根据执行间隔时间确定下次运行时间。</p><h3 id="2-8-如何上传用户数据"><a href="#2-8-如何上传用户数据" class="headerlink" title="2.8. 如何上传用户数据"></a>2.8. 如何上传用户数据</h3><p>当执行上传用户数据任务时，则从数据库中读取还未上传的数据库的名字，并逐个通过HTTP POST请求发送本地压缩后的数据库，并在本地数据库中标记此数据库已上传。</p><h3 id="2-9-APP崩溃如何分析恢复"><a href="#2-9-APP崩溃如何分析恢复" class="headerlink" title="2.9. APP崩溃如何分析恢复"></a>2.9. APP崩溃如何分析恢复</h3><p>使用第三方库ACRA进行崩溃信息的收集和上报。</p><p>当APP崩溃后，下次运行时对于不完整或异常的任务在撤销后重新执行并写数据库，保证数据库数据的一致性。</p><h3 id="2-10-后台提供哪些统计和管理"><a href="#2-10-后台提供哪些统计和管理" class="headerlink" title="2.10. 后台提供哪些统计和管理"></a>2.10. 后台提供哪些统计和管理</h3><ul><li>后台展示每个用户的心跳历史、问卷填写历史、上传用户数据时间等。</li><li>可以从后台向特定用户发送推送通知，可以针对不同用户指定不同的APP版本。</li></ul><h3 id="2-11-用到哪些第三方库"><a href="#2-11-用到哪些第三方库" class="headerlink" title="2.11. 用到哪些第三方库"></a>2.11. 用到哪些第三方库</h3><p>Android上的HTTP通信部分使用了okhttp。</p><h3 id="2-12-后台是如何搭建的"><a href="#2-12-后台是如何搭建的" class="headerlink" title="2.12. 后台是如何搭建的"></a>2.12. 后台是如何搭建的</h3><p>后台是基于Python和flask的，flask提供了一套http的处理框架，只需要注册对应的url即可。对于数据的持久存储等则是利用到了MySQL。</p><h3 id="2-13-遇到过哪些问题"><a href="#2-13-遇到过哪些问题" class="headerlink" title="2.13. 遇到过哪些问题"></a>2.13. 遇到过哪些问题</h3><ul><li>APP经常退出前台即被杀死。最初考虑一般的保活方法，如使用AlarmManager，发现用处不大。后来才发现是国内厂商动了手脚，非白名单的APP一律不允许后台运行。所以后来除在技术上尽可能保证APP不被杀死外，还建议用户在手机的设置中将APP加入到白名单。</li><li>经常在抓取用户数据时crash。最初以为是本身代码有问题，一番排查后才发现国内厂商在权限管理上动了手脚。按照官方文档，如果执行某些代码时用户未授权则会返回null值或抛出异常，但国内厂商直接在framework层进行了修改，不知道在哪会去检查权限，一旦未授权则直接抛出异常，导致APP crash。最后不得已对一些敏感信息收集时使用大段的try catch，避免未知的crash。</li></ul>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Web服务器性能压力测试工具</title>
      <link href="/2018/12/25/web-test/"/>
      <url>/2018/12/25/web-test/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E6%B5%8B%E8%AF%95">- 测试</a></li><li><a href="#%E7%9B%AE%E5%BD%95">目录</a><ul><li><a href="#httpload">http_load</a></li><li><a href="#webbench">webbench</a></li><li><a href="#ab">ab</a></li><li><a href="#siege">siege</a></li></ul></li></ul><h3 id="http-load"><a href="#http-load" class="headerlink" title="http_load"></a>http_load</h3><p>程序非常小，解压后也不到100K<br>http_load以并行复用的方式运行，用以测试web服务器的吞吐量与负载。<br>但是它不同于大多数压力测试工具，它可以以一个单一的进程运行，一般不会把客户机搞死。<br>还可以测试HTTPS类的网站请求。<br>下载地址：<a href="http://acme.com/software/http_load/http_load-12mar2006.tar.gz" target="_blank" rel="noopener">http_load-12mar2006.tar.gz</a></p><blockquote><p>安装很简单</p></blockquote><pre class=" language-sh"><code class="language-sh">tar zxvf http_load-12mar2006.tar.gzcd http_load-12mar2006make && make install</code></pre><blockquote><p>基本用法：</p></blockquote><pre class=" language-sh"><code class="language-sh">http_load  -p 并发访问进程数  -s 访问时间  需要访问的URL文件</code></pre><p>参数其实可以自由组合，参数之间的选择并没有什么限制。<br>比如你写成 <code>http_load  -parallel  5  -seconds  300  urllist.txt</code> 也是可以的。<br>我们把参数给大家简单说明一下。<br><code>-parallel</code>   简写-p ：含义是并发的用户进程数。<br><code>-fetches</code>   简写-f ：含义是总计的访问次数<br><code>-rate</code>    简写-p ：含义是每秒的访问频率<br><code>-seconds</code> 简写-s ：含义是总计的访问时间</p><p>准备URL文件：<code>urllist.txt</code>，文件格式是每行一个URL，URL最好超过50－100个测试效果比较好。</p><blockquote><p>文件格式如下：</p></blockquote><pre class=" language-sh"><code class="language-sh">http://www.domain.com/http://www.domain.com/blog/http://www.domain.com/signin/http://www.domain.com/signup/http://www.domain.com/article/1.htmlhttp://www.domain.com/article/2.htmlhttp://www.domain.com/article/3.htmlhttp://www.domain.com/article/4.htmlhttp://www.domain.com/article/5.htmlhttp://www.domain.com/article/6.htmlhttp://www.domain.com/article/7.html</code></pre><blockquote><p>例如：</p></blockquote><pre class=" language-sh"><code class="language-sh">http_load -p 30 -s 60  urllist.txt</code></pre><p>参数了解了，我们来看运行一条命令来看看它的返回结果如下：</p><p><img src="http://i.imgur.com/ZT37WJg.png" alt=""></p><blockquote><p>结果分析：</p></blockquote><ol><li>294 fetches, 30 max parallel, 3.83835e+06 bytes, in 60.0026 seconds<br>说明在上面的测试中运行了294个请求，最大的并发进程数是30，总计传输的数据是3.83835e+06bytes，运行的时间是60.0026秒</li><li>13055.6 mean bytes/connection<br>说明每一连接平均传输的数据量3.83835e+06/294=13055.6</li><li>4.89979 fetches/sec, 63969.7 bytes/sec<br>说明每秒的响应请求为4.89979，每秒传递的数据为63969.7 bytes/sec</li><li>msecs/connect: 312.009 mean, 1319.57 max, 209.994 min<br>说明每连接的平均响应时间是312.009 msecs，最大的响应时间1319.57 msecs，最小的响应时间209.994 msecs</li><li>msecs/first-response: 1191.01 mean, 10212.4 max, 220.78 min</li><li>HTTP response codes:<br> code 200  –  127<br> code 502  –  166<br>说明打开响应页面的类型<br>如果403的类型过多，那可能要注意是否系统遇到了瓶颈。</li></ol><p><strong>特殊说明：</strong></p><p>测试结果中主要的指标是 <code>fetches/sec</code>、<code>msecs/connect</code> 这个选项，即服务器每秒能够响应的查询次数。<br>用这个指标来衡量性能。似乎比apache的ab准确率要高一些，也更有说服力一些。<br><code>Qpt</code>-每秒响应用户数和response time，每连接响应用户时间。<br>测试的结果主要也是看这两个值。<br>当然仅有这两个指标并不能完成对性能的分析，我们还需要对服务器的<code>cpu</code>、<code>men</code>进行分析，才能得出结论。</p><h3 id="webbench"><a href="#webbench" class="headerlink" title="webbench"></a>webbench</h3><p>webbench是Linux下的一个网站压力测试工具，最多可以模拟3万个并发连接去测试网站的负载能力。<br>下载地址可以到google搜，我这里给出一个<br>下载地址：<a href="http://soft.vpser.net/test/webbench/webbench-1.5.tar.gz" target="_blank" rel="noopener">http://soft.vpser.net/test/webbench/webbench-1.5.tar.gz</a><br>这个程序更小，解压后不到50K，呵呵<br>安装非常简单</p><pre class=" language-sh"><code class="language-sh">tar zxvf webbench-1.5.tar.gzcd webbench-1.5make && make install</code></pre><p>会在当前目录生成webbench可执行文件，直接可以使用了<br>用法：webbench -c 并发数 -t 运行测试时间 URL</p><blockquote><p>例如：</p></blockquote><pre class=" language-sh"><code class="language-sh">webbench -c 1000 -t 130 http://www.baidu.com</code></pre><h3 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h3><p>ab是apache自带的一款功能强大的测试工具。<br>安装了apache一般就自带了。<br>用法可以查看它的说明</p><pre class=" language-sh"><code class="language-sh">./ab</code></pre><p><img src="http://i.imgur.com/Zgtcmug.png" alt=""></p><p>参数众多，一般我们用到的是 <code>-n</code> 和 <code>-c</code></p><p>例如：</p><pre class=" language-sh"><code class="language-sh">webbench -c 1000 -t 130 http://www.baidu.com/index.php</code></pre><p>这个表示同时处理1000个请求并运行130次index.php文件。</p><h3 id="siege"><a href="#siege" class="headerlink" title="siege"></a>siege</h3><p>一款开源的压力测试工具，可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。<br>Siege官方：<a href="http://www.joedog.org/" target="_blank" rel="noopener">http://www.joedog.org/</a><br>Siege下载：<a href="http://www.joedog.org/pub/siege/siege-latest.tar.gz" target="_blank" rel="noopener">http://www.joedog.org/pub/siege/siege-latest.tar.gz</a><br>Siege解压并安装：</p><pre class=" language-sh"><code class="language-sh">tar -zxvf siege-latest.tar.gzcd siege-latest/./configuremakemake install</code></pre><blockquote><p>Siege使用:</p></blockquote><pre class=" language-sh"><code class="language-sh">siege -c 100 -r 10 -f site.url</code></pre><p>-c是并发量，-r是重复次数。<br>url文件就是一个文本，每行都是一个url，它会从里面随机访问的。<br>site.url内容:</p><pre class=" language-sh"><code class="language-sh">http://www.qixing318.com/http://www.zendsns.com/http://www.qixing.info/</code></pre><p>测试结果:</p><p><img src="http://i.imgur.com/eVMBVRe.png" alt=""></p><p>结果说明：</p><pre class=" language-sh"><code class="language-sh">Transactions: 550 hits //完成550次处理Availability: 55.00 % //55.00 % 成功率Elapsed time: 31.32 secs //总共用时Data transferred: 1.15 MB //共数据传输1.15 MBResponse time: 3.04 secs //显示网络连接的速度Transaction rate: 17.56 trans/sec //均每秒完成 17.56 次处理：表示服务器后Throughput: 0.04 MB/sec //平均每秒传送数据Concurrency: 53.44 //实际最高并发数Successful transactions: 433 //成功处理次数Failed transactions: 450 //失败处理次数Longest transaction: 15.50 //每次传输所花最长时间Shortest transaction: 0.42 //每次传输所花最短时间</code></pre>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP请求报文解剖</title>
      <link href="/2018/12/25/request-message/"/>
      <url>/2018/12/25/request-message/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP请求报文解剖"><a href="#HTTP请求报文解剖" class="headerlink" title="HTTP请求报文解剖"></a>HTTP请求报文解剖</h2><p>HTTP请求报文由3部分组成<strong>（请求行+请求头+请求体）</strong>： </p><p><img src="http://i.imgur.com/oIPQIoF.png" alt=""></p><p>下面是一个实际的请求报文： </p><p><img src="http://i.imgur.com/myBqd6H.jpg" alt=""></p><p>① 是请求方法，GET和POST是最常见的HTTP方法，除此以外还包括DELETE、HEAD、OPTIONS、PUT、TRACE。不过，当前的大多数浏览器只支持GET和POST，Spring 3.0提供了一个HiddenHttpMethodFilter，允许你通过“_method”的表单参数指定这些特殊的HTTP方法（实际上还是通过POST提交表单）。服务端配置了HiddenHttpMethodFilter后，Spring会根据_method参数指定的值模拟出相应的HTTP方法，这样，就可以使用这些HTTP方法对处理方法进行映射了。 </p><p>② 为请求对应的URL地址，它和报文头的Host属性组成完整的请求URL，③是协议名称及版本号。 </p><p>④ 是HTTP的报文头，报文头包含若干个属性，格式为“属性名:属性值”，服务端据此获取客户端的信息。 </p><p>⑤ 是报文体，它将一个页面表单中的组件值通过param1=value1&amp;param2=value2的键值对形式编码成一个格式化串，它承载多个请求参数的数据。不但报文体可以传递请求参数，请求URL也可以通过类似于“/chapter15/user.html? param1=value1&amp;param2=value2”的方式传递请求参数。 </p><p>对照上面的请求报文，我们把它进一步分解，你可以看到一幅更详细的结构图： </p><p><img src="http://i.imgur.com/9D9mqxi.png" alt=""></p><blockquote><p>1.IE系<br>HttpWatch是强大的网页数据分析工具，安装后将集成到Internet Explorer工具栏中。它不用代理服务器或一些复杂的网络监控工具，就能抓取请求及响应的完整信息，包括Cookies、消息头、查询参数、响应报文等，是Web应用开发人员的必备工具。<br> 2.Chrome,firefox<br>   自身的调试器已经很好用了，按F12就可以看到(IE10以上也直接按F12就可以调试了) </p></blockquote><h2 id="HTTP请求报文头属性"><a href="#HTTP请求报文头属性" class="headerlink" title="HTTP请求报文头属性"></a>HTTP请求报文头属性</h2><p>报文头属性是什么东西呢？我们不妨以一个小故事来说明吧。 </p><blockquote><p>快到中午了，张三丰不想去食堂吃饭，于是打电话叫外卖：老板，我要一份[鱼香肉丝]，要12：30之前给我送过来哦，我在江湖湖公司研发部，叫张三丰。</p></blockquote><p>这里，你要 <code>[鱼香肉丝]</code> 相当于HTTP报文体，而 <code>“12：30之前送过来”</code>，你叫 <code>“张三丰”</code> 等信息就相当于HTTP的报文头。它们是一些附属信息，帮忙你和饭店老板顺利完成这次交易。 </p><p>请求HTTP报文和响应HTTP报文都拥有若干个报文关属性，它们是为协助客户端及服务端交易的一些附属信息。 </p><h3 id="常见的HTTP请求报文头属性"><a href="#常见的HTTP请求报文头属性" class="headerlink" title="常见的HTTP请求报文头属性"></a>常见的HTTP请求报文头属性</h3><p><strong>Accept </strong></p><p>请求报文可通过一个 <code>Accept</code> 报文头属性告诉服务端 客户端接受什么类型的响应。 </p><p>如下报文头相当于告诉服务端，俺客户端能够接受的响应类型仅为纯文本数据啊，你丫别发其它什么图片啊，视频啊过来，那样我会歇菜的~~~： </p><pre class=" language-sh"><code class="language-sh">Accept:text/plain</code></pre><p>Accept属性的值可以为一个或多个MIME类型的值，关于MIME类型，大家请参考：<a href="http://en.wikipedia.org/wiki/MIME_type" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/MIME_type</a></p><p><strong>Cookie</strong></p><p>这是第一个要说的，客户端的Cookie就是通过这个报文头属性传给服务端的哦！如下所示： </p><pre class=" language-sh"><code class="language-sh">Cookie:skin=blue; jsessionid=5F4771183629C9834F8382E23BE13C4C</code></pre><p>注意到后台的那个 <code>jsessionid=5F4771183629C9834F8382E23BE13C4C</code> 没有，<br>服务端是怎么知道客户端的多个请求是属于一个Session的，原来就是通过HTTP请求报文头的Cookie属性的jsessionid的值关联起来的！（当然也可以通过重写URL的方式将会话ID附带在每个URL的后后面哦）。</p><p><strong>Referer</strong></p><p>表示这个请求是从哪个URL过来的，假如你通过google搜索出一个商家的广告页面，你对这个广告页面感兴趣，鼠标一点发送一个请求报文到商家的网站，这个请求报文的Referer报文头属性值就是 <a href="http://www.google.com。" target="_blank" rel="noopener">http://www.google.com。</a> </p><p>很多貌似神奇的网页监控软件（如著名的 <a href="http://www.51.la/" target="_blank" rel="noopener">我要啦</a>），只要在你的网页上放上一段JavaScript，就可以帮你监控流量，全国访问客户的分布情况等报表和图表，其原理就是通过这个Referer及其它一些HTTP报文头工作的。</p><p><strong>Cache-Control</strong></p><p>对缓存进行控制，如一个请求希望响应返回的内容在客户端要被缓存一年，或不希望被缓存就可以通过这个报文头达到目的。 </p><p>如以下设置，相当于让服务端将对应请求返回的响应内容不要在客户端缓存（当然响应报文也是通过响应报文头通知浏览器客户端的，这个下面再说）： </p><pre class=" language-sh"><code class="language-sh">Cache-Control: no-cache</code></pre><h3 id="其它报文头属性"><a href="#其它报文头属性" class="headerlink" title="其它报文头属性"></a>其它报文头属性</h3><p>参见：<a href="http://en.wikipedia.org/wiki/List_of_HTTP_header_fields" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/List_of_HTTP_header_fields</a></p><h3 id="如何访问请求报文头"><a href="#如何访问请求报文头" class="headerlink" title="如何访问请求报文头"></a>如何访问请求报文头</h3><p>由于请求报文头是客户端发过来的，服务端当然只能读取了，以下是 <code>HttpServletRequest</code> 一些用于读取请求报文头的API：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取请求报文中的属性名称</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Enumeration<span class="token operator">&lt;</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token operator">></span>    <span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取指定名称的报文头属性的值</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String <span class="token function">getHeader</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String name<span class="token punctuation">)</span> </code></pre><p>由于一些请求报文头属性“太著名”了，因此HttpServletRequest为它们提供了VIP的API： </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取报文头中的Cookie(读取Cookie的报文头属性）</span> Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取客户端本地化信息（读取 Accept-Language 的报文头属性）</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale    <span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获取请求报文体的长度（读取Content-Length的报文头属性）</span><span class="token keyword">int</span> <span class="token function">getContentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>HttpServletRequest可以通过 <code>HttpSession getSession()</code></p><p>获取请求所关联的HttpSession,其内部的机理是通过读取请求报文头中Cookie属性的JSESSIONID的值，在服务端的一个会话Map中，根据这个JSESSIONID获取对应的HttpSession的对象。<br>（这样，你就不会觉得HttpSession很神秘了吧，你自己也可以做一个类似的会话管理）</p><h2 id="HTTP响应报文解剖"><a href="#HTTP响应报文解剖" class="headerlink" title="HTTP响应报文解剖"></a>HTTP响应报文解剖</h2><h3 id="响应报文结构"><a href="#响应报文结构" class="headerlink" title="响应报文结构"></a>响应报文结构</h3><p>HTTP的响应报文也由三部分组成<strong>（响应行+响应头+响应体</strong>）： </p><p><img src="http://i.imgur.com/qW0r8iY.png" alt=""></p><p>以下是一个实际的HTTP响应报文： </p><p><img src="http://i.imgur.com/jR36KBb.jpg" alt=""></p><p>① 报文协议及版本；<br>② 状态码及状态描述；<br>③ 响应报文头，也是由多个属性组成；<br>④ 响应报文体，即我们真正要的“干货”。 </p><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><p>和请求报文相比，响应报文多了一个“响应状态码”，它以“清晰明确”的语言告诉客户端本次请求的处理结果。 </p><p>HTTP的响应状态码由5段组成： </p><ul><li>1xx 消息，一般是告诉客户端，请求已经收到了，正在处理，别急…</li><li>2xx 处理成功，一般表示：请求收悉、我明白你要的、请求已受理、已经处理完成等信息.</li><li>3xx 重定向到其它地方。它让客户端再发起一个请求以完成整个处理。</li><li>4xx 处理发生错误，责任在客户端，如客户端的请求一个不存在的资源，客户端未被授权，禁止访问等。</li><li>5xx 处理发生，责任在服务端，如服务端抛出异常，路由出错，HTTP版本不支持等。</li></ul><p>以下是几个常见的状态码： </p><p><strong>200 OK</strong></p><p>你最希望看到的，即处理成功！ </p><p><strong>303 See Other</strong></p><p>我把你redirect到其它的页面，目标的URL通过响应报文头的Location告诉你。 </p><blockquote><p>悟空：师傅给个桃吧，走了一天了 :relieved:<br>唐僧：我哪有桃啊！去王母娘娘那找吧 :unamused:</p></blockquote><p><strong>304 Not Modified</strong></p><p>告诉客户端，你请求的这个资源至你上次取得后，并没有更改，你直接用你本地的缓存吧，我很忙哦，你能不能少来烦我啊！ </p><p><strong>404 Not Found</strong></p><p>你最不希望看到的，即找不到页面。如你在google上找到一个页面，点击这个链接返回404，表示这个页面已经被网站删除了，google那边的记录只是美好的回忆。 </p><p><strong>500 Internal Server Error</strong></p><p>看到这个错误，你就应该查查服务端的日志了，肯定抛出了一堆异常，别睡了，起来改BUG去吧！ </p><p>有些响应码，Web应用服务器会自动给生成。你可以通过HttpServletResponse的API设置状态码： </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置状态码，状态码在HttpServletResponse中通过一系列的常量预定义了，如SC_ACCEPTED，SC_OK</span><span class="token keyword">void</span>    <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> sc<span class="token punctuation">)</span> </code></pre><h3 id="常见的HTTP响应报文头属性"><a href="#常见的HTTP响应报文头属性" class="headerlink" title="常见的HTTP响应报文头属性"></a>常见的HTTP响应报文头属性</h3><p><strong>Cache-Control</strong></p><p>响应输出到客户端后，服务端通过该报文头属告诉客户端如何控制响应内容的缓存。 </p><p>下面，的设置让客户端对响应内容缓存3600秒，也即在3600秒内，如果客户再次访问该资源，直接从客户端的缓存中返回内容给客户，不要再从服务端获取（当然，这个功能是靠客户端实现的，服务端只是通过这个属性提示客户端“应该这么做”，做不做，还是决定于客户端，如果是自己宣称支持HTTP的客户端，则就应该这样实现）。 </p><pre class=" language-sh"><code class="language-sh">Cache-Control: max-age=3600</code></pre><p><strong>ETag</strong></p><p>一个代表响应服务端资源（如页面）版本的报文头属性，如果某个服务端资源发生变化了，这个ETag就会相应发生变化。它是Cache-Control的有益补充，可以让客户端“更智能”地处理什么时候要从服务端取资源，什么时候可以直接从缓存中返回响应。</p><p>关于ETag的说明，你可以参见：<a href="http://en.wikipedia.org/wiki/HTTP_ETag" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/HTTP_ETag</a>。<br>Spring 3.0还专门为此提供了一个 <code>org.springframework.web.filter.ShallowEtagHeaderFilter</code> （实现原理很简单，对JSP输出的内容MD5，这样内容有变化ETag就相应变化了），用于生成响应的ETag，因为这东东确实可以帮助减少请求和响应的交互。 </p><p>下面是一个ETag： </p><pre class=" language-sh"><code class="language-sh">ETag: "737060cd8c284d8af7ad3082f209582d"</code></pre><p><strong>Location</strong></p><p>我们在JSP中让页面Redirect到一个某个A页面中，其实是让客户端再发一个请求到A页面，这个需要Redirect的A页面的URL，其实就是通过响应报文头的Location属性告知客户端的，如下的报文头属性，将使客户端redirect到iteye的首页中： </p><pre class=" language-sh"><code class="language-sh">Location: https://github.com/biezhi/jb</code></pre><p><strong>Set-Cookie</strong></p><p>服务端可以设置客户端的Cookie，其原理就是通过这个响应报文头属性实现的：</p><pre class=" language-sh"><code class="language-sh">Set-Cookie: UserID=Jack; Max-Age=3600; Version=1</code></pre><h3 id="其它HTTP请求报文头属性"><a href="#其它HTTP请求报文头属性" class="headerlink" title="其它HTTP请求报文头属性"></a>其它HTTP请求报文头属性</h3><p>更多其它的HTTP请求头报文，参见：<a href="http://en.wikipedia.org/wiki/List_of_HTTP_header_fields" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/List_of_HTTP_header_fields</a></p><h3 id="如何写HTTP请求报文头"><a href="#如何写HTTP请求报文头" class="headerlink" title="如何写HTTP请求报文头"></a>如何写HTTP请求报文头</h3><p>在服务端可以通过HttpServletResponse的API写响应报文头的属性：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//添加一个响应报文头属性</span><span class="token keyword">void</span>    <span class="token function">setHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> </code></pre><p>像Cookie，Location这些响应头是有福之人，HttpServletResponse为它们都提供了VIP（非API 哈）： </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//添加Cookie报文头属性</span><span class="token keyword">void</span> <span class="token function">addCookie</span><span class="token punctuation">(</span>Cookie cookie<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//不但会设置Location的响应报文头，还会生成303的状态码呢，两者天仙配呢</span><span class="token keyword">void</span>    <span class="token function">sendRedirect</span><span class="token punctuation">(</span>String location<span class="token punctuation">)</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之单例模式剖析</title>
      <link href="/2018/12/25/singleton/"/>
      <url>/2018/12/25/singleton/</url>
      
        <content type="html"><![CDATA[<h1 id="如何正确地写出单例模式"><a href="#如何正确地写出单例模式" class="headerlink" title="如何正确地写出单例模式"></a>如何正确地写出单例模式</h1><p>单例模式算是设计模式中最容易理解，也是最容易手写代码的模式了吧。但是其中的坑却不少，所以也常作为面试题来考。本文主要对几种单例写法的整理，并分析其优缺点。很多都是一些老生常谈的问题，但如果你不知道如何创建一个线程安全的单例，不知道什么是双检锁，那这篇文章可能会帮助到你。</p><h3 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h3><p>当被问到要实现一个单例模式时，很多人的第一反应是写出如下的代码，包括教科书上也是这样教我们的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段代码简单明了，而且使用了懒加载模式，但是却存在致命的问题。当有多个线程并行调用 getInstance() 的时候，就会创建多个实例。也就是说在多线程下不能正常工作。</p><h3 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h3><p>为了解决上面的问题，最简单的方法是将整个 getInstance() 方法设为同步（synchronized）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。这就引出了双重检验锁。</p><h3 id="双重检验锁"><a href="#双重检验锁" class="headerlink" title="双重检验锁"></a>双重检验锁</h3><p>双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查 <code>instance == null</code>，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment" spellcheck="true">//Single Checked</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">//Double Checked</span>                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> instance <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这段代码看起来很完美，很可惜，它是有问题。主要在于instance = new Singleton()这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p><ol><li>给 instance 分配内存</li><li>调用 Singleton 的构造函数来初始化成员变量</li><li>将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）</li></ol><p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。</p><p>我们只需要将 instance 变量声明成 volatile 就可以了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//声明成 volatile</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                     <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                           instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p><p>但是特别注意在 Java 5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 volatile。</p><p>相信你不会喜欢这种复杂又隐含问题的方式，当然我们有更好的实现线程安全的单例模式的办法。</p><h3 id="饿汉式-static-final-field"><a href="#饿汉式-static-final-field" class="headerlink" title="饿汉式 static final field"></a>饿汉式 static final field</h3><p>这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//类加载时就初始化</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这种写法如果完美的话，就没必要在啰嗦那么多双检锁的问题了。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</p><h3 id="静态内部类-static-nested-class"><a href="#静态内部类-static-nested-class" class="headerlink" title="静态内部类 static nested class"></a>静态内部类 static nested class</h3><p>我比较倾向于使用静态内部类的方法，这种方法也是《Effective Java》上所推荐的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>          <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>这种写法仍然使用JVM本身机制保证了线程安全问题；由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</p><h3 id="枚举-Enum"><a href="#枚举-Enum" class="headerlink" title="枚举 Enum"></a>枚举 Enum</h3><p>用枚举写单例实在太简单了！这也是它最大的优点。下面这段代码就是声明枚举实例的通常做法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> EasySingleton<span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。但是还是很少看到有人这样写，可能是因为不太熟悉吧。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般来说，单例模式有五种写法：懒汉、饿汉、双重检验锁、静态内部类、枚举。上述所说都是线程安全的实现，文章开头给出的第一种方法不算正确的写法。</p><p>就我个人而言，一般情况下直接使用饿汉式就好了，如果明确要求要懒加载（lazy initialization）会倾向于使用静态内部类，如果涉及到反序列化创建对象时会试着使用枚举的方式来实现单例。</p><h3 id="Read-More"><a href="#Read-More" class="headerlink" title="Read More"></a>Read More</h3><ul><li><a href="http://javarevisited.blogspot.sg/2014/05/double-checked-locking-on-singleton-in-java.html" target="_blank" rel="noopener">Double Checked Locking on Singleton Class in Java</a></li><li><a href="http://javarevisited.blogspot.sg/2012/07/why-enum-singleton-are-better-in-java.html" target="_blank" rel="noopener">http://javarevisited.blogspot.sg/2012/07/why-enum-singleton-are-better-in-java.html</a></li><li><a href="http://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html" target="_blank" rel="noopener">How to create thread safe Singleton in Java</a></li><li><a href="http://javarevisited.blogspot.com/2011/03/10-interview-questions-on-singleton.html" target="_blank" rel="noopener">10 Singleton Pattern Interview questions in Java</a></li></ul><p>由于作者这篇文章写的非常好，我也就没有重写 <a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/#from=biezhi.me" target="_blank" rel="noopener">原文出处</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之策略模式剖析</title>
      <link href="/2018/12/25/strategy/"/>
      <url>/2018/12/25/strategy/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是策略模式"><a href="#什么是策略模式" class="headerlink" title="什么是策略模式"></a>什么是策略模式</h1><ul><li><a href="#策略模式">策略模式</a><ul><li><a href="#策略模式的定义">一、策略模式的定义</a></li><li><a href="#策略模式的实际应用">二、策略模式的实际应用</a></li><li><a href="#策略模式中的设计原则">三、策略模式中的设计原则</a></li></ul></li></ul><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="策略模式的定义"><a href="#策略模式的定义" class="headerlink" title="策略模式的定义"></a>策略模式的定义</h3><p><strong>策略模式</strong>，顾名思义就是指对象具有某个行为，但是在不同的业务场景下，这个行为应该有不同的表现形式，也就是有了不同的策略。让对象能再不同的场景下对同一行为有不同的实现，这就是策略模式。</p><p>下面是策略模式的类图： </p><p><img src="http://i.imgur.com/PE99rte.jpg" alt=""></p><ol><li>首先定义一个策略接口：<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">algorithmStartegy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>定义两个具体的策略类：<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcentrateStrategy_1</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span><span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">algorithmStartegy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am algorithm strategy 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcentrateStrategy_2</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span><span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">algorithmStartegy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am algorithm strategy 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>定义一个算法使用场景<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Situation</span> <span class="token punctuation">{</span> Strategy strategy<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token function">Situation</span><span class="token punctuation">(</span>Strategy strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     strategy<span class="token punctuation">.</span><span class="token function">algorithmStartegy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>客户端调用<pre class=" language-java"><code class="language-java">Situation situation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Situation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcentrateStrategy_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>situation<span class="token punctuation">.</span><span class="token function">handleAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li></ol><p>从策略模式的描述以及类图来看真的是非常简单，总结起来就是策略模式定义了一组算法，它们有一个共同的<strong>策略行为接口</strong>，并且这些算法之间可以<strong>互相替换</strong>，使算法可以根据场景的不同而改变。</p><h3 id="策略模式的实际应用"><a href="#策略模式的实际应用" class="headerlink" title="策略模式的实际应用"></a>策略模式的实际应用</h3><p>策略模式的应用有很多， 比如说JDK中<code>FilenameFilter</code>的使用过程， 比如场景<code>java.util.Collections.sort(List&lt;T&gt;list, Comparator&lt;? super T&gt;c)</code>与策略<code>java.util.Comparator</code>的使用等等。<br>下面我以一个实际的业务场景来具体实现以下策略模式：</p><ol><li>背景： 中国银行的便民服务包括中国移动手机充值， 中国联通，中国电信。用户选择某个便民服务时， 服务器后台会向银行发送不同的业务XML报文， 已达到通信目的。</li><li><p>实现</p><ol><li>定义策略接口 : 包含一个生成报文的方法<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IProduct</span> <span class="token punctuation">{</span><span class="token keyword">public</span> String <span class="token function">generateXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>定义一组具体策略类：<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@XMLType</span><span class="token punctuation">(</span><span class="token string">"Default"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DefaultHead</span> <span class="token keyword">implements</span> <span class="token class-name">IProduct</span> <span class="token punctuation">{</span><span class="token keyword">public</span> String <span class="token function">generateXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"Defalut XML"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@XMLType</span><span class="token punctuation">(</span><span class="token string">"ChinaMobile"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ChinaMobile</span> <span class="token keyword">implements</span> <span class="token class-name">IProduct</span><span class="token punctuation">{</span><span class="token keyword">public</span> String <span class="token function">generateXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"China Mobile XML"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@XMLType</span><span class="token punctuation">(</span><span class="token string">"ChinaUnicom"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ChinaUnicom</span> <span class="token keyword">implements</span> <span class="token class-name">IProduct</span> <span class="token punctuation">{</span><span class="token keyword">public</span> String <span class="token function">generateXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"Chinal Unicom XML"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>定义一个场景类用于生成XML报文<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLGenerator</span> <span class="token punctuation">{</span><span class="token keyword">private</span> IProduct product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据用户缴费类型，生成不同的通信报文</span><span class="token keyword">public</span> String <span class="token function">generate</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//注意此处</span> product <span class="token operator">=</span> ProductFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> product<span class="token punctuation">.</span><span class="token function">generateXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>创建具体的策略类， 本来是可以用一系列的<code>if else</code>判断， 然后new相应的策略类。这里为了避免<code>if else</code>我们定义一个策略工厂，来生产具体的策略类。<br><strong>策略类工厂</strong>：这个工厂创建策略类的思路就是，载入一些列策略类，根据不同策略类的<strong>自定义注解</strong>和用户的传入参数来生成具体的策略类。<br><code>`</code>java<br>public class ProductFactory {<br>// singleton<br>private ProductFactory() {}</p><p>public static ProductFactory getInstance() {<br> return ProductFactoryInstance.instance;<br>}</p><p>private static class ProductFactoryInstance {<br> static final ProductFactory instance = new ProductFactory();<br>}</p><p>//创建一个具体的策略类<br>public IProduct createProduct(String productType) throws URISyntaxException {<br> // load all startegys<br> List&lt;Class&lt;? extends IProduct&gt;&gt; startegyList = loadAllStrategy(“com.su.startegy”);<br> //遍历所有策略类， 根据条件找出需要用到的<br> for(Class&lt;? extends IProduct&gt; clazz : startegyList) {</p><pre><code> //解析策略类的注解 XMLType xmlType = praseAnnotation(clazz); if(xmlType.value().equals(productType))     try {         return clazz.newInstance();     } catch (InstantiationException | IllegalAccessException e)  {         e.printStackTrace();     } }</code></pre><p> }<br> //create IProduct Object failed<br> return null;<br>}</p><p>//载入策略类方法<br>private List&lt;Class&lt;? extends IProduct&gt;&gt; loadAllStrategy(String packageName) throws URISyntaxException {<br> //定义一个策略类的列表<br> List&lt;Class&lt;? extends IProduct&gt;&gt; strategyList = new ArrayList&lt;Class&lt;? extends IProduct&gt;&gt;();<br> URI filePath = getClass().getClassLoader().getResource(packageName.replace(“.”, “/“)).toURI();<br> //获取filepath<br> File[] files = new File(filePath).listFiles(new FilenameFilter() {</p><pre><code> @Override public boolean accept(File dir, String name) {     if (name.endsWith(&quot;.class&quot;))         return true;     return false; }</code></pre><p> });<br> // load class<br> for (File file : files) {</p><pre><code> try {     Class clazz = getClass().getClassLoader().loadClass(packageName + &quot;.&quot; + file.getName().replace(&quot;.class&quot;, &quot;&quot;));     if (clazz != IProduct.class &amp;&amp; IProduct.class.isAssignableFrom(clazz)) {         strategyList.add(clazz);     } } catch (ClassNotFoundException e) {     e.printStackTrace(); }</code></pre><p> }<br> return strategyList;<br>}</p><p>//解析注解方法<br>private XMLType praseAnnotation(Class&lt;? extends IProduct&gt; clazz) {<br> XMLType xmlType = clazz.getAnnotation(XMLType.class);<br> if (xmlType == null) {</p><pre><code> return null;</code></pre><p> }<br> return xmlType;<br>}</p></li></ol></li></ol><p>}</p><pre><code>此处我使用**注解**的原因是为了简单， 跟代码的耦合紧一点。**自定义的注解类： **```java@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)public @interface XMLType {    public String value() default &quot;defalut&quot;;}</code></pre><p>以上就是此处的策略模式的设计过程，如果需要多种策略的叠加， 也就要相应的使用注解的嵌套了， 这里就不在发挥了。</p><h3 id="策略模式中的设计原则"><a href="#策略模式中的设计原则" class="headerlink" title="策略模式中的设计原则"></a>策略模式中的设计原则</h3><p>学习策略模式， 不要记住代码是怎么实现的，更重要的是记住其设计原则。根据原则写代码， 而不是生搬硬套。其实设计模式都是设计原则的体现， 如果理解了设计原则， 那么你写的代码也可以变成一种模式。</p><ol><li><p><strong>开闭原则（Open-Closed Principle，缩写为OCP）</strong><br>一个软件实体应当对扩展(例如对抽象层的扩展)开放，对修改(例如对抽象层的修改)关闭。即在设计一个模块的时候，应当使这个模块可以在不被修改的前提下被扩展。<br>开闭原则的关键，在于抽象。策略模式，是开闭原则的一个极好的应用范例。</p></li><li><p><strong>里氏替换原则（Liskov Substitution Principle，缩写为LSP）</strong><br>一个软件实体如果使用的是一个基类的话，那么一定适用于其子类，而且它根本不能察觉到基类对象和子类对象的区别。比如，假设有两个类，一个是Base类，一个是Derived类，并且Derived类是Base类的子类。那么一个方法如果可以接受一个基类对象b的话：method1(Base b)，那么它必然可以接受一个子类对象d，也即可以有method1(d)。反之，则不一定成立<br>里氏替换原则讲的是基类与子类的关系。只有当这种关系存在时，里氏替换关系才存在，反之则不存在。</p></li></ol><p>策略模式之所以可行的基础便是里氏替换原则：策略模式要求所有的策略对象都是可以互换的，因此它们都必须是一个抽象策略角色的子类。在客户端则仅知道抽象策略角色类型，虽然变量的真实类型可以是任何一个具体策略角色的实例</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://blog.csdn.net/caihaijiang/article/details/8764226" target="_blank" rel="noopener">策略模式设计原则</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之代理模式剖析</title>
      <link href="/2018/12/25/proxy/"/>
      <url>/2018/12/25/proxy/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#代理模式定义">代理模式定义</a></li><li><a href="#静态代理">静态代理</a><ul><li><a href="#代理模式的参与者">代理模式的参与者</a></li><li><a href="#代理模式的实现思路">代理模式的实现思路</a></li><li><a href="#静态代理的实例">静态代理的实例</a></li></ul></li><li><a href="#动态代理">动态代理</a></li><li><a href="#JDK动态代理源码分析（JDK7）">JDK动态代理源码分析（JDK7）</a><ul><li><a href="#代理对象是如何创建出来的？">代理对象是如何创建出来的？</a></li><li><a href="#是谁调用了Invoke?">是谁调用了Invoke?</a></li></ul></li><li><a href="#参考文献">参考文献</a></li></ul><h2 id="代理模式定义"><a href="#代理模式定义" class="headerlink" title="代理模式定义"></a>代理模式定义</h2><p><a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科</a>上是这样描述代理模式的：<strong>所谓代理者是指一个类可以作为其他东西的接口</strong>。代理者可以作任何东西的接口, 例如网络连接，存储器中的大对象，文件或者其他无法复制的资源。</p><p>著名的代理模式的例子就是<strong>引用计数(reference counting)</strong>: 当需要一个复杂对象的多份副本时，代理模式可以结合<strong>享元模式</strong>以减少存储器的用量。典型做法是创建一个复杂对象以及多个代理者，每个代理者会引用到原本的对象。而作用在代理者的运算会转送到原本对象。一旦所有的代理者都不存在时，复杂对象会被移除。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>所谓静态代理，就是在编译阶段就生成<strong>代理类</strong>来完成对代理对象的一系列操作。下面是代理模式的结构类图：</p><h3 id="代理模式的参与者"><a href="#代理模式的参与者" class="headerlink" title="代理模式的参与者"></a>代理模式的参与者</h3><p>代理模式的角色分四种：</p><ul><li>主题接口： 即代理类的所实现的行为接口。</li><li>目标对象： 也就是被代理的对象。</li><li>代理对象： 用来封装真是主题类的代理类</li><li>客户端 </li></ul><p>下面是代理模式的类图结构： </p><p><img src="http://i.imgur.com/JS8N5CX.gif" alt=""></p><h3 id="代理模式的实现思路"><a href="#代理模式的实现思路" class="headerlink" title="代理模式的实现思路"></a>代理模式的实现思路</h3><ul><li><strong>代理对象</strong>和<strong>目标对象</strong>均实现<strong>同一个行为接口</strong>。</li><li><strong>代理类</strong>和<strong>目标类</strong>分别具体实现接口逻辑。</li><li>在<strong>代理类</strong>的构造函数中实例化一个<strong>目标对象</strong>。</li><li>在<strong>代理类</strong>中调用<strong>目标对象</strong>的行为接口。</li><li><strong>客户端</strong>想要调用<strong>目标对象</strong>的行为接口，只能通过<strong>代理类</strong>来操作。</li></ul><h3 id="静态代理的实例"><a href="#静态代理的实例" class="headerlink" title="静态代理的实例"></a>静态代理的实例</h3><p>下面以一个<strong>延迟加载</strong>的例子来说明一下静态代理。我们在启动某个服务系统时，加载某一个类时可能会耗费很长时间。为了获取更好的性能，在启动系统的时候，我们往往不去初始化这个复杂的类，取而代之的是去初始化其<strong>代理类</strong>。这样将耗费资源多的方法使用代理进行分离，可以加快系统的启动速度，减少用户等待的时间。</p><ul><li>定义一个主题接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayGoodBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义一个目标类, 并实现主题接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayGoodBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"GoodBye World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义一个代理类，来代理目标对象</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    Private RealSubject realSubject <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StaticProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//用到时候才加载，懒加载</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>realSubject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            realSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        realSubject<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//sayGoodbye方法同理</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><ul><li>定义一个客户端</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StaticProxy sp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sp<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sp<span class="token punctuation">.</span><span class="token function">sayGoodBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上就是静态代理的一个简单测试例子。感觉可能没有实际用途。然而并非如此。使用代理我们还可以将目标对象的方法进行改造，比如<strong>数据库连接池</strong>中创建了一系列连接，为了保证不频繁的打开连接，这些连接是几乎不会关闭的。然而我们编程总有习惯去将打开的 <code>Connection</code> 去 <code>close</code> 。 这样我们就可以利用代理模式来重新代理 <code>Connection</code> 接口中的 <code>close</code> 方法，改变为<strong>回收到数据库连接池</strong>中而不是真正的执行 <code>Connection.close</code> 方法。其他的例子还有很多，具体需要自己体会。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p><strong>动态代理</strong>是指在运行时动态生成代理类。即，代理类的字节码将在运行时生成并载入当前代理的 <code>ClassLoader</code>。与静态处理类相比，动态类有诸多好处。</p><ul><li>不需要为真实主题写一个形式上完全一样的封装类，假如主题接口中的方法很多，为每一个接口写一个代理方法也很麻烦。如果接口有变动，则真实主题和代理类都要修改，不利于系统维护；</li><li>使用一些动态代理的生成方法甚至可以在运行时制定代理类的执行逻辑，从而大大提升系统的灵活性。</li></ul><p>生成动态代理的方法有很多： <strong>JDK中自带动态代理</strong>，<strong>CGlib</strong>, <strong>javassist</strong>等。这些方法各有优缺点。本文主要探究JDK中的动态代理的使用和源码分析。</p><p>下面用一个实例讲解一下JDK中动态代理的用法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">dynamicProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> RealSubject <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>RealSubject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            RealSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>RealSubject<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RealSubject<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端代码实例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>Strings<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Subject subject <span class="token operator">=</span> <span class="token punctuation">(</span>Subject<span class="token punctuation">)</span>Proxy<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RealSubject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DynamicProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Subject<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Subject<span class="token punctuation">.</span><span class="token function">sayGoodBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面的代码可以看出，要利用JDK中的动态代理。利用静态方法<code>Proxy.newInstance(ClassLoader, Interfaces[], InvokeHandler)</code>可以创建一个动态代理类。 <code>newInstance</code>方法有三个参数，分别表示<strong>类加载器</strong>，<strong>一个希望该代理类实现的接口列表</strong>，以及<strong>实现<code>InvokeHandler</code>接口的实例</strong>。 动态代理将每个方法的执行过程则交给了Invoke方法处理。</p><p><strong>JDK动态代理要求，被代理的必须是个接口，单纯的类则不行</strong>。JDK动态代理所生成的代理类都会继承 <code>Proxy</code> 类，同时代理类会实现所有你传入的接口列表。因此可以强制类型转换成接口类型。 下面是 <code>Proxy</code> 的结构图。</p><p><img src="http://i.imgur.com/DUrWYF2.jpg" alt=""></p><p>可以看出<code>Proxy</code>全是静态方法，因此如果代理类没有实现任何接口，那么他就是<code>Proxy</code>类型，没有实例方法。</p><p>当然加入你要是非要代理一个没有实现某个接口的类，同时该类的方法与其他接口定义的方法相同，利用<strong>反射</strong>也是可以轻松实现的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvokeHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//你想代理的类</span>    <span class="token keyword">private</span> TargetClass targetClass <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化该类</span>    <span class="token keyword">public</span> <span class="token function">DynamicProxy</span><span class="token punctuation">(</span>TargetClass targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>targetClass <span class="token operator">=</span> targetClass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//利用反射获取你想代理的类的方法</span>        Method myMethod <span class="token operator">=</span> targetClass<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> myMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="JDK动态代理源码分析（JDK7）"><a href="#JDK动态代理源码分析（JDK7）" class="headerlink" title="JDK动态代理源码分析（JDK7）"></a>JDK动态代理源码分析（JDK7）</h2><p>看了上面的例子，我们只是简单会用动态代理。但是对于代理类是如何创建出来的，是谁调用Invoke方法等还云里雾里。下面通过分析</p><h3 id="代理对象是如何创建出来的？"><a href="#代理对象是如何创建出来的？" class="headerlink" title="代理对象是如何创建出来的？"></a>代理对象是如何创建出来的？</h3><p>首先看 <code>Proxy.newInstance</code> 方法的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span> InvocationHandler h<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalArgumentException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取接口信息</span>    <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> intfs <span class="token operator">=</span> interfaces<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> SecurityManager sm <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkProxyAccess</span><span class="token punctuation">(</span>Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loader<span class="token punctuation">,</span> intfs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//生成代理类</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cl <span class="token operator">=</span> <span class="token function">getProxyClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> intfs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...OK我们先看前半截</span><span class="token punctuation">}</span></code></pre><p>从源码看出代理类的生成是依靠<code>getProxyClass0</code>这个方法，接下来看<code>getProxyClass0</code>源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getProxyClass0</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//接口列表数目不能超过0xFFFF</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">65535</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"interface limit exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注意这里, 下面详细解释  </span>    <span class="token keyword">return</span> proxyClassCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对 <code>proxyClassCache.get</code> 的解释是： <strong>如果实现接口列表的代理类已经存在，那么直接从cache中拿。如果不存在，则通过ProxyClassFactory生成一个。</strong></p><p>在看 <code>proxyClassCache.get</code> 源码之前，先简单了解一下 <code>proxyClassCache</code>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> WeakCache<span class="token operator">&lt;</span>ClassLoader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span>        proxyClassCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakCache</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ProxyClassFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>proxyClassCache</code>是一个<code>WeakCache</code>类型的缓存，它的构造函数有两个参数，其中一个就是用于生成代理类的<code>ProxyClassFactory</code>，下面是<code>proxyClassCache.get</code>的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">WeakCache</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> P<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> P parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>这里K表示key，P表示parameters, V表示value</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> P parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// java7 NullObject判断方法，如果parameter为空则抛出带有指定消息的异常。 如果不为空则返回。</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 清理持有弱引用的WeakHashMap这种数据结构，一般用于缓存</span>    <span class="token function">expungeStaleEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从队列中获取cacheKey</span>    Object cacheKey <span class="token operator">=</span> CacheKey<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> refQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//利用懒加载的方式填充Supplier，Concurrent是一种线程安全的map</span>    ConcurrentMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Supplier<span class="token operator">&lt;</span>V<span class="token operator">>></span> valuesMap <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>valuesMap <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConcurrentMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Supplier<span class="token operator">&lt;</span>V<span class="token operator">>></span> oldValuesMap <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> valuesMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValuesMap <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            valuesMap <span class="token operator">=</span> oldValuesMap<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// create subKey and retrieve the possible Supplier&lt;V> stored by that</span>    <span class="token comment" spellcheck="true">// subKey from valuesMap</span>    Object subKey <span class="token operator">=</span> Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>subKeyFactory<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Supplier<span class="token operator">&lt;</span>V<span class="token operator">></span> supplier <span class="token operator">=</span> valuesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    Factory factory <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>supplier <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从supplier中获取Value，这个Value可能是一个工厂或者Cache的实</span>            <span class="token comment" spellcheck="true">//下面这三句代码是核心代码，返回实现InvokeHandler的类并包含了所需要的信息。</span>            V value <span class="token operator">=</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// else no supplier in cache</span>        <span class="token comment" spellcheck="true">// or a supplier that returned null (could be a cleared CacheValue</span>        <span class="token comment" spellcheck="true">// or a Factory that wasn't successful in installing the CacheValue)</span>        <span class="token comment" spellcheck="true">//下面这个过程就是填充supplier的过程</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>factory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建一个factory</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>supplier <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//填充supplier</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//填充supplier</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>while循环</strong>的作用就是不停的获取实现<code>InvokeHandler</code>的类，这个类可以是从缓存中拿到，也可是是从<code>proxyFactoryClass</code>生成的。<br><code>Factory</code>是一个实现了<code>Supplier&lt;V&gt;</code>接口的内部类。这个类覆盖了<code>get</code>方法，在<code>get</code>方法中调用了类型为<code>proxyFactoryClass</code>的实例方法<code>apply</code>。这个方法才是真正创建<strong>代理类</strong>的方法。下面看<code>ProxyFactoryClass.apply</code>方法的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">apply</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Boolean<span class="token operator">></span> interfaceSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdentityHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> intf <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*  Verify that the class loader resolves the name of this interface to the same Class object.*/</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> interfaceClass <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//加载每一个接口运行时的信息</span>            interfaceClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>intf<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果使用你自己的classload加载的class与你传入的class不相等，抛出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaceClass <span class="token operator">!=</span> intf<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>            intf <span class="token operator">+</span> <span class="token string">" is not visible from class loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果传入不是一个接口类型</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interfaceClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is not an interface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//验证接口是否重复</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaceSet<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"repeated interface: "</span> <span class="token operator">+</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    String proxyPkg <span class="token operator">=</span> null<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// package to define proxy class in</span>    <span class="token comment" spellcheck="true">/*  Record the package of a non-public proxy interface so that the proxy class will be defined in the same package.      * Verify that all non-public proxy interfaces are in the same package.    */</span>    <span class="token comment" spellcheck="true">//这一段是看你传入的接口中有没有不是public的接口，如果有，这些接口必须全部在一个包里定义的，否则抛异常 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> intf <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> flags <span class="token operator">=</span> intf<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String name <span class="token operator">=</span> intf<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String pkg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyPkg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                proxyPkg <span class="token operator">=</span> pkg<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pkg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>proxyPkg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                    <span class="token string">"non-public interfaces from different packages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyPkg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// if no non-public proxy interfaces, use com.sun.proxy package</span>        proxyPkg <span class="token operator">=</span> ReflectUtil<span class="token punctuation">.</span>PROXY_PACKAGE <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    * Choose a name for the proxy class to generate.    */</span>    <span class="token keyword">long</span> num <span class="token operator">=</span> nextUniqueNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//生成随机代理类的类名，$Proxy + num</span>    String proxyName <span class="token operator">=</span> proxyPkg <span class="token operator">+</span> proxyClassNamePrefix <span class="token operator">+</span> num<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    * 生成代理类的class文件，返回字节流    */</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> proxyClassFile <span class="token operator">=</span> ProxyGenerator<span class="token punctuation">.</span><span class="token function">generateProxyClass</span><span class="token punctuation">(</span>proxyName<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">defineClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> proxyName<span class="token punctuation">,</span> proxyClassFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> proxyClassFile<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassFormatError</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//结束</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>前文提到<code>ProxyFactoryClass.apply</code>是真正生成代理类的方法，这其实是不准确的。源代码读到这里，我们会发现<code>ProxyGenerator.generateProxyClass</code>才是真正生成代理类的方法。<br>根据Java class字节码组成来生成相应的Clss文件。具体<code>ProxyGenerator.generateProxyClass</code>源码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateClassFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    * Step 1: Assemble ProxyMethod objects for all methods to    * generate proxy dispatching code for.    */</span>    <span class="token comment" spellcheck="true">//addProxyMethod方法，就是将方法都加入到一个列表中，并与对应的class对应起来  </span>    <span class="token comment" spellcheck="true">//这里给Object对应了三个方法hashCode，toString和equals  </span>    <span class="token function">addProxyMethod</span><span class="token punctuation">(</span>hashCodeMethod<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addProxyMethod</span><span class="token punctuation">(</span>equalsMethod<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addProxyMethod</span><span class="token punctuation">(</span>toStringMethod<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将接口列表中的接口与接口下的方法对应起来</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> interfaces<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> interfaces<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> methods<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">addProxyMethod</span><span class="token punctuation">(</span>methods<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> interfaces<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * For each set of proxy methods with the same signature,     * verify that the methods' return types are compatible.     */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ProxyMethod<span class="token operator">></span> sigmethods <span class="token operator">:</span> proxyMethods<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkReturnTypes</span><span class="token punctuation">(</span>sigmethods<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * Step 2: Assemble FieldInfo and MethodInfo structs for all of     * fields and methods in the class we are generating.     */</span>     <span class="token comment" spellcheck="true">//方法中加入构造方法，这个构造方法只有一个，就是一个带有InvocationHandler接口的构造方法 </span>     <span class="token comment" spellcheck="true">//这个才是真正给class文件，也就是代理类加入方法了，不过还没真正处理，只是先加进来等待循环，构造方法在class文件中的名称描述是&lt;init>  </span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        methods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">generateConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ProxyMethod<span class="token operator">></span> sigmethods <span class="token operator">:</span> proxyMethods<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>ProxyMethod pm <span class="token operator">:</span> sigmethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//给每一个代理方法加一个Method类型的属性，数字10是class文件的标识符，代表这些属性都是private static的  </span>                fields<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FieldInfo</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>methodFieldName<span class="token punctuation">,</span>                <span class="token string">"Ljava/lang/reflect/Method;"</span><span class="token punctuation">,</span>                ACC_PRIVATE <span class="token operator">|</span> ACC_STATIC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将每一个代理方法都加到代理类的方法中 </span>                methods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span><span class="token function">generateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//加入一个静态初始化块，将每一个属性都初始化，这里静态代码块也叫类构造方法，其实就是名称为&lt;clinit>的方法，所以加到方法列表  </span>        methods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">generateStaticInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span><span class="token string">"unexpected I/O Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方法和属性个数都不能超过65535，包括之前的接口个数也是这样，</span>    <span class="token comment" spellcheck="true">//这是因为在class文件中，这些个数都是用4位16进制表示的，所以最大值是2的16次方-1  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>methods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">65535</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"method limit exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fields<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">65535</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"field limit exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//接下来就是写class文件的过程，包括魔数，类名，常量池等一系列字节码的组成，就不一一细说了。需要的可以参考JVM虚拟机字节码的相关知识。</span>    cp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token function">dotToSlash</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span>superclassName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> interfaces<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token function">dotToSlash</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cp<span class="token punctuation">.</span><span class="token function">setReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ByteArrayOutputStream bout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DataOutputStream dout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>bout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// u4 magic;</span>        dout<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">0xCAFEBABE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// u2 minor_version;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>CLASSFILE_MINOR_VERSION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// u2 major_version;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>CLASSFILE_MAJOR_VERSION<span class="token punctuation">)</span><span class="token punctuation">;</span>        cp<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dout<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// (write constant pool)</span>        <span class="token comment" spellcheck="true">// u2 access_flags;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>ACC_PUBLIC <span class="token operator">|</span> ACC_FINAL <span class="token operator">|</span> ACC_SUPER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// u2 this_class;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token function">dotToSlash</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// u2 super_class;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span>superclassName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// u2 interfaces_count;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// u2 interfaces[interfaces_count];</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> interfaces<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span>            <span class="token function">dotToSlash</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// u2 fields_count;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>fields<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// field_info fields[fields_count];</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FieldInfo f <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// u2 methods_count;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>methods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// method_info methods[methods_count];</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MethodInfo m <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            m<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// u2 attributes_count;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (no ClassFile attributes for proxy classes)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span><span class="token string">"unexpected I/O Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bout<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>经过层层调用，一个代理类终于生成了。</p><h3 id="是谁调用了Invoke"><a href="#是谁调用了Invoke" class="headerlink" title="是谁调用了Invoke?"></a>是谁调用了Invoke?</h3><p>我们模拟JDK自己生成一个代理类, 类名为<strong>TestProxyGen</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGeneratorProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classFile <span class="token operator">=</span> ProxyGenerator<span class="token punctuation">.</span><span class="token function">generateProxyClass</span><span class="token punctuation">(</span><span class="token string">"TestProxyGen"</span><span class="token punctuation">,</span>                Subject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/yadoao/Desktop/TestProxyGen.class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>          fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>classFile<span class="token punctuation">)</span><span class="token punctuation">;</span>          fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>用JD-GUI反编译该class文件，结果如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>UndeclaredThrowableException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TestProxyGen</span> <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">ISubject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m3<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m0<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m4<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TestProxyGen</span><span class="token punctuation">(</span>InvocationHandler paramInvocationHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>paramInvocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span><span class="token operator">|</span>RuntimeException localError<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> localError<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> localThrowable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>localThrowable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object paramObject<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m1<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> paramObject <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span><span class="token operator">|</span>RuntimeException localError<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> localError<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> localThrowable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>localThrowable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m0<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span><span class="token operator">|</span>RuntimeException localError<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> localError<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> localThrowable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>localThrowable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sayGoodBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m4<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span><span class="token operator">|</span>RuntimeException localError<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> localError<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> localThrowable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>localThrowable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m2<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span><span class="token operator">|</span>RuntimeException localError<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> localError<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> localThrowable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>localThrowable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            m3 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.su.dynamicProxy.ISubject"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sayHello"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m0 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m4 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.su.dynamicProxy.ISubject"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sayGoodBye"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m2 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> localNoSuchMethodException<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>localNoSuchMethodException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> localClassNotFoundException<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>localClassNotFoundException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>首先注意到生成代理类的构造函数，它传入一个实现InvokeHandler接口的类作为参数，并调用父类Proxy的构造器，即将Proxy中的成员变量protected InvokeHander h进行了初始化。</li><li>再次注意到几个静态的初始化块，这里的静态初始化块就是对代理的接口列表以及hashcode,toString, equals方法进行初始化。</li><li>最后就是这几个方法的调用过程，全都是回调Invoke方法。</li></ul><p>就此代理模式分析到此结束。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-proxy-pattern/" target="_blank" rel="noopener">代理模式原理及实例讲解</a> </li><li><a href="http://blog.csdn.net/zuoxiaolong8810/article/details/9026775" target="_blank" rel="noopener">代理模式学习</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java8 foreach</title>
      <link href="/2018/12/25/foreach/"/>
      <url>/2018/12/25/foreach/</url>
      
        <content type="html"><![CDATA[<p>在这篇文章中我将向你演示如何使用Java8中的<code>foreach</code>操作<code>List</code>和<code>Map</code></p><h3 id="1-Foreach操作Map"><a href="#1-Foreach操作Map" class="headerlink" title="1. Foreach操作Map"></a>1. Foreach操作Map</h3><p>1.1 正常方式遍历Map</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> entry <span class="token operator">:</span> items<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Item : "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Count : "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><a id="more"></a><p>1.2 使用Java8的<code>foreach</code>+<code>lambda</code>表达式遍历Map</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Item : "</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">" Count : "</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Item : "</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">" Count : "</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>###2. Foreach操作List<br>2.1 普通方式循环List</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>String item <span class="token operator">:</span> items<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.2 在Java8中使用<code>foreach</code>+<code>lambda</code>表达式遍历List</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//lambda</span><span class="token comment" spellcheck="true">//Output : A,B,C,D,E</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Output : C</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//method reference</span><span class="token comment" spellcheck="true">//Output : A,B,C,D,E</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Steam and filter</span><span class="token comment" spellcheck="true">//Output : B</span>items<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>参考资料：</p><ol><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html#forEach-java.util.function.Consumer-" target="_blank" rel="noopener">Java 8 Iterable forEach JavaDoc</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#forEach-java.util.function.BiConsumer-" target="_blank" rel="noopener">Java 8 forEach JavaDoc</a></li></ol><p>欢迎star开源web框架Blade：<a href="http://github.com/biezhi/blade" target="_blank" rel="noopener">http://github.com/biezhi/blade</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git简明指南</title>
      <link href="/2018/12/25/guide/"/>
      <url>/2018/12/25/guide/</url>
      
        <content type="html"><![CDATA[<h1 id="git-简明指南"><a href="#git-简明指南" class="headerlink" title="git - 简明指南"></a>git - 简明指南</h1><blockquote><p>助你入门 git 的简明指南，木有高深内容 ;)</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><a href="http://code.google.com/p/git-osx-installer/downloads/list?can=3" target="_blank" rel="noopener">下载 git OSX 版</a></li><li><a href="http://msysgit.github.io/" target="_blank" rel="noopener">下载 git Windows 版</a></li><li><a href="http://book.git-scm.com/2_installing_git.html" target="_blank" rel="noopener">下载 git Linux 版</a></li></ul><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><p>创建新文件夹，打开，然后执行 </p><pre class=" language-sh"><code class="language-sh">git init</code></pre><p>以创建新的 git 仓库。</p><h2 id="检出仓库"><a href="#检出仓库" class="headerlink" title="检出仓库"></a>检出仓库</h2><p>执行如下命令以创建一个本地仓库的克隆版本：</p><pre class=" language-sh"><code class="language-sh">git clone /path/to/repository </code></pre><p>如果是远端服务器上的仓库，你的命令会是这个样子：</p><pre class=" language-sh"><code class="language-sh">git clone username@host:/path/to/repository</code></pre><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 <code>工作目录</code>，它持有实际文件；第二个是 <code>暂存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是 <code>HEAD</code>，它指向你最后一次提交的结果。</p><p><img src="http://7jpobz.com1.z0.glb.clouddn.com/trees.png" alt=""></p><h2 id="添加和提交"><a href="#添加和提交" class="headerlink" title="添加和提交"></a>添加和提交</h2><p>你可以提出更改（把它们添加到暂存区），使用如下命令：</p><pre class=" language-sh"><code class="language-sh">git add <filename>git add *</code></pre><p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：</p><pre class=" language-sh"><code class="language-sh">git commit -m "代码提交信息"</code></pre><p>现在，你的改动已经提交到了 <strong>HEAD</strong>，但是还没到你的远端仓库。</p><h2 id="推送改动"><a href="#推送改动" class="headerlink" title="推送改动"></a>推送改动</h2><p>你的改动现在已经在本地仓库的 <strong>HEAD</strong> 中了。执行如下命令以将这些改动提交到远端仓库：</p><pre class=" language-sh"><code class="language-sh">git push origin master</code></pre><p>可以把 <strong><em>master</em></strong> 换成你想要推送的任何分支。</p><p> 如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p><pre class=" language-sh"><code class="language-sh">git remote add origin <server></code></pre><p>如此你就能够将你的改动推送到所添加的服务器上去了。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<strong><em>master</em></strong> 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p><p><img src="http://7jpobz.com1.z0.glb.clouddn.com/branches.png" alt=""></p><p>创建一个叫做“feature_x”的分支，并切换过去：</p><pre class=" language-sh"><code class="language-sh">git checkout -b feature_x</code></pre><p>切换回主分支：</p><pre class=" language-sh"><code class="language-sh">git checkout master</code></pre><p>再把新建的分支删掉：</p><pre class=" language-sh"><code class="language-sh">git branch -d feature_x</code></pre><p>除非你将分支推送到远端仓库，不然该分支就是 <em>不为他人所见的</em>：</p><pre class=" language-sh"><code class="language-sh">git push origin <branch></code></pre><h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><p>要更新你的本地仓库至最新改动，执行：</p><pre class=" language-sh"><code class="language-sh">git pull</code></pre><p>以在你的工作目录中 <em>获取</em>（fetch） 并 <em>合并</em>（merge） 远端的改动。<br>要合并其他分支到你的当前分支（例如 master），执行：</p><pre class=" language-sh"><code class="language-sh">git merge <branch></code></pre><p>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现<em>冲突</em>（conflicts）。 这时候就需要你修改这些文件来手动合并这些<em>冲突</em>（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：</p><pre class=" language-sh"><code class="language-sh">git add <filename></code></pre><p>在合并改动之前，你可以使用如下命令预览差异：</p><pre class=" language-sh"><code class="language-sh">git diff <source_branch> <target_branch></code></pre><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 <em>1.0.0</em> 的标签：</p><pre class=" language-sh"><code class="language-sh">git tag 1.0.0 1b2e1d63ff</code></pre><p><em>1b2e1d63ff</em> 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：</p><pre class=" language-sh"><code class="language-sh">git log</code></pre><p>你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。</p><h2 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h2><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：</p><pre class=" language-sh"><code class="language-sh">git checkout -- <filename></code></pre><p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</p><p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：</p><pre class=" language-sh"><code class="language-sh">git fetch origingit reset --hard origin/master</code></pre><h2 id="实用小贴士"><a href="#实用小贴士" class="headerlink" title="实用小贴士"></a>实用小贴士</h2><p>内建的图形化 git：</p><pre class=" language-sh"><code class="language-sh">gitk</code></pre><p>彩色的 git 输出：</p><pre class=" language-sh"><code class="language-sh">git config color.ui true</code></pre><p>显示历史记录时，每个提交的信息只显示一行：</p><pre class=" language-sh"><code class="language-sh">git config format.pretty oneline</code></pre><p>交互式添加文件到暂存区：</p><pre class=" language-sh"><code class="language-sh">git add -i</code></pre><h2 id="链接与资源"><a href="#链接与资源" class="headerlink" title="链接与资源"></a>链接与资源</h2><h3 id="图形化客户端"><a href="#图形化客户端" class="headerlink" title="图形化客户端"></a>图形化客户端</h3><ul><li><a href="http://gitx.laullon.com/" target="_blank" rel="noopener">GitX (L) (OSX, 开源软件)</a></li><li><a href="http://www.git-tower.com/" target="_blank" rel="noopener">Tower (OSX)</a></li><li><a href="http://www.sourcetreeapp.com/" target="_blank" rel="noopener">Source Tree (OSX, 免费)</a></li><li><a href="http://mac.github.com/" target="_blank" rel="noopener">GitHub for Mac (OSX, 免费)</a></li><li><a href="https://itunes.apple.com/gb/app/gitbox/id403388357?mt=12" target="_blank" rel="noopener">GitBox (OSX, App Store)</a></li></ul><h3 id="指南和手册"><a href="#指南和手册" class="headerlink" title="指南和手册"></a>指南和手册</h3><ul><li><a href="http://book.git-scm.com/" target="_blank" rel="noopener">Git 社区参考书</a></li><li><a href="http://progit.org/book/" target="_blank" rel="noopener">专业 Git</a></li><li><a href="http://think-like-a-git.net/" target="_blank" rel="noopener">像 git 那样思考</a></li><li><a href="http://help.github.com/" target="_blank" rel="noopener">GitHub 帮助</a></li><li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener">图解 Git</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java8简明指南</title>
      <link href="/2018/12/25/java8-guide/"/>
      <url>/2018/12/25/java8-guide/</url>
      
        <content type="html"><![CDATA[<h2 id="Java8简明指南"><a href="#Java8简明指南" class="headerlink" title="Java8简明指南"></a>Java8简明指南</h2><blockquote><p>欢迎来到Java8简明指南。本教程将一步一步指导你通过所有新语言特性。由短而简单的代码示例,带你了解如何使用默认接口方法,lambda表达式,方法引用和可重复注解。本文的最后你会熟悉最新的API的变化如Stream,Fcuntional,Map API扩展和新的日期API。</p></blockquote><a id="more"></a><h3 id="接口的默认方法"><a href="#接口的默认方法" class="headerlink" title="接口的默认方法"></a>接口的默认方法</h3><p>在Java8中，利用<code>default</code>关键字使我们能够添加非抽象方法实现的接口。此功能也被称为扩展方法，这里是我们的第一个例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Formula</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">double</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>除了接口抽象方法<code>calculate</code>，还定义了默认方法<code>sqrt</code>的返回值。具体类实现抽象方法<code>calculate</code>。默认的方法<code>sqrt</code>可以开箱即用。</p><pre class=" language-java"><code class="language-java">Formula formula <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Formula</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>formula<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 100.0</span>formula<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 4.0</span></code></pre><p>该公式被实现为匿名对象。这段代码是相当长的：非常详细的一个计算：6行代码完成这样一个简单的计算。正如我们将在下一节中看到的，Java8有一个更好的方法来实现单方法对象。</p><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>让我们以一个简单的例子来开始，在以前的版本中对字符串进行排序：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"peter"</span><span class="token punctuation">,</span> <span class="token string">"anna"</span><span class="token punctuation">,</span> <span class="token string">"mike"</span><span class="token punctuation">,</span> <span class="token string">"xenia"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>静态的集合类方法<code>Collections.sort</code>，为比较器的给定列表中的元素排序。你会发现自己经常创建匿名比较器并将它们传递给方法。<br>Java8支持更短的语法而不总是创建匿名对象，<br><strong>Lambda表达式：</strong></p><pre class=" language-java"><code class="language-java">Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>正如你可以看到的代码更容易阅读。但它甚至更短：</p><pre class=" language-java"><code class="language-java">Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一行方法的方法体可以跳过<code>{}</code>和参数类型，使它变得更短：</p><pre class=" language-java"><code class="language-java">Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Java编译器知道参数类型，所以你可以跳过它们，接下来让我们深入了解lambda表达式。</p><h3 id="函数式接口-Functional-Interfaces"><a href="#函数式接口-Functional-Interfaces" class="headerlink" title="函数式接口(Functional Interfaces)"></a>函数式接口(Functional Interfaces)</h3><p>如何适应Java lambda表达式类型系统？每个<code>lambda</code>由一个指定的接口对应于一个给定的类型。所谓的函数式接口必须包含一个确切的<strong>一个抽象方法声明</strong>。该类型将匹配这个抽象方法每个lambda表达式。因为默认的方法是不抽象的，你可以自由添加默认的方法到你的函数式接口。</p><p>我们可以使用任意的接口为lambda表达式，只要接口只包含一个抽象方法。确保你的接口满足要求，你应该添加<code>@FunctionalInterface</code>注解。当你尝试在接口上添加第二个抽象方法声明时，编译器会注意到这个注释并抛出一个编译器错误。</p><p>举例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>F<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>    T <span class="token function">convert</span><span class="token punctuation">(</span>F from<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">Converter<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> converter <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>Integer converted <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>converted<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 123</span></code></pre><p>记住，有<code>@FunctionalInterface</code>注解的也是有效的代码。</p><h3 id="方法和构造函数引用"><a href="#方法和构造函数引用" class="headerlink" title="方法和构造函数引用"></a>方法和构造函数引用</h3><p>上面的例子代码可以进一步简化，利用静态方法引用：</p><pre class=" language-java"><code class="language-java">Converter<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> converter <span class="token operator">=</span> Integer<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">;</span>Integer converted <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>converted<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 123</span></code></pre><p>Java使您可以通过<code>::</code>关键字调用引用的方法或构造函数。上面的示例演示了如何引用静态方法。但我们也可以参考对象方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Something</span> <span class="token punctuation">{</span>    String <span class="token function">startsWith</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">Something something <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Converter<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> converter <span class="token operator">=</span> something<span class="token operator">:</span><span class="token operator">:</span>startsWith<span class="token punctuation">;</span>String converted <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>converted<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "J"</span></code></pre><p>让我们来看看如何使用<code>::</code>关键字调用构造函数。首先，我们定义一个<code>Person</code>类并且提供不同的构造函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String firstName<span class="token punctuation">;</span>    String lastName<span class="token punctuation">;</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Person</span><span class="token punctuation">(</span>String firstName<span class="token punctuation">,</span> String lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来，我们指定一个<code>Person</code>的工厂接口，用于创建<code>Person</code>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">PersonFactory</span><span class="token operator">&lt;</span>P <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token operator">></span> <span class="token punctuation">{</span>    P <span class="token function">create</span><span class="token punctuation">(</span>String firstName<span class="token punctuation">,</span> String lastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后我们通过构造函数引用来把所有东西拼到一起，而不是手动实现工厂：</p><pre class=" language-java"><code class="language-java">PersonFactory<span class="token operator">&lt;</span>Person<span class="token operator">></span> personFactory <span class="token operator">=</span> Person<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>Person person <span class="token operator">=</span> personFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token string">"Parker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们通过<code>Person::new</code>创建一个人的引用，Java编译器会自动选择正确的构造函数匹配<code>PersonFactory.create</code>的返回。</p><h3 id="Lambda作用域"><a href="#Lambda作用域" class="headerlink" title="Lambda作用域"></a>Lambda作用域</h3><p>从lambda表达式访问外部变量的作用域是匿名对象非常相似。您可以从本地外部范围以及实例字段和静态变量中访问<code>final</code>变量。</p><h4 id="访问局部变量"><a href="#访问局部变量" class="headerlink" title="访问局部变量"></a>访问局部变量</h4><p>我们可以从lambda表达式的外部范围读取<code>final</code>变量：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> stringConverter <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>stringConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 3</span></code></pre><p>但不同的匿名对象变量<code>num</code>没有被声明为<code>final</code>，下面的代码也有效：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> stringConverter <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>stringConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 3</span></code></pre><p>然而<code>num</code>必须是隐含的<code>final</code>常量。以下代码不编译：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> stringConverter <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><p>在lambda表达式里修改<code>num</code>也是不允许的。</p><h4 id="访问字段和静态变量"><a href="#访问字段和静态变量" class="headerlink" title="访问字段和静态变量"></a>访问字段和静态变量</h4><p>与局部变量不同，我们在lambda表达式的内部能获取到对成员变量或静态变量的读写权。这种访问行为在匿名对象里是非常典型的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Lambda4</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> outerStaticNum<span class="token punctuation">;</span>    <span class="token keyword">int</span> outerNum<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">testScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> stringConverter1 <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            outerNum <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> stringConverter2 <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            outerStaticNum <span class="token operator">=</span> <span class="token number">72</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="访问默认接口方法"><a href="#访问默认接口方法" class="headerlink" title="访问默认接口方法"></a>访问默认接口方法</h4><p>记得第一节的<code>formula</code>例子吗？接口<code>Formula</code>定义了一个默认的方法可以从每个公式实例访问包括匿名对象，<br>这并没有Lambda表达式的工作。<br>默认方法<strong>不能</strong>在lambda表达式访问。以下代码不编译：</p><pre class=" language-java"><code class="language-java">Formula formula <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">sqrt</span><span class="token punctuation">(</span> a <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="内置函数式接口-Built-in-Functional-Interfaces"><a href="#内置函数式接口-Built-in-Functional-Interfaces" class="headerlink" title="内置函数式接口(Built-in Functional Interfaces)"></a>内置函数式接口(Built-in Functional Interfaces)</h3><p>JDK1.8的API包含许多内置的函数式接口。其中有些是众所周知的，从旧版本中而来，如<code>Comparator</code>或者<code>Runnable</code>。使现有的接口通过<code>@FunctionalInterface</code>注解支持Lambda。</p><p>但是Java8 API也添加了新功能接口,使你的开发更简单。其中一些接口是众所周知的<a href="https://code.google.com/p/guava-libraries/" target="_blank" rel="noopener">Google Guava</a>库。即使你熟悉这个库也应该密切关注这些接口是如何延长一些有用的扩展方法。</p><h4 id="Predicates-谓词"><a href="#Predicates-谓词" class="headerlink" title="Predicates(谓词)"></a>Predicates(谓词)</h4><p>Predicates是一个返回布尔类型的函数。这就是谓词函数，输入一个对象，返回true或者false。<br>在Google Guava中，定义了Predicate接口，该接口包含一个带有泛型参数的方法：</p><pre class=" language-java"><code class="language-java"><span class="token function">apply</span><span class="token punctuation">(</span>T input<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">boolean</span></code></pre><pre class=" language-java"><code class="language-java">Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> predicate <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// true</span>predicate<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>Predicate<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> nonNull <span class="token operator">=</span> Objects<span class="token operator">:</span><span class="token operator">:</span>nonNull<span class="token punctuation">;</span>Predicate<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> isNull <span class="token operator">=</span> Objects<span class="token operator">:</span><span class="token operator">:</span>isNull<span class="token punctuation">;</span>Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> isEmpty <span class="token operator">=</span> String<span class="token operator">:</span><span class="token operator">:</span>isEmpty<span class="token punctuation">;</span>Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> isNotEmpty <span class="token operator">=</span> isEmpty<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Functions-函数"><a href="#Functions-函数" class="headerlink" title="Functions(函数)"></a>Functions(函数)</h4><p>Functions接受一个参数，并产生一个结果。默认方法可以将多个函数串在一起（compse, andThen）</p><pre class=" language-java"><code class="language-java">Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> toInteger <span class="token operator">=</span> Integer<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">;</span>Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> backToString <span class="token operator">=</span> toInteger<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">)</span><span class="token punctuation">;</span>backToString<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// "123"</span></code></pre><h4 id="Suppliers-生产者"><a href="#Suppliers-生产者" class="headerlink" title="Suppliers(生产者)"></a>Suppliers(生产者)</h4><p>Suppliers产生一个给定的泛型类型的结果。与Functional不同的是Suppliers不接受输入参数。</p><pre class=" language-java"><code class="language-java">Supplier<span class="token operator">&lt;</span>Person<span class="token operator">></span> personSupplier <span class="token operator">=</span> Person<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>personSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// new Person</span></code></pre><h4 id="Consumers-消费者"><a href="#Consumers-消费者" class="headerlink" title="Consumers(消费者)"></a>Consumers(消费者)</h4><p>Consumers代表在一个单一的输入参数上执行操作。</p><pre class=" language-java"><code class="language-java">Consumer<span class="token operator">&lt;</span>Person<span class="token operator">></span> greeter <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>greeter<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Luke"</span><span class="token punctuation">,</span> <span class="token string">"Skywalker"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Comparators-比较器"><a href="#Comparators-比较器" class="headerlink" title="Comparators(比较器)"></a>Comparators(比较器)</h4><p>Comparators在旧版本Java中是众所周知的。Java8增加了各种默认方法的接口。</p><pre class=" language-java"><code class="language-java">Comparator<span class="token operator">&lt;</span>Person<span class="token operator">></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> p1<span class="token punctuation">.</span>firstName<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"Wonderland"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// > 0</span>comparator<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt; 0</span></code></pre><h4 id="Optionals-可选项"><a href="#Optionals-可选项" class="headerlink" title="Optionals(可选项)"></a>Optionals(可选项)</h4><p>Optionals是没有函数的接口，取而代之的是防止<code>NullPointerException</code>异常。这是下一节的一个重要概念，所以让我们看看如何结合Optionals工作。</p><p>Optional is a simple container for a value which may be null or non-null. Think of a method which may return a non-null result but sometimes return nothing. Instead of returning null you return an Optional in Java 8.</p><p>Optional是一个简单的容器，这个值可能是空的或者非空的。考虑到一个方法可能会返回一个non-null的值，也可能返回一个空值。为了不直接返回null，我们在Java 8中就返回一个Optional。</p><pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> optional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"bam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// true</span>optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// "bam"</span>optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"fallback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "bam"</span>optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// "b"</span></code></pre><h4 id="Streams-管道"><a href="#Streams-管道" class="headerlink" title="Streams(管道)"></a>Streams(管道)</h4><p>一个<code>java.util.Stream</code>代表一个序列的元素在其中的一个或多个可以执行的操作。流操作是中间或终端。当终端操作返回某一类型的结果时，中间操作返回流，这样就可以将多个方法调用在一行中。流是一个源产生的，例如<code>java.util.Collection</code>像列表或设置（不支持map）。流操作可以被执行的顺序或并行。</p><p>让我们先看一下数据流如何工作。首先，我们创建一个字符串列表的数据：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> stringCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ddd2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ddd1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在Java8中Collections类的功能已经有所增强，你可用调用<code>Collection.stream()</code>或<code>Collection.parallelStream()</code>。<br>下面的章节解释最常见的流操作。</p><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>Filter接受一个predicate来过滤流的所有元素。这个中间操作能够调用另一个流的操作（Foreach）的结果。ForEach接受一个消费者为每个元素执行过滤流。它是<code>void</code>，所以我们不能称之为另一个流操作。</p><pre class=" language-java"><code class="language-java">stringCollection    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "aaa2", "aaa1"</span></code></pre><h4 id="Sorted"><a href="#Sorted" class="headerlink" title="Sorted"></a>Sorted</h4><p>Sorted是一个中间操作，能够返回一个排过序的流对象的视图。这些元素按自然顺序排序，除非你经过一个自定义比较器（实现Comparator接口）。</p><pre class=" language-java"><code class="language-java">stringCollection    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "aaa1", "aaa2"</span></code></pre><p>要记住，排序只会创建一个流的排序视图，而不处理支持集合的排序。原来string集合中的元素顺序是没有改变的。</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringCollection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1</span></code></pre><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p><code>map</code>是一个对于流对象的中间操作，通过给定的方法，它能够把流对象中的每一个元素对应到另外一个对象上。下面的例子将每个字符串转换成一个大写字符串，但也可以使用<code>map</code>将每个对象转换为另一种类型。所得到的流的泛型类型取决于您传递给<code>map</code>方法的泛型类型。</p><pre class=" language-java"><code class="language-java">stringCollection    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "DDD2", "DDD1", "CCC", "BBB3", "BBB2", "AAA2", "AAA1"</span></code></pre><h4 id="Match"><a href="#Match" class="headerlink" title="Match"></a>Match</h4><p>可以使用各种匹配操作来检查某个谓词是否匹配流。所有这些操作都是终止操作，返回一个布尔结果。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> anyStartsWithA <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anyStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// true</span><span class="token keyword">boolean</span> allStartsWithA <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false</span><span class="token keyword">boolean</span> noneStartsWithZ <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noneStartsWithZ<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// true</span></code></pre><h4 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h4><p>Count是一个终止操作返回流中的元素的数目，返回<code>long</code>类型。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> startsWithB <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>startsWithB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3</span></code></pre><h4 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h4><p>该终止操作能够通过某一个方法，对元素进行削减操作。该操作的结果会放在一个Optional变量里返回。</p><pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> reduced <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s1 <span class="token operator">+</span> <span class="token string">"#"</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>reduced<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2"</span></code></pre><h3 id="Parallel-Streams"><a href="#Parallel-Streams" class="headerlink" title="Parallel Streams"></a>Parallel Streams</h3><p>如上所述的数据流可以是连续的或平行的。在一个单独的线程上进行操作，同时在多个线程上执行并行操作。</p><p>下面的例子演示了如何使用并行流很容易的提高性能。</p><p>首先，我们创建一个大的元素列表：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    UUID uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    values<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>现在我们测量一下流对这个集合进行排序消耗的时间。</p><h4 id="Sequential-Sort"><a href="#Sequential-Sort" class="headerlink" title="Sequential Sort"></a>Sequential Sort</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> count <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> millis <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"sequential sort took: %d ms"</span><span class="token punctuation">,</span> millis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sequential sort took: 899 ms</span></code></pre><h4 id="Parallel-Sort"><a href="#Parallel-Sort" class="headerlink" title="Parallel Sort"></a>Parallel Sort</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> count <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> millis <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"parallel sort took: %d ms"</span><span class="token punctuation">,</span> millis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// parallel sort took: 472 ms</span></code></pre><p>你可以看到这两段代码片段几乎是相同的，但并行排序大致是50%的差距。唯一的不同就是把<code>stream()</code>改成了<code>parallelStream()</code>。</p><h3 id="Map-1"><a href="#Map-1" class="headerlink" title="Map"></a>Map</h3><p>正如前面所说的Map不支持流操作，现在的Map支持各种新的实用的方法和常见的任务。</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    map<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"val"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的代码应该是不解自明的：putIfAbsent避免我们将null写入；forEach接受一个消费者对象，从而将操作实施到每一个map中的值上。</p><p>这个例子演示了如何利用函数判断或获取Map中的数据：</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">computeIfPresent</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> val <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// val33</span>map<span class="token punctuation">.</span><span class="token function">computeIfPresent</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>map<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> num <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"val"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span>map<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> num <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"bam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// val33</span></code></pre><p>接下来，我们将学习如何删除一一个给定的键的条目，只有当它当前映射到给定值：</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"val3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// val33</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"val33"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// null</span></code></pre><p>另一种实用的方法：</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">"not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// not found</span></code></pre><p>Map合并条目是非常容易的：</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"val9"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> value<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// val9</span>map<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"concat"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> value<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// val9concat</span></code></pre><p>合并操作先看map中是否没有特定的key/value存在，如果是，则把key/value存入map，否则merging函数就会被调用，对现有的数值进行修改。</p><h3 id="Date-API"><a href="#Date-API" class="headerlink" title="Date API"></a>Date API</h3><p>Java8 包含一个新的日期和时间API，在<code>java.time</code>包下。新的日期API与<a href="http://www.joda.org/joda-time/" target="_blank" rel="noopener">Joda Time</a>库可以媲美，但它们是不一样的。下面的例子涵盖了这个新的API最重要的部分。</p><h4 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h4><p>Clock提供访问当前日期和时间。Clock是对当前时区敏感的，可以用来代替<code>System.currentTimeMillis()</code>来获取当前的毫秒值。当前时间线上的时刻可以用Instance类来表示。Instance可以用来创建<code>java.util.Date</code>格式的对象。</p><pre class=" language-java"><code class="language-java">Clock clock <span class="token operator">=</span> Clock<span class="token punctuation">.</span><span class="token function">systemDefaultZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> millis <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Instant instant <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date legacyDate <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// legacy java.util.Date</span></code></pre><h4 id="Timezones"><a href="#Timezones" class="headerlink" title="Timezones"></a>Timezones</h4><p>时区是由<code>ZoneId</code>表示，通过静态工厂方法可以很容易地访问。时区还定义了一个偏移量，用来转换当前时刻与目标时刻。</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">getAvailableZoneIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// prints all available timezone ids</span>ZoneId zone1 <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Europe/Berlin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ZoneId zone2 <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Brazil/East"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zone1<span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zone2<span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ZoneRules[currentStandardOffset=+01:00]</span><span class="token comment" spellcheck="true">// ZoneRules[currentStandardOffset=-03:00]</span></code></pre><h4 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h4><p>LocalTime代表没有时区的时间，例如晚上10点或17:30:15。下面的例子会用上面的例子定义的时区创建两个本地时间对象。然后我们比较两个时间并计算小时和分钟的差异。</p><pre class=" language-java"><code class="language-java">LocalTime now1 <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>zone1<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalTime now2 <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>zone2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now1<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>now2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span><span class="token keyword">long</span> hoursBetween <span class="token operator">=</span> ChronoUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>now1<span class="token punctuation">,</span> now2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> minutesBetween <span class="token operator">=</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>now1<span class="token punctuation">,</span> now2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hoursBetween<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// -3</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>minutesBetween<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// -239</span></code></pre><h4 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h4><p>LocalDate代表一个唯一的日期，如2014-03-11。它是不可变的,完全模拟本地时间工作。此示例演示如何通过添加或减去天数,月数，年来计算新的日期。记住每一个操作都会返回一个新的实例。</p><pre class=" language-java"><code class="language-java">LocalDate today <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate tomorrow <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate yesterday <span class="token operator">=</span> tomorrow<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate independenceDay <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2014</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>JULY<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DayOfWeek dayOfWeek <span class="token operator">=</span> independenceDay<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dayOfWeek<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// FRIDAY</span></code></pre><p>将字符串解析为LocalDate:</p><pre class=" language-java"><code class="language-java">DateTimeFormatter germanFormatter <span class="token operator">=</span>    DateTimeFormatter        <span class="token punctuation">.</span><span class="token function">ofLocalizedDate</span><span class="token punctuation">(</span>FormatStyle<span class="token punctuation">.</span>MEDIUM<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withLocale</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>GERMAN<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate xmas <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"24.12.2014"</span><span class="token punctuation">,</span> germanFormatter<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xmas<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2014-12-24</span></code></pre><h4 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h4><p>LocalDateTime代表日期时间。它结合了日期和时间见上面的部分为一个实例。<code>LocalDateTime</code>是不可变的,类似于本地时间和LocalDate工作。我们可以从一个日期时间获取某些字段的方法:</p><pre class=" language-java"><code class="language-java">LocalDateTime sylvester <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2014</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>DECEMBER<span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DayOfWeek dayOfWeek <span class="token operator">=</span> sylvester<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dayOfWeek<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// WEDNESDAY</span>Month month <span class="token operator">=</span> sylvester<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// DECEMBER</span><span class="token keyword">long</span> minuteOfDay <span class="token operator">=</span> sylvester<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>MINUTE_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>minuteOfDay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1439</span></code></pre><p>随着一个时区可以转换为一个即时的附加信息。Instance可以被转换为日期型转化为指定格式的<code>java.util.Date</code>。</p><pre class=" language-java"><code class="language-java">Instant instant <span class="token operator">=</span> sylvester        <span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date legacyDate <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>legacyDate<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Wed Dec 31 23:59:59 CET 2014</span></code></pre><p>格式日期时间对象就像格式化日期对象或者格式化时间对象，除了使用预定义的格式以外，我们还可以创建自定义的格式化对象，然后匹配我们自定义的格式。</p><pre class=" language-java"><code class="language-java">DateTimeFormatter formatter <span class="token operator">=</span>    DateTimeFormatter        <span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"MMM dd, yyyy - HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDateTime parsed <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"Nov 03, 2014 - 07:13"</span><span class="token punctuation">,</span> formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>String string <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>parsed<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Nov 03, 2014 - 07:13</span></code></pre><p>不像<code>java.text.NumberFormat</code>，新的<code>DateTimeFormatter</code>是不可变的，线程安全的。</p><h3 id="Annotations-注解"><a href="#Annotations-注解" class="headerlink" title="Annotations(注解)"></a>Annotations(注解)</h3><p>在Java8中注解是可以重复的，让我们深入到一个示例中。</p><p>首先，我们定义了一个包装的注解，它拥有一个返回值为数组类型的方法Hint：</p><pre class=" language-java"><code class="language-java">@<span class="token keyword">interface</span> <span class="token class-name">Hints</span> <span class="token punctuation">{</span>    Hint<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>Hints<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">Hint</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Java8使我们能够使用相同类型的多个注解，通过<code>@Repeatable</code>声明注解。</p><h5 id="变体1：使用注解容器（老方法）"><a href="#变体1：使用注解容器（老方法）" class="headerlink" title="变体1：使用注解容器（老方法）"></a>变体1：使用注解容器（老方法）</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Hints</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Hint</span><span class="token punctuation">(</span><span class="token string">"hint1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Hint</span><span class="token punctuation">(</span><span class="token string">"hint2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h5 id="变体2：使用可重复注解（新方法）"><a href="#变体2：使用可重复注解（新方法）" class="headerlink" title="变体2：使用可重复注解（新方法）"></a>变体2：使用可重复注解（新方法）</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Hint</span><span class="token punctuation">(</span><span class="token string">"hint1"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Hint</span><span class="token punctuation">(</span><span class="token string">"hint2"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>使用变体2隐式编译器隐式地设置了<code>@Hints</code>注解。这对于通过反射来读取注解信息是非常重要的。</p><pre class=" language-java"><code class="language-java">Hint hint <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Hint<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// null</span>Hints hints1 <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Hints<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hints1<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>Hint<span class="token punctuation">[</span><span class="token punctuation">]</span> hints2 <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotationsByType</span><span class="token punctuation">(</span>Hint<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hints2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 2</span></code></pre><p>虽然在<code>Person</code>中从未定义<code>@Hints</code>注解，它仍然可读通过<code>getAnnotation(Hints.class)</code>读取。并且，getAnnotationsByType方法会更方便，因为它赋予了所有@Hints注解标注的方法直接的访问权限。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE_PARAMETER<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE_USE<span class="token punctuation">}</span><span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>欢迎Star我的开源Web框架Blade：<a href="http://github.com/biezhi/blade" target="_blank" rel="noopener">http://github.com/biezhi/blade</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot基础</title>
      <link href="/2018/11/25/springboot-ji-chu/"/>
      <url>/2018/11/25/springboot-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h2><ol><li>能够理解Spring的优缺点</li><li>能够理解SpringBoot的特点</li><li>能够理解SpringBoot的核心功能</li><li>能够搭建SpringBoot的环境</li><li>能够完成application.properties配置文件的配置</li><li>能够完成application.yml配置文件的配置</li><li>能够使用SpringBoot集成Mybatis</li><li>能够使用SpringBoot集成Junit</li><li>能够使用SpringBoot集成SpringData JPA</li></ol><h1 id="一、SpringBoot简介"><a href="#一、SpringBoot简介" class="headerlink" title="一、SpringBoot简介"></a>一、SpringBoot简介</h1><h2 id="1-1-原有Spring优缺点分析"><a href="#1-1-原有Spring优缺点分析" class="headerlink" title="1.1  原有Spring优缺点分析"></a>1.1  原有Spring优缺点分析</h2><h3 id="1-1-1-Spring的优点分析"><a href="#1-1-1-Spring的优点分析" class="headerlink" title="1.1.1 Spring的优点分析"></a>1.1.1 Spring的优点分析</h3><p>Spring是Java企业版（Java Enterprise Edition，JEE，也称J2EE）的轻量级代替品。无需开发重量级的Enterprise JavaBean（EJB），Spring为企业级Java开发提供了一种相对简单的方法，通过依赖注入和面向切面编程，用简单的Java对象（Plain Old Java Object，POJO）实现了EJB的功能。</p><h3 id="1-1-2-Spring的缺点分析"><a href="#1-1-2-Spring的缺点分析" class="headerlink" title="1.1.2 Spring的缺点分析"></a>1.1.2 Spring的缺点分析</h3><p>虽然Spring的组件代码是轻量级的，但它的配置却是重量级的。一开始，Spring用XML配置，而且是很多XML配置。Spring 2.5引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式XML配置。Spring 3.0引入了基于Java的配置，这是一种类型安全的可重构配置方式，可以代替XML。</p><p>所有这些配置都代表了开发时的损耗。因为在思考Spring特性配置和解决业务问题之间需要进行思维切换，所以编写配置挤占了编写应用程序逻辑的时间。和所有框架一样，Spring实用，但与此同时它要求的回报也不少。</p><p>除此之外，项目的依赖管理也是一件耗时耗力的事情。在环境搭建时，需要分析要导入哪些库的坐标，而且还需要分析导入与之有依赖关系的其他库的坐标，一旦选错了依赖的版本，随之而来的不兼容问题就会严重阻碍项目的开发进度。</p><h2 id="1-2-SpringBoot的概述"><a href="#1-2-SpringBoot的概述" class="headerlink" title="1.2 SpringBoot的概述"></a>1.2 SpringBoot的概述</h2><h3 id="1-2-1-SpringBoot解决上述Spring的缺点"><a href="#1-2-1-SpringBoot解决上述Spring的缺点" class="headerlink" title="1.2.1 SpringBoot解决上述Spring的缺点"></a>1.2.1 SpringBoot解决上述Spring的缺点</h3><p>SpringBoot对上述Spring的缺点进行的改善和优化，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上缩短了项目周期。</p><h3 id="1-2-2-SpringBoot的特点"><a href="#1-2-2-SpringBoot的特点" class="headerlink" title="1.2.2 SpringBoot的特点"></a>1.2.2 SpringBoot的特点</h3><ul><li>为基于Spring的开发提供更快的入门体验</li><li>开箱即用，没有代码生成，也无需XML配置。同时也可以修改默认值来满足特定的需求</li><li>提供了一些大型项目中常见的非功能性特性，如嵌入式服务器、安全、指标，健康检测、外部配置等</li><li>SpringBoot不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式</li></ul><h3 id="1-2-3-SpringBoot的核心功能"><a href="#1-2-3-SpringBoot的核心功能" class="headerlink" title="1.2.3 SpringBoot的核心功能"></a>1.2.3 SpringBoot的核心功能</h3><ul><li><p>起步依赖</p><p>起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。</p><p>简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。</p></li><li><p>自动配置</p><p>Spring Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定Spring配置应该用哪个，不该用哪个。该过程是Spring自动完成的。</p></li></ul><p>​    注意：起步依赖和自动配置的原理剖析会在第三章《SpringBoot原理分析》进行详细讲解</p><h1 id="二、SpringBoot快速入门"><a href="#二、SpringBoot快速入门" class="headerlink" title="二、SpringBoot快速入门"></a>二、SpringBoot快速入门</h1><h2 id="2-1-代码实现"><a href="#2-1-代码实现" class="headerlink" title="2.1 代码实现"></a>2.1 代码实现</h2><h3 id="2-1-1-创建Maven工程"><a href="#2-1-1-创建Maven工程" class="headerlink" title="2.1.1 创建Maven工程"></a>2.1.1 创建Maven工程</h3><p>使用idea工具创建一个maven工程，该工程为普通的java工程即可</p><p><img src="/2018/11/25/springboot-ji-chu/img/1.png" alt=""></p><p><img src="/2018/11/25/springboot-ji-chu/img/2.png" alt=""></p><p><img src="/2018/11/25/springboot-ji-chu/img/3.png" alt=""></p><p><img src="/2018/11/25/springboot-ji-chu/img/4.png" alt=""></p><h3 id="2-1-2-添加SpringBoot的起步依赖"><a href="#2-1-2-添加SpringBoot的起步依赖" class="headerlink" title="2.1.2 添加SpringBoot的起步依赖"></a>2.1.2 添加SpringBoot的起步依赖</h3><p>SpringBoot要求，项目要继承SpringBoot的起步依赖spring-boot-starter-parent</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><p>SpringBoot要集成SpringMVC进行Controller的开发，所以项目要导入web的启动依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="2-1-3-编写SpringBoot引导类"><a href="#2-1-3-编写SpringBoot引导类" class="headerlink" title="2.1.3 编写SpringBoot引导类"></a>2.1.3 编写SpringBoot引导类</h3><p>要通过SpringBoot提供的引导类起步SpringBoot才可以进行访问</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySpringBootApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MySpringBootApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-1-4-编写Controller"><a href="#2-1-4-编写Controller" class="headerlink" title="2.1.4 编写Controller"></a>2.1.4 编写Controller</h3><p>在引导类MySpringBootApplication同级包或者子级包中创建QuickStartController</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickStartController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"springboot 访问成功!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-1-5-测试"><a href="#2-1-5-测试" class="headerlink" title="2.1.5 测试"></a>2.1.5 测试</h3><p>执行SpringBoot起步类的主方法，控制台打印日志如下：</p><pre><code>.   ____          _            __ _ _ /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  &#39;  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::        (v2.0.1.RELEASE)2018-05-08 14:29:59.714  INFO 5672 --- [           main] com.itheima.MySpringBootApplication      : Starting MySpringBootApplication on DESKTOP-RRUNFUH with PID 5672 (C:\Users\muzimoo\IdeaProjects\IdeaTest\springboot_quick\target\classes started by muzimoo in C:\Users\muzimoo\IdeaProjects\IdeaTest)... ... ...o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2018-05-08 14:30:03.126  INFO 5672 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup2018-05-08 14:30:03.196  INFO 5672 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;2018-05-08 14:30:03.206  INFO 5672 --- [           main] com.itheima.MySpringBootApplication      : Started MySpringBootApplication in 4.252 seconds (JVM running for 5.583)</code></pre><p>通过日志发现，Tomcat started on port(s): 8080 (http) with context path ‘’</p><p>tomcat已经起步，端口监听8080，web应用的虚拟工程名称为空</p><p>打开浏览器访问url地址为：<a href="http://localhost:8080/quick" target="_blank" rel="noopener">http://localhost:8080/quick</a></p><p><img src="/2018/11/25/springboot-ji-chu/img/5.png" alt=""></p><h2 id="2-2-快速入门解析"><a href="#2-2-快速入门解析" class="headerlink" title="2.2 快速入门解析"></a>2.2 快速入门解析</h2><h3 id="2-2-2-SpringBoot代码解析"><a href="#2-2-2-SpringBoot代码解析" class="headerlink" title="2.2.2 SpringBoot代码解析"></a>2.2.2 SpringBoot代码解析</h3><ul><li>@SpringBootApplication：标注SpringBoot的启动类，该注解具备多种功能（后面详细剖析）</li><li>SpringApplication.run(MySpringBootApplication.class) 代表运行SpringBoot的启动类，参数为SpringBoot启动类的字节码对象</li></ul><h3 id="2-2-3-SpringBoot工程热部署"><a href="#2-2-3-SpringBoot工程热部署" class="headerlink" title="2.2.3 SpringBoot工程热部署"></a>2.2.3 SpringBoot工程热部署</h3><p>我们在开发中反复修改类、页面等资源，每次修改后都是需要重新启动才生效，这样每次启动都很麻烦，浪费了大量的时间，我们可以在修改代码后不重启就能生效，在 pom.xml 中添加如下配置就可以实现这样的功能，我们称之为热部署。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--热部署配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>注意：IDEA进行SpringBoot热部署失败原因</p><p>出现这种情况，并不是热部署配置问题，其根本原因是因为Intellij IEDA默认情况下不会自动编译，需要对IDEA进行自动编译的设置，如下：</p><p><img src="/2018/11/25/springboot-ji-chu/img/19.png" alt=""></p><p>然后 Shift+Ctrl+Alt+/，选择Registry</p><p><img src="/2018/11/25/springboot-ji-chu/img/20.png" alt=""></p><h3 id="2-2-4-使用idea快速创建SpringBoot项目"><a href="#2-2-4-使用idea快速创建SpringBoot项目" class="headerlink" title="2.2.4 使用idea快速创建SpringBoot项目"></a>2.2.4 使用idea快速创建SpringBoot项目</h3><p><img src="/2018/11/25/springboot-ji-chu/img/6.png" alt=""></p><p><img src="/2018/11/25/springboot-ji-chu/img/7.png" alt=""></p><p><img src="/2018/11/25/springboot-ji-chu/img/8.png" alt=""></p><p><img src="/2018/11/25/springboot-ji-chu/img/9.png" alt=""></p><p><img src="/2018/11/25/springboot-ji-chu/img/10.png" alt=""></p><p>通过idea快速创建的SpringBoot项目的pom.xml中已经导入了我们选择的web的起步依赖的坐标</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springboot_quick2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>springboot_quick2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>可以使用快速入门的方式创建Controller进行访问，此处不再赘述</p><h1 id="三、SpringBoot原理分析"><a href="#三、SpringBoot原理分析" class="headerlink" title="三、SpringBoot原理分析"></a>三、SpringBoot原理分析</h1><h2 id="3-1-起步依赖原理分析"><a href="#3-1-起步依赖原理分析" class="headerlink" title="3.1 起步依赖原理分析"></a>3.1 起步依赖原理分析</h2><h3 id="3-1-1-分析spring-boot-starter-parent"><a href="#3-1-1-分析spring-boot-starter-parent" class="headerlink" title="3.1.1 分析spring-boot-starter-parent"></a>3.1.1 分析spring-boot-starter-parent</h3><p>按住Ctrl点击pom.xml中的spring-boot-starter-parent，跳转到了spring-boot-starter-parent的pom.xml，xml配置如下（只摘抄了部分重点配置）：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../../spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><p>按住Ctrl点击pom.xml中的spring-boot-starter-dependencies，跳转到了spring-boot-starter-dependencies的pom.xml，xml配置如下（只摘抄了部分重点配置）：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activemq.version</span><span class="token punctuation">></span></span>5.15.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activemq.version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>antlr2.version</span><span class="token punctuation">></span></span>2.7.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>antlr2.version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appengine-sdk.version</span><span class="token punctuation">></span></span>1.9.63<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appengine-sdk.version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artemis.version</span><span class="token punctuation">></span></span>2.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artemis.version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aspectj.version</span><span class="token punctuation">></span></span>1.8.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aspectj.version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assertj.version</span><span class="token punctuation">></span></span>3.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>assertj.version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>atomikos.version</span><span class="token punctuation">></span></span>4.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>atomikos.version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bitronix.version</span><span class="token punctuation">></span></span>2.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bitronix.version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build-helper-maven-plugin.version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build-helper-maven-plugin.version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>byte-buddy.version</span><span class="token punctuation">></span></span>1.7.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>byte-buddy.version</span><span class="token punctuation">></span></span>      ... ... ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>          ... ... ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jetbrains.kotlin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kotlin-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${kotlin.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq-codegen-maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${jooq.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>              ... ... ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>从上面的spring-boot-starter-dependencies的pom.xml中我们可以发现，一部分坐标的版本、依赖管理、插件管理已经定义好，所以我们的SpringBoot工程继承spring-boot-starter-parent后已经具备版本锁定等配置了。所以起步依赖的作用就是进行依赖的传递。</p><h3 id="3-1-2-分析spring-boot-starter-web"><a href="#3-1-2-分析spring-boot-starter-web" class="headerlink" title="3.1.2 分析spring-boot-starter-web"></a>3.1.2 分析spring-boot-starter-web</h3><p>按住Ctrl点击pom.xml中的spring-boot-starter-web，跳转到了spring-boot-starter-web的pom.xml，xml配置如下（只摘抄了部分重点配置）：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starters<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Spring Boot Web Starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.0.9.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>从上面的spring-boot-starter-web的pom.xml中我们可以发现，spring-boot-starter-web就是将web开发要使用的spring-web、spring-webmvc等坐标进行了“打包”，这样我们的工程只要引入spring-boot-starter-web起步依赖的坐标就可以进行web开发了，同样体现了依赖传递的作用。</p><h2 id="3-2-自动配置原理解析"><a href="#3-2-自动配置原理解析" class="headerlink" title="3.2 自动配置原理解析"></a>3.2 自动配置原理解析</h2><p>按住Ctrl点击查看启动类MySpringBootApplication上的注解@SpringBootApplication</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySpringBootApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MySpringBootApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注解@SpringBootApplication的源码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Exclude specific auto-configuration classes such that they will never be applied.     * @return the classes to exclude     */</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> EnableAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>其中，</p><p>@SpringBootConfiguration：等同与@Configuration，既标注该类是Spring的一个配置类</p><p>@EnableAutoConfiguration：SpringBoot自动配置功能开启</p><p>按住Ctrl点击查看注解@EnableAutoConfiguration</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>其中，@Import(AutoConfigurationImportSelector.class) 导入了AutoConfigurationImportSelector类</p><p>按住Ctrl点击查看AutoConfigurationImportSelector源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span>                                                                   attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>        configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>        configurations <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span>            AnnotationAttributes attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span>                <span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> configurations<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中，SpringFactoriesLoader.loadFactoryNames 方法的作用就是从META-INF/spring.factories文件中读取指定类对应的类名称列表 </p><p><img src="/2018/11/25/springboot-ji-chu/img/11.png" alt=""></p><p>spring.factories 文件中有关自动配置的配置信息如下：</p><pre><code>... ... ...org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\... ... ...</code></pre><p>上面配置文件存在大量的以Configuration为结尾的类名称，这些类就是存有自动配置信息的类，而SpringApplication在获取这些类名后再加载</p><p>我们以ServletWebServerFactoryAutoConfiguration为例来分析源码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>ServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ServletWebServerFactoryAutoConfiguration<span class="token punctuation">.</span>BeanPostProcessorsRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedTomcat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedJetty<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedUndertow<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletWebServerFactoryAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>其中，</p><p>@EnableConfigurationProperties(ServerProperties.class) 代表加载ServerProperties服务器配置属性类</p><p>进入ServerProperties.class源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"server"</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerProperties</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Server HTTP port.     */</span>    <span class="token keyword">private</span> Integer port<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Network address to which the server should bind.     */</span>    <span class="token keyword">private</span> InetAddress address<span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>其中，</p><p>prefix = “server” 表示SpringBoot配置文件中的前缀，SpringBoot会将配置文件中以server开始的属性映射到该类的字段中。映射关系如下：</p><p><img src="/2018/11/25/springboot-ji-chu/img/12.png" alt=""></p><h1 id="四、SpringBoot的配置文件"><a href="#四、SpringBoot的配置文件" class="headerlink" title="四、SpringBoot的配置文件"></a>四、SpringBoot的配置文件</h1><h2 id="4-1-SpringBoot配置文件类型"><a href="#4-1-SpringBoot配置文件类型" class="headerlink" title="4.1 SpringBoot配置文件类型"></a>4.1 SpringBoot配置文件类型</h2><h3 id="4-1-1-SpringBoot配置文件类型和作用"><a href="#4-1-1-SpringBoot配置文件类型和作用" class="headerlink" title="4.1.1 SpringBoot配置文件类型和作用"></a>4.1.1 SpringBoot配置文件类型和作用</h3><p>SpringBoot是基于约定的，所以很多配置都有默认值，但如果想使用自己的配置替换默认配置的话，就可以使用application.properties或者application.yml（application.yaml）进行配置。</p><p>SpringBoot默认会从Resources目录下加载application.properties或application.yml（application.yaml）文件</p><p>其中，application.properties文件是键值对类型的文件，之前一直在使用，所以此处不在对properties文件的格式进行阐述。除了properties文件外，SpringBoot还可以使用yml文件进行配置，下面对yml文件进行讲解。</p><h3 id="4-1-2-application-yml配置文件"><a href="#4-1-2-application-yml配置文件" class="headerlink" title="4.1.2 application.yml配置文件"></a>4.1.2 application.yml配置文件</h3><h4 id="4-1-2-1-yml配置文件简介"><a href="#4-1-2-1-yml配置文件简介" class="headerlink" title="4.1.2.1 yml配置文件简介"></a>4.1.2.1 yml配置文件简介</h4><p>YML文件格式是YAML (YAML Aint Markup Language)编写的文件格式，YAML是一种直观的能够被电脑识别的的数据数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入，比如： C/C++, Ruby, Python, Java, Perl, C#, PHP等。YML文件是以数据为核心的，比传统的xml方式更加简洁。</p><p>YML文件的扩展名可以使用.yml或者.yaml。</p><h4 id="4-1-2-2-yml配置文件的语法"><a href="#4-1-2-2-yml配置文件的语法" class="headerlink" title="4.1.2.2 yml配置文件的语法"></a>4.1.2.2 yml配置文件的语法</h4><h5 id="4-1-2-2-1-配置普通数据"><a href="#4-1-2-2-1-配置普通数据" class="headerlink" title="4.1.2.2.1 配置普通数据"></a>4.1.2.2.1 配置普通数据</h5><ul><li><p>语法： key: value</p></li><li><p>示例代码：</p></li><li><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> haohao</code></pre></li><li><p>注意：value之前有一个空格</p></li></ul><h5 id="4-1-2-2-2-配置对象数据"><a href="#4-1-2-2-2-配置对象数据" class="headerlink" title="4.1.2.2.2 配置对象数据"></a>4.1.2.2.2 配置对象数据</h5><ul><li><p>语法： </p><p>​    key: </p><p>​        key1: value1</p><p>​        key2: value2</p><p>​    或者：</p><p>​    key: {key1: value1,key2: value2}</p></li><li><p>示例代码：</p></li><li><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> haohao  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">31</span>  <span class="token key atrule">addr</span><span class="token punctuation">:</span> beijing<span class="token comment" spellcheck="true">#或者</span><span class="token key atrule">person</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> haohao<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">31</span><span class="token punctuation">,</span><span class="token key atrule">addr</span><span class="token punctuation">:</span> beijing<span class="token punctuation">}</span></code></pre></li><li><p>注意：key1前面的空格个数不限定，在yml语法中，相同缩进代表同一个级别</p></li></ul><h5 id="4-1-2-2-2-配置Map数据"><a href="#4-1-2-2-2-配置Map数据" class="headerlink" title="4.1.2.2.2 配置Map数据"></a>4.1.2.2.2 配置Map数据</h5><p>同上面的对象写法</p><h5 id="4-1-2-2-3-配置数组（List、Set）数据"><a href="#4-1-2-2-3-配置数组（List、Set）数据" class="headerlink" title="4.1.2.2.3 配置数组（List、Set）数据"></a>4.1.2.2.3 配置数组（List、Set）数据</h5><ul><li><p>语法： </p><p>​    key: </p><p>​        - value1</p><p>​        - value2</p><p>或者：</p><p>​    key: [value1,value2]</p></li><li><p>示例代码：</p></li><li><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">city</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> beijing  <span class="token punctuation">-</span> tianjin  <span class="token punctuation">-</span> shanghai  <span class="token punctuation">-</span> chongqing<span class="token comment" spellcheck="true">#或者</span><span class="token key atrule">city</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>beijing<span class="token punctuation">,</span>tianjin<span class="token punctuation">,</span>shanghai<span class="token punctuation">,</span>chongqing<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#集合中的元素是对象形式</span><span class="token key atrule">student</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> zhangsan    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token key atrule">score</span><span class="token punctuation">:</span> <span class="token number">100</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> lisi    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">28</span>    <span class="token key atrule">score</span><span class="token punctuation">:</span> <span class="token number">88</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> wangwu    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">38</span>    <span class="token key atrule">score</span><span class="token punctuation">:</span> <span class="token number">90</span></code></pre></li><li><p>注意：value1与之间的 - 之间存在一个空格</p></li></ul><h3 id="4-1-3-SpringBoot配置信息的查询"><a href="#4-1-3-SpringBoot配置信息的查询" class="headerlink" title="4.1.3 SpringBoot配置信息的查询"></a>4.1.3 SpringBoot配置信息的查询</h3><p>上面提及过，SpringBoot的配置文件，主要的目的就是对配置信息进行修改的，但在配置时的key从哪里去查询呢？我们可以查阅SpringBoot的官方文档</p><p>文档URL：<a href="https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties</a></p><p>常用的配置摘抄如下：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># QUARTZ SCHEDULER (QuartzProperties)</span><span class="token attr-name">spring.quartz.jdbc.initialize-schema</span><span class="token punctuation">=</span><span class="token attr-value">embedded # Database schema initialization mode.</span><span class="token attr-name">spring.quartz.jdbc.schema</span><span class="token punctuation">=</span><span class="token attr-value">classpath:org/quartz/impl/jdbcjobstore/tables_@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</span><span class="token attr-name">spring.quartz.job-store-type</span><span class="token punctuation">=</span><span class="token attr-value">memory # Quartz job store type.</span><span class="token attr-name">spring.quartz.properties.*</span><span class="token punctuation">=</span> <span class="token attr-value"># Additional Quartz Scheduler properties.</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># WEB PROPERTIES</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># EMBEDDED SERVER CONFIGURATION (ServerProperties)</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080 # Server HTTP port.</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span> <span class="token attr-value"># Context path of the application.</span><span class="token attr-name">server.servlet.path</span><span class="token punctuation">=</span><span class="token attr-value">/ # Path of the main dispatcher servlet.</span><span class="token comment" spellcheck="true"># HTTP encoding (HttpEncodingProperties)</span><span class="token attr-name">spring.http.encoding.charset</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8 # Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.</span><span class="token comment" spellcheck="true"># JACKSON (JacksonProperties)</span><span class="token attr-name">spring.jackson.date-format</span><span class="token punctuation">=</span> <span class="token attr-value"># Date format string or a fully-qualified date format class name. For instance, `yyyy-MM-dd HH:mm:ss`.</span><span class="token comment" spellcheck="true"># SPRING MVC (WebMvcProperties)</span><span class="token attr-name">spring.mvc.servlet.load-on-startup</span><span class="token punctuation">=</span><span class="token attr-value">-1 # Load on startup priority of the dispatcher servlet.</span><span class="token attr-name">spring.mvc.static-path-pattern</span><span class="token punctuation">=</span><span class="token attr-value">/** # Path pattern used for static resources.</span><span class="token attr-name">spring.mvc.view.prefix</span><span class="token punctuation">=</span> <span class="token attr-value"># Spring MVC view prefix.</span><span class="token attr-name">spring.mvc.view.suffix</span><span class="token punctuation">=</span> <span class="token attr-value"># Spring MVC view suffix.</span><span class="token comment" spellcheck="true"># DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span> <span class="token attr-value"># Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span> <span class="token attr-value"># Login password of the database.</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span> <span class="token attr-value"># JDBC URL of the database.</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span> <span class="token attr-value"># Login username of the database.</span><span class="token comment" spellcheck="true"># JEST (Elasticsearch HTTP client) (JestProperties)</span><span class="token attr-name">spring.elasticsearch.jest.password</span><span class="token punctuation">=</span> <span class="token attr-value"># Login password.</span><span class="token attr-name">spring.elasticsearch.jest.proxy.host</span><span class="token punctuation">=</span> <span class="token attr-value"># Proxy host the HTTP client should use.</span><span class="token attr-name">spring.elasticsearch.jest.proxy.port</span><span class="token punctuation">=</span> <span class="token attr-value"># Proxy port the HTTP client should use.</span><span class="token attr-name">spring.elasticsearch.jest.read-timeout</span><span class="token punctuation">=</span><span class="token attr-value">3s # Read timeout.</span><span class="token attr-name">spring.elasticsearch.jest.username</span><span class="token punctuation">=</span> <span class="token attr-value"># Login username.</span></code></pre><p>我们可以通过配置application.poperties 或者 application.yml 来修改SpringBoot的默认配置</p><p>例如：</p><p>application.properties文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8888</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">demo</span></code></pre><p>application.yml文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /demo</code></pre><h2 id="4-2-配置文件与配置类的属性映射方式"><a href="#4-2-配置文件与配置类的属性映射方式" class="headerlink" title="4.2 配置文件与配置类的属性映射方式"></a>4.2 配置文件与配置类的属性映射方式</h2><h3 id="4-2-1-使用注解-Value映射"><a href="#4-2-1-使用注解-Value映射" class="headerlink" title="4.2.1 使用注解@Value映射"></a>4.2.1 使用注解@Value映射</h3><p>我们可以通过@Value注解将配置文件中的值映射到一个Spring管理的Bean的字段上</p><p>例如：</p><p>application.properties配置如下：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">person</span><span class="token punctuation">:</span><span class="token attr-name">  name</span><span class="token punctuation">:</span> <span class="token attr-value">zhangsan</span><span class="token attr-name">  age</span><span class="token punctuation">:</span> <span class="token attr-value">18</span></code></pre><p>或者，application.yml配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zhangsan  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span></code></pre><p>实体Bean代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickStartController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${person.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${person.age}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"springboot 访问成功! name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>浏览器访问地址：<a href="http://localhost:8080/quick" target="_blank" rel="noopener">http://localhost:8080/quick</a> 结果如下：</p><p><img src="/2018/11/25/springboot-ji-chu/img/13.png" alt=""></p><h3 id="4-2-2-使用注解-ConfigurationProperties映射"><a href="#4-2-2-使用注解-ConfigurationProperties映射" class="headerlink" title="4.2.2 使用注解@ConfigurationProperties映射"></a>4.2.2 使用注解@ConfigurationProperties映射</h3><p>通过注解@ConfigurationProperties(prefix=”配置文件中的key的前缀”)可以将配置文件中的配置自动与实体进行映射</p><p>application.properties配置如下：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">person</span><span class="token punctuation">:</span><span class="token attr-name">  name</span><span class="token punctuation">:</span> <span class="token attr-value">zhangsan</span><span class="token attr-name">  age</span><span class="token punctuation">:</span> <span class="token attr-value">18</span></code></pre><p>或者，application.yml配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zhangsan  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span></code></pre><p>实体Bean代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickStartController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"springboot 访问成功! name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>浏览器访问地址：<a href="http://localhost:8080/quick" target="_blank" rel="noopener">http://localhost:8080/quick</a> 结果如下：</p><p><img src="/2018/11/25/springboot-ji-chu/img/13.png" alt=""></p><p>注意：使用@ConfigurationProperties方式可以进行配置文件与实体字段的自动映射，但需要字段必须提供set方法才可以，而使用@Value注解修饰的字段不需要提供set方法</p><h1 id="五、SpringBoot与整合其他技术"><a href="#五、SpringBoot与整合其他技术" class="headerlink" title="五、SpringBoot与整合其他技术"></a>五、SpringBoot与整合其他技术</h1><h2 id="5-1-SpringBoot整合Mybatis"><a href="#5-1-SpringBoot整合Mybatis" class="headerlink" title="5.1 SpringBoot整合Mybatis"></a>5.1 SpringBoot整合Mybatis</h2><h3 id="5-1-1-添加Mybatis的起步依赖"><a href="#5-1-1-添加Mybatis的起步依赖" class="headerlink" title="5.1.1 添加Mybatis的起步依赖"></a>5.1.1 添加Mybatis的起步依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--mybatis起步依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="5-1-2-添加数据库驱动坐标"><a href="#5-1-2-添加数据库驱动坐标" class="headerlink" title="5.1.2 添加数据库驱动坐标"></a>5.1.2 添加数据库驱动坐标</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- MySQL连接驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="5-1-3-添加数据库连接信息"><a href="#5-1-3-添加数据库连接信息" class="headerlink" title="5.1.3 添加数据库连接信息"></a>5.1.3 添加数据库连接信息</h3><p>在application.properties中添加数据量的连接信息</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#DB Configuration:</span><span class="token attr-name">spring.datasource.driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span></code></pre><h3 id="5-1-4-创建user表"><a href="#5-1-4-创建user表" class="headerlink" title="5.1.4 创建user表"></a>5.1.4 创建user表</h3><p>在test数据库中创建user表</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Table structure for `user`</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">10</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Records of user</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-1-5-创建实体Bean"><a href="#5-1-5-创建实体Bean" class="headerlink" title="5.1.5 创建实体Bean"></a>5.1.5 创建实体Bean</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 主键</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用户名</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 密码</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此处省略getter和setter方法 .. ..</span><span class="token punctuation">}</span></code></pre><h3 id="5-1-6-编写Mapper"><a href="#5-1-6-编写Mapper" class="headerlink" title="5.1.6 编写Mapper"></a>5.1.6 编写Mapper</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意：@Mapper标记该类是一个mybatis的mapper接口，可以被spring boot自动扫描到spring上下文中</p><h3 id="5-1-7-配置Mapper映射文件"><a href="#5-1-7-配置Mapper映射文件" class="headerlink" title="5.1.7 配置Mapper映射文件"></a>5.1.7 配置Mapper映射文件</h3><p>在src\main\resources\mapper路径下加入UserMapper.xml配置文件”</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h3 id="5-1-8-在application-properties中添加mybatis的信息"><a href="#5-1-8-在application-properties中添加mybatis的信息" class="headerlink" title="5.1.8 在application.properties中添加mybatis的信息"></a>5.1.8 在application.properties中添加mybatis的信息</h3><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#spring集成Mybatis环境</span><span class="token comment" spellcheck="true">#pojo别名扫描包</span><span class="token attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token attr-value">com.itheima.domain</span><span class="token comment" spellcheck="true">#加载Mybatis映射文件</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mapper/*Mapper.xml</span></code></pre><h3 id="5-1-9-编写测试Controller"><a href="#5-1-9-编写测试Controller" class="headerlink" title="5.1.9 编写测试Controller"></a>5.1.9 编写测试Controller</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/queryUser"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-1-10-测试"><a href="#5-1-10-测试" class="headerlink" title="5.1.10 测试"></a>5.1.10 测试</h3><p><img src="/2018/11/25/springboot-ji-chu/img/14.png" alt=""></p><h2 id="5-2-SpringBoot整合Junit"><a href="#5-2-SpringBoot整合Junit" class="headerlink" title="5.2 SpringBoot整合Junit"></a>5.2 SpringBoot整合Junit</h2><h3 id="5-2-1-添加Junit的起步依赖"><a href="#5-2-1-添加Junit的起步依赖" class="headerlink" title="5.2.1 添加Junit的起步依赖"></a>5.2.1 添加Junit的起步依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--测试的起步依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="5-2-2-编写测试类"><a href="#5-2-2-编写测试类" class="headerlink" title="5.2.2 编写测试类"></a>5.2.2 编写测试类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>MySpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> MySpringBootApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中，</p><p>SpringRunner继承自SpringJUnit4ClassRunner，使用哪一个Spring提供的测试测试引擎都可以</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SpringRunner</span> <span class="token keyword">extends</span> <span class="token class-name">SpringJUnit4ClassRunner</span> </code></pre><p>@SpringBootTest的属性指定的是引导类的字节码对象</p><h3 id="5-2-3-控制台打印信息"><a href="#5-2-3-控制台打印信息" class="headerlink" title="5.2.3 控制台打印信息"></a>5.2.3 控制台打印信息</h3><p><img src="/2018/11/25/springboot-ji-chu/img/15.png" alt=""></p><h2 id="5-3-SpringBoot整合Spring-Data-JPA"><a href="#5-3-SpringBoot整合Spring-Data-JPA" class="headerlink" title="5.3 SpringBoot整合Spring Data JPA"></a>5.3 SpringBoot整合Spring Data JPA</h2><h3 id="5-3-1-添加Spring-Data-JPA的起步依赖"><a href="#5-3-1-添加Spring-Data-JPA的起步依赖" class="headerlink" title="5.3.1 添加Spring Data JPA的起步依赖"></a>5.3.1 添加Spring Data JPA的起步依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- springBoot JPA的起步依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="5-3-2-添加数据库驱动依赖"><a href="#5-3-2-添加数据库驱动依赖" class="headerlink" title="5.3.2 添加数据库驱动依赖"></a>5.3.2 添加数据库驱动依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- MySQL连接驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="5-3-3-在application-properties中配置数据库和jpa的相关属性"><a href="#5-3-3-在application-properties中配置数据库和jpa的相关属性" class="headerlink" title="5.3.3 在application.properties中配置数据库和jpa的相关属性"></a>5.3.3 在application.properties中配置数据库和jpa的相关属性</h3><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#DB Configuration:</span><span class="token attr-name">spring.datasource.driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token comment" spellcheck="true">#JPA Configuration:</span><span class="token attr-name">spring.jpa.database</span><span class="token punctuation">=</span><span class="token attr-value">MySQL</span><span class="token attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.jpa.generate-ddl</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token attr-value">update</span><span class="token attr-name">spring.jpa.hibernate.naming_strategy</span><span class="token punctuation">=</span><span class="token attr-value">org.hibernate.cfg.ImprovedNamingStrategy</span></code></pre><h3 id="5-3-4-创建实体配置实体"><a href="#5-3-4-创建实体配置实体" class="headerlink" title="5.3.4 创建实体配置实体"></a>5.3.4 创建实体配置实体</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 主键</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用户名</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 密码</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此处省略setter和getter方法... ...</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-5-编写UserRepository"><a href="#5-3-5-编写UserRepository" class="headerlink" title="5.3.5 编写UserRepository"></a>5.3.5 编写UserRepository</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span>Long<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-6-编写测试类"><a href="#5-3-6-编写测试类" class="headerlink" title="5.3.6 编写测试类"></a>5.3.6 编写测试类</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes<span class="token operator">=</span>MySpringBootApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JpaTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-7-控制台打印信息"><a href="#5-3-7-控制台打印信息" class="headerlink" title="5.3.7 控制台打印信息"></a>5.3.7 控制台打印信息</h3><p><img src="/2018/11/25/springboot-ji-chu/img/16.png" alt=""></p><p>注意：如果是jdk9，执行报错如下：</p><p><img src="/2018/11/25/springboot-ji-chu/img/17.png" alt=""></p><p>原因：jdk缺少相应的jar</p><p>解决方案：手动导入对应的maven坐标，如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--jdk9需要导入如下坐标--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="5-4-SpringBoot整合Redis"><a href="#5-4-SpringBoot整合Redis" class="headerlink" title="5.4 SpringBoot整合Redis"></a>5.4 SpringBoot整合Redis</h2><h3 id="5-4-1-添加redis的起步依赖"><a href="#5-4-1-添加redis的起步依赖" class="headerlink" title="5.4.1 添加redis的起步依赖"></a>5.4.1 添加redis的起步依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置使用redis启动器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="5-4-2-配置redis的连接信息"><a href="#5-4-2-配置redis的连接信息" class="headerlink" title="5.4.2 配置redis的连接信息"></a>5.4.2 配置redis的连接信息</h3><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#Redis</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span></code></pre><h3 id="5-4-3-注入RedisTemplate测试redis操作"><a href="#5-4-3-注入RedisTemplate测试redis操作" class="headerlink" title="5.4.3 注入RedisTemplate测试redis操作"></a>5.4.3 注入RedisTemplate测试redis操作</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> SpringbootJpaApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从redis缓存中获得指定的数据</span>        String userListData <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">boundValueOps</span><span class="token punctuation">(</span><span class="token string">"user.findAll"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果redis中没有数据的话</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null<span class="token operator">==</span>userListData<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//查询数据库获得数据</span>            List<span class="token operator">&lt;</span>User<span class="token operator">></span> all <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//转换成json格式字符串</span>            ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            userListData <span class="token operator">=</span> om<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将数据存储到redis中，下次在查询直接从redis中获得数据，不用在查询数据库</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">boundValueOps</span><span class="token punctuation">(</span><span class="token string">"user.findAll"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userListData<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============从数据库获得数据==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============从redis缓存中获得数据==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userListData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Docker环境下的前后端分离部署与运维》课程脚本</title>
      <link href="/2018/08/14/docker-qian-hou-duan-fen-chi/"/>
      <url>/2018/08/14/docker-qian-hou-duan-fen-chi/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker虚拟机常用命令"><a href="#Docker虚拟机常用命令" class="headerlink" title="Docker虚拟机常用命令"></a>Docker虚拟机常用命令</h2><ol><li><p>先更新软件包</p><pre class=" language-shell"><code class="language-shell">yum -y update</code></pre></li><li><p>安装Docker虚拟机</p><pre class=" language-shell"><code class="language-shell">yum install -y docker</code></pre></li><li><p>运行、重启、关闭Docker虚拟机</p><pre class=" language-shell"><code class="language-shell">service docker startservice docker startservice docker stop</code></pre></li><li><p>搜索镜像</p><pre class=" language-shell"><code class="language-shell">docker search 镜像名称</code></pre></li><li><p>下载镜像</p><pre class=" language-shell"><code class="language-shell">docker pull 镜像名称</code></pre></li><li><p>查看镜像</p><pre class=" language-shell"><code class="language-shell">docker images</code></pre></li><li><p>删除镜像</p><pre class=" language-shell"><code class="language-shell">docker rmi 镜像名称</code></pre></li><li><p>运行容器</p><pre class=" language-shell"><code class="language-shell">docker run 启动参数  镜像名称</code></pre></li><li><p>查看容器列表</p><pre class=" language-shell"><code class="language-shell">docker ps -a</code></pre></li><li><p>停止、挂起、恢复容器</p><pre class=" language-shell"><code class="language-shell">docker stop 容器IDdocker pause 容器IDdocker unpase 容器ID</code></pre></li><li><p>查看容器信息</p><pre class=" language-shell"><code class="language-shell">docker inspect 容器ID</code></pre></li><li><p>删除容器</p><pre class=" language-shell"><code class="language-shell">docker rm 容器ID</code></pre></li><li><p>数据卷管理</p><pre class=" language-shell"><code class="language-shell">docker volume create 数据卷名称  #创建数据卷docker volume rm 数据卷名称  #删除数据卷docker volume inspect 数据卷名称  #查看数据卷</code></pre></li><li><p>网络管理</p><pre class=" language-shell"><code class="language-shell">docker network ls 查看网络信息docker network create --subnet=网段 网络名称docker network rm 网络名称</code></pre></li><li><p>避免VM虚拟机挂起恢复之后，Docker虚拟机断网</p><pre class=" language-shell"><code class="language-shell">vi /etc/sysctl.conf</code></pre></li></ol><pre><code>文件中添加`net.ipv4.ip_forward=1`这个配置​```shell#重启网络服务systemctl  restart network​```</code></pre><h2 id="安装PXC集群，负载均衡，双机热备"><a href="#安装PXC集群，负载均衡，双机热备" class="headerlink" title="安装PXC集群，负载均衡，双机热备"></a>安装PXC集群，负载均衡，双机热备</h2><ol><li><p>安装PXC镜像</p><pre class=" language-shell"><code class="language-shell">docker pull percona/percona-xtradb-cluster</code></pre></li><li><p>为PXC镜像改名</p><pre class=" language-shell"><code class="language-shell">docker tag percona/percona-xtradb-cluster pxc</code></pre></li><li><p>创建net1网段</p><pre class=" language-shell"><code class="language-shell">docker network create --subnet=172.18.0.0/16 net1</code></pre></li><li><p>创建5个数据卷</p><pre class=" language-shell"><code class="language-shell">docker volume create --name v1docker volume create --name v2docker volume create --name v3docker volume create --name v4docker volume create --name v5</code></pre></li><li><p>创建备份数据卷（用于热备份数据）</p><pre class=" language-shell"><code class="language-shell">docker volume create --name backup</code></pre></li><li><p>创建5节点的PXC集群</p><p>注意，每个MySQL容器创建之后，因为要执行PXC的初始化和加入集群等工作，耐心等待1分钟左右再用客户端连接MySQL。另外，必须第1个MySQL节点启动成功，用MySQL客户端能连接上之后，再去创建其他MySQL节点。</p><pre class=" language-shell"><code class="language-shell">#创建第1个MySQL节点docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root -v v1:/var/lib/mysql -v backup:/data --privileged --name=node1 --net=net1 --ip 172.18.0.2 pxc#创建第2个MySQL节点docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root -e CLUSTER_JOIN=node1 -v v2:/var/lib/mysql -v backup:/data --privileged --name=node2 --net=net1 --ip 172.18.0.3 pxc#创建第3个MySQL节点docker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root -e CLUSTER_JOIN=node1 -v v3:/var/lib/mysql --privileged --name=node3 --net=net1 --ip 172.18.0.4 pxc#创建第4个MySQL节点docker run -d -p 3309:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root -e CLUSTER_JOIN=node1 -v v4:/var/lib/mysql --privileged --name=node4 --net=net1 --ip 172.18.0.5 pxc#创建第5个MySQL节点docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root -e CLUSTER_JOIN=node1 -v v5:/var/lib/mysql -v backup:/data --privileged --name=node5 --net=net1 --ip 172.18.0.6 pxc</code></pre></li><li><p>安装Haproxy镜像</p><pre class=" language-shell"><code class="language-shell">docker pull haproxy</code></pre></li><li><p>宿主机上编写Haproxy配置文件</p><pre class=" language-shell"><code class="language-shell">vi /home/soft/haproxy.cfg</code></pre><p>配置文件如下：</p><pre class=" language-properties"><code class="language-properties">global<span class="token comment" spellcheck="true">    #工作目录</span><span class="token attr-name">    chroot</span> <span class="token attr-value">/usr/local/etc/haproxy</span><span class="token comment" spellcheck="true">    #日志文件，使用rsyslog服务中local5日志设备（/var/log/local5），等级info</span><span class="token attr-name">    log</span> <span class="token attr-value">127.0.0.1 local5 info</span><span class="token comment" spellcheck="true">    #守护进程运行</span>    daemondefaults<span class="token attr-name">    log</span> <span class="token attr-value">   global</span><span class="token attr-name">    mode</span> <span class="token attr-value">   http</span><span class="token comment" spellcheck="true">    #日志格式</span><span class="token attr-name">    option</span> <span class="token attr-value">   httplog</span><span class="token comment" spellcheck="true">    #日志中不记录负载均衡的心跳检测记录</span><span class="token attr-name">    option</span> <span class="token attr-value">   dontlognull</span><span class="token comment" spellcheck="true">    #连接超时（毫秒）</span><span class="token attr-name">    timeout</span> <span class="token attr-value">connect 5000</span><span class="token comment" spellcheck="true">    #客户端超时（毫秒）</span><span class="token attr-name">    timeout</span> <span class="token attr-value">client  50000</span><span class="token comment" spellcheck="true">    #服务器超时（毫秒）</span><span class="token attr-name">    timeout</span> <span class="token attr-value">server  50000</span><span class="token comment" spellcheck="true">#监控界面    </span><span class="token attr-name">listen</span> <span class="token attr-value"> admin_stats</span><span class="token comment" spellcheck="true">    #监控界面的访问的IP和端口</span><span class="token attr-name">    bind</span> <span class="token attr-value"> 0.0.0.0:8888</span><span class="token comment" spellcheck="true">    #访问协议</span><span class="token attr-name">    mode</span> <span class="token attr-value">       http</span><span class="token comment" spellcheck="true">    #URI相对地址</span><span class="token attr-name">    stats</span> <span class="token attr-value">uri   /dbs</span><span class="token comment" spellcheck="true">    #统计报告格式</span><span class="token attr-name">    stats</span> <span class="token attr-value">realm     Global\ statistics</span><span class="token comment" spellcheck="true">    #登陆帐户信息</span><span class="token attr-name">    stats</span> <span class="token attr-value">auth  admin:abc123456</span><span class="token comment" spellcheck="true">#数据库负载均衡</span><span class="token attr-name">listen</span> <span class="token attr-value"> proxy-mysql</span><span class="token comment" spellcheck="true">    #访问的IP和端口</span><span class="token attr-name">    bind</span> <span class="token attr-value"> 0.0.0.0:3306  </span><span class="token comment" spellcheck="true">    #网络协议</span><span class="token attr-name">    mode</span> <span class="token attr-value"> tcp</span><span class="token comment" spellcheck="true">    #负载均衡算法（轮询算法）</span><span class="token comment" spellcheck="true">    #轮询算法：roundrobin</span><span class="token comment" spellcheck="true">    #权重算法：static-rr</span><span class="token comment" spellcheck="true">    #最少连接算法：leastconn</span><span class="token comment" spellcheck="true">    #请求源IP算法：source </span><span class="token attr-name">    balance</span> <span class="token attr-value"> roundrobin</span><span class="token comment" spellcheck="true">    #日志格式</span><span class="token attr-name">    option</span> <span class="token attr-value"> tcplog</span><span class="token comment" spellcheck="true">    #在MySQL中创建一个没有权限的haproxy用户，密码为空。Haproxy使用这个账户对MySQL数据库心跳检测</span><span class="token attr-name">    option</span> <span class="token attr-value"> mysql-check user haproxy</span><span class="token attr-name">    server</span> <span class="token attr-value"> MySQL_1 172.18.0.2:3306 check weight 1 maxconn 2000  </span><span class="token attr-name">    server</span> <span class="token attr-value"> MySQL_2 172.18.0.3:3306 check weight 1 maxconn 2000  </span><span class="token attr-name">    server</span> <span class="token attr-value"> MySQL_3 172.18.0.4:3306 check weight 1 maxconn 2000 </span><span class="token attr-name">    server</span> <span class="token attr-value"> MySQL_4 172.18.0.5:3306 check weight 1 maxconn 2000</span><span class="token attr-name">    server</span> <span class="token attr-value"> MySQL_5 172.18.0.6:3306 check weight 1 maxconn 2000</span><span class="token comment" spellcheck="true">    #使用keepalive检测死链</span><span class="token attr-name">    option</span> <span class="token attr-value"> tcpka  </span></code></pre></li><li><p>创建两个Haproxy容器</p><pre class=" language-shell"><code class="language-shell">#创建第1个Haproxy负载均衡服务器docker run -it -d -p 4001:8888 -p 4002:3306 -v /home/soft/haproxy:/usr/local/etc/haproxy --name h1 --privileged --net=net1 --ip 172.18.0.7 haproxy#进入h1容器，启动Haproxydocker exec -it h1 bashhaproxy -f /usr/local/etc/haproxy/haproxy.cfg#创建第2个Haproxy负载均衡服务器docker run -it -d -p 4003:8888 -p 4004:3306 -v /home/soft/haproxy:/usr/local/etc/haproxy --name h2 --privileged --net=net1 --ip 172.18.0.8 haproxy#进入h2容器，启动Haproxydocker exec -it h2 bashhaproxy -f /usr/local/etc/haproxy/haproxy.cfg</code></pre></li><li><p>Haproxy容器内安装Keepalived，设置虚拟IP</p><pre class=" language-shell"><code class="language-shell">#进入h1容器docker exec -it h1 bash#更新软件包apt-get update#安装VIMapt-get install vim#安装Keepalivedapt-get install keepalived#编辑Keepalived配置文件（参考下方配置文件）vim /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start#宿主机执行ping命令ping 172.18.0.201</code></pre><p>配置文件内容如下：</p><pre><code>vrrp_instance  VI_1 {    state  MASTER    interface  eth0    virtual_router_id  51    priority  100    advert_int  1    authentication {        auth_type  PASS        auth_pass  123456    }    virtual_ipaddress {        172.18.0.201    }}</code></pre><pre class=" language-shell"><code class="language-shell">#进入h2容器docker exec -it h2 bash#更新软件包apt-get update#安装VIMapt-get install vim#安装Keepalivedapt-get install keepalived#编辑Keepalived配置文件vim /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start#宿主机执行ping命令ping 172.18.0.201</code></pre><p>配置文件内容如下：</p><pre class=" language-shell"><code class="language-shell">vrrp_instance  VI_1 {    state  MASTER    interface  eth0    virtual_router_id  51    priority  100    advert_int  1    authentication {        auth_type  PASS        auth_pass  123456    }    virtual_ipaddress {        172.18.0.201    }}</code></pre></li><li><p>宿主机安装Keepalived，实现双击热备</p><pre class=" language-shell"><code class="language-shell">#宿主机执行安装Keepalivedyum -y install keepalived#修改Keepalived配置文件vi /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start</code></pre><p>Keepalived配置文件如下：</p><pre class=" language-shell"><code class="language-shell">vrrp_instance VI_1 {    state MASTER    interface ens33    virtual_router_id 51    priority 100    advert_int 1    authentication {        auth_type PASS        auth_pass 1111    }    virtual_ipaddress {           192.168.99.150    }}virtual_server 192.168.99.150 8888 {    delay_loop 3    lb_algo rr     lb_kind NAT    persistence_timeout 50    protocol TCP    real_server 172.18.0.201 8888 {        weight 1    }}virtual_server 192.168.99.150 3306 {    delay_loop 3    lb_algo rr     lb_kind NAT    persistence_timeout 50    protocol TCP    real_server 172.18.0.201 3306 {        weight 1    }}</code></pre></li><li><p>热备份数据</p><pre class=" language-shell"><code class="language-shell">#进入node1容器docker exec -it node1 bash#更新软件包apt-get update#安装热备工具apt-get install percona-xtrabackup-24#全量热备innobackupex --user=root --password=abc123456 /data/backup/full</code></pre></li><li><p>冷还原数据<br>停止其余4个节点，并删除节点</p><pre class=" language-shell"><code class="language-shell">docker stop node2docker stop node3docker stop node4docker stop node5docker rm node2docker rm node3docker rm node4docker rm node5</code></pre><p>node1容器中删除MySQL的数据</p><pre class=" language-shell"><code class="language-shell">#删除数据rm -rf /var/lib/mysql/*#清空事务innobackupex --user=root --password=abc123456 --apply-back /data/backup/full/2018-04-15_05-09-07/#还原数据innobackupex --user=root --password=abc123456 --copy-back  /data/backup/full/2018-04-15_05-09-07/</code></pre><p>重新创建其余4个节点，组件PXC集群</p></li></ol><h2 id="安装Redis，配置RedisCluster集群"><a href="#安装Redis，配置RedisCluster集群" class="headerlink" title="安装Redis，配置RedisCluster集群"></a>安装Redis，配置RedisCluster集群</h2><ol><li><p>安装Redis镜像</p><pre class=" language-shell"><code class="language-shell">docker pull yyyyttttwwww/redis</code></pre></li><li><p>创建net2网段</p><pre class=" language-shell"><code class="language-shell">docker network create --subnet=172.19.0.0/16 net2</code></pre></li><li><p>创建6节点Redis容器</p><pre class=" language-shell"><code class="language-shell">docker run -it -d --name r1 -p 5001:6379 --net=net2 --ip 172.19.0.2 redis bashdocker run -it -d --name r2 -p 5002:6379 --net=net2 --ip 172.19.0.3 redis bashdocker run -it -d --name r3 -p 5003:6379 --net=net2 --ip 172.19.0.4 redis bashdocker run -it -d --name r4 -p 5004:6379 --net=net2 --ip 172.19.0.5 redis bashdocker run -it -d --name r5 -p 5005:6379 --net=net2 --ip 172.19.0.6 redis bash</code></pre></li><li><p>启动6节点Redis服务器</p><pre class=" language-shell"><code class="language-shell">#进入r1节点docker exec -it r1 bashcp /home/redis/redis.conf /usr/redis/redis.confcd /usr/redis/src./redis-server ../redis.conf#进入r2节点docker exec -it r2 bashcp /home/redis/redis.conf /usr/redis/redis.confcd /usr/redis/src./redis-server ../redis.conf#进入r3节点docker exec -it r3 bashcp /home/redis/redis.conf /usr/redis/redis.confcd /usr/redis/src./redis-server ../redis.conf#进入r4节点docker exec -it r4 bashcp /home/redis/redis.conf /usr/redis/redis.confcd /usr/redis/src./redis-server ../redis.conf#进入r5节点docker exec -it r5 bashcp /home/redis/redis.conf /usr/redis/redis.confcd /usr/redis/src./redis-server ../redis.conf#进入r6节点docker exec -it r6 bashcp /home/redis/redis.conf /usr/redis/redis.confcd /usr/redis/src./redis-server ../redis.conf</code></pre></li><li><p>创建Cluster集群</p><pre class=" language-shell"><code class="language-shell">#在r1节点上执行下面的指令cd /usr/redis/srcmkdir -p ../clustercp redis-trib.rb ../cluster/cd ../cluster#创建Cluster集群./redis-trib.rb create --replicas 1 172.19.0.2:6379 172.19.0.3:6379 172.19.0.4:6379 172.19.0.5:6379 172.19.0.6:6379 172.19.0.7:6379</code></pre></li></ol><h2 id="打包部署后端项目"><a href="#打包部署后端项目" class="headerlink" title="打包部署后端项目"></a>打包部署后端项目</h2><ol><li><p>进入人人开源后端项目，执行打包（修改配置文件，更改端口，打包三次生成三个JAR文件）</p><pre class=" language-shell"><code class="language-shell">mvn clean install -Dmaven.test.skip=true</code></pre></li><li><p>安装Java镜像</p><pre class=" language-shell"><code class="language-shell">docker pull java</code></pre></li><li><p>创建3节点Java容器</p><pre class=" language-shell"><code class="language-shell">#创建数据卷，上传JAR文件docker volume create j1#启动容器docker run -it -d --name j1 -v j1:/home/soft --net=host java#进入j1容器docker exec -it j1 bash#启动Java项目nohup java -jar /home/soft/renren-fast.jar#创建数据卷，上传JAR文件docker volume create j2#启动容器docker run -it -d --name j2 -v j2:/home/soft --net=host java#进入j1容器docker exec -it j2 bash#启动Java项目nohup java -jar /home/soft/renren-fast.jar#创建数据卷，上传JAR文件docker volume create j3#启动容器docker run -it -d --name j3 -v j3:/home/soft --net=host java#进入j1容器docker exec -it j3 bash#启动Java项目nohup java -jar /home/soft/renren-fast.jar</code></pre></li><li><p>安装Nginx镜像</p><pre class=" language-shell"><code class="language-shell">docker pull nginx</code></pre></li><li><p>创建Nginx容器，配置负载均衡</p><p>宿主机上/home/n1/nginx.conf配置文件内容如下：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">user</span> <span class="token attr-value"> nginx;</span><span class="token attr-name">worker_processes</span> <span class="token attr-value"> 1;</span><span class="token attr-name">error_log</span> <span class="token attr-value"> /var/log/nginx/error.log warn;</span><span class="token attr-name">pid</span> <span class="token attr-value">       /var/run/nginx.pid;</span><span class="token attr-name">events</span> <span class="token attr-value">{</span><span class="token attr-name">    worker_connections</span> <span class="token attr-value"> 1024;</span>}<span class="token attr-name">http</span> <span class="token attr-value">{</span><span class="token attr-name">    include</span> <span class="token attr-value">      /etc/nginx/mime.types;</span><span class="token attr-name">    default_type</span> <span class="token attr-value"> application/octet-stream;</span><span class="token attr-name">    log_format</span> <span class="token attr-value"> main  '$remote_addr - $remote_user [$time_local] "$request" '</span><span class="token attr-name">                      '$status</span> <span class="token attr-value">$body_bytes_sent "$http_referer" '</span><span class="token attr-name">                      '"$http_user_agent"</span> <span class="token attr-value">"$http_x_forwarded_for"';</span><span class="token attr-name">    access_log</span> <span class="token attr-value"> /var/log/nginx/access.log  main;</span><span class="token attr-name">    sendfile</span> <span class="token attr-value">       on;</span><span class="token comment" spellcheck="true">    #tcp_nopush     on;</span><span class="token attr-name">    keepalive_timeout</span> <span class="token attr-value"> 65;</span><span class="token comment" spellcheck="true">    #gzip  on;</span><span class="token attr-name">    proxy_redirect</span> <span class="token attr-value">         off;</span><span class="token attr-name">    proxy_set_header</span> <span class="token attr-value">       Host $host;</span><span class="token attr-name">    proxy_set_header</span> <span class="token attr-value">       X-Real-IP $remote_addr;</span><span class="token attr-name">    proxy_set_header</span> <span class="token attr-value">       X-Forwarded-For $proxy_add_x_forwarded_for;</span><span class="token attr-name">    client_max_body_size</span> <span class="token attr-value">   10m;</span><span class="token attr-name">    client_body_buffer_size</span> <span class="token attr-value">  128k;</span><span class="token attr-name">    proxy_connect_timeout</span> <span class="token attr-value">  5s;</span><span class="token attr-name">    proxy_send_timeout</span> <span class="token attr-value">     5s;</span><span class="token attr-name">    proxy_read_timeout</span> <span class="token attr-value">     5s;</span><span class="token attr-name">    proxy_buffer_size</span> <span class="token attr-value">       4k;</span><span class="token attr-name">    proxy_buffers</span> <span class="token attr-value">          4 32k;</span><span class="token attr-name">    proxy_busy_buffers_size</span> <span class="token attr-value"> 64k;</span><span class="token attr-name">    proxy_temp_file_write_size</span> <span class="token attr-value">64k;</span><span class="token attr-name">    upstream</span> <span class="token attr-value">tomcat {</span><span class="token attr-name">        server</span> <span class="token attr-value">192.168.99.104:6001;</span><span class="token attr-name">        server</span> <span class="token attr-value">192.168.99.104:6002;</span><span class="token attr-name">        server</span> <span class="token attr-value">192.168.99.104:6003;</span>    }<span class="token attr-name">    server</span> <span class="token attr-value">{</span><span class="token attr-name">        listen</span> <span class="token attr-value">      6101;</span><span class="token attr-name">        server_name</span> <span class="token attr-value"> 192.168.99.104; </span><span class="token attr-name">        location</span> <span class="token attr-value">/ {  </span><span class="token attr-name">            proxy_pass</span> <span class="token attr-value">  http://tomcat;</span><span class="token attr-name">            index</span> <span class="token attr-value"> index.html index.htm;  </span><span class="token attr-name">        }</span> <span class="token attr-value"> </span>    }}</code></pre><p>创建第1个Nginx节点</p><pre class=" language-shell"><code class="language-shell">docker run -it -d --name n1 -v /home/n1/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</code></pre><p>宿主机上/home/n2/nginx.conf配置文件内容如下：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">user</span> <span class="token attr-value"> nginx;</span><span class="token attr-name">worker_processes</span> <span class="token attr-value"> 1;</span><span class="token attr-name">error_log</span> <span class="token attr-value"> /var/log/nginx/error.log warn;</span><span class="token attr-name">pid</span> <span class="token attr-value">       /var/run/nginx.pid;</span><span class="token attr-name">events</span> <span class="token attr-value">{</span><span class="token attr-name">    worker_connections</span> <span class="token attr-value"> 1024;</span>}<span class="token attr-name">http</span> <span class="token attr-value">{</span><span class="token attr-name">    include</span> <span class="token attr-value">      /etc/nginx/mime.types;</span><span class="token attr-name">    default_type</span> <span class="token attr-value"> application/octet-stream;</span><span class="token attr-name">    log_format</span> <span class="token attr-value"> main  '$remote_addr - $remote_user [$time_local] "$request" '</span><span class="token attr-name">                      '$status</span> <span class="token attr-value">$body_bytes_sent "$http_referer" '</span><span class="token attr-name">                      '"$http_user_agent"</span> <span class="token attr-value">"$http_x_forwarded_for"';</span><span class="token attr-name">    access_log</span> <span class="token attr-value"> /var/log/nginx/access.log  main;</span><span class="token attr-name">    sendfile</span> <span class="token attr-value">       on;</span><span class="token comment" spellcheck="true">    #tcp_nopush     on;</span><span class="token attr-name">    keepalive_timeout</span> <span class="token attr-value"> 65;</span><span class="token comment" spellcheck="true">    #gzip  on;</span><span class="token attr-name">    proxy_redirect</span> <span class="token attr-value">         off;</span><span class="token attr-name">    proxy_set_header</span> <span class="token attr-value">       Host $host;</span><span class="token attr-name">    proxy_set_header</span> <span class="token attr-value">       X-Real-IP $remote_addr;</span><span class="token attr-name">    proxy_set_header</span> <span class="token attr-value">       X-Forwarded-For $proxy_add_x_forwarded_for;</span><span class="token attr-name">    client_max_body_size</span> <span class="token attr-value">   10m;</span><span class="token attr-name">    client_body_buffer_size</span> <span class="token attr-value">  128k;</span><span class="token attr-name">    proxy_connect_timeout</span> <span class="token attr-value">  5s;</span><span class="token attr-name">    proxy_send_timeout</span> <span class="token attr-value">     5s;</span><span class="token attr-name">    proxy_read_timeout</span> <span class="token attr-value">     5s;</span><span class="token attr-name">    proxy_buffer_size</span> <span class="token attr-value">       4k;</span><span class="token attr-name">    proxy_buffers</span> <span class="token attr-value">          4 32k;</span><span class="token attr-name">    proxy_busy_buffers_size</span> <span class="token attr-value"> 64k;</span><span class="token attr-name">    proxy_temp_file_write_size</span> <span class="token attr-value">64k;</span><span class="token attr-name">    upstream</span> <span class="token attr-value">tomcat {</span><span class="token attr-name">        server</span> <span class="token attr-value">192.168.99.104:6001;</span><span class="token attr-name">        server</span> <span class="token attr-value">192.168.99.104:6002;</span><span class="token attr-name">        server</span> <span class="token attr-value">192.168.99.104:6003;</span>    }<span class="token attr-name">    server</span> <span class="token attr-value">{</span><span class="token attr-name">        listen</span> <span class="token attr-value">      6102;</span><span class="token attr-name">        server_name</span> <span class="token attr-value"> 192.168.99.104; </span><span class="token attr-name">        location</span> <span class="token attr-value">/ {  </span><span class="token attr-name">            proxy_pass</span> <span class="token attr-value">  http://tomcat;</span><span class="token attr-name">            index</span> <span class="token attr-value"> index.html index.htm;  </span><span class="token attr-name">        }</span> <span class="token attr-value"> </span>    }}</code></pre><p>创建第2个Nginx节点</p><pre class=" language-shell"><code class="language-shell">docker run -it -d --name n2 -v /home/n2/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</code></pre></li><li><p>在Nginx容器安装Keepalived</p><pre class=" language-shell"><code class="language-shell">#进入n1节点docker exec -it n1 bash#更新软件包apt-get update#安装VIMapt-get install vim#安装Keepalivedapt-get install keepalived#编辑Keepalived配置文件(如下)vim /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start</code></pre><pre><code>vrrp_instance VI_1 {    state MASTER    interface ens33    virtual_router_id 51    priority 100    advert_int 1    authentication {        auth_type PASS        auth_pass 123456    }    virtual_ipaddress {        192.168.99.151    }}virtual_server 192.168.99.151 6201 {    delay_loop 3    lb_algo rr    lb_kind NAT    persistence_timeout 50    protocol TCP    real_server 192.168.99.104 6101 {        weight 1    }}</code></pre><pre class=" language-shell"><code class="language-shell">#进入n1节点docker exec -it n2 bash#更新软件包apt-get update#安装VIMapt-get install vim#安装Keepalivedapt-get install keepalived#编辑Keepalived配置文件(如下)vim /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start</code></pre><pre class=" language-shell"><code class="language-shell">vrrp_instance VI_1 {    state MASTER    interface ens33    virtual_router_id 51    priority 100    advert_int 1    authentication {        auth_type PASS        auth_pass 123456    }    virtual_ipaddress {        192.168.99.151    }}virtual_server 192.168.99.151 6201 {    delay_loop 3    lb_algo rr    lb_kind NAT    persistence_timeout 50    protocol TCP    real_server 192.168.99.104 6102 {        weight 1    }}</code></pre></li></ol><h2 id="打包部署后端项目-1"><a href="#打包部署后端项目-1" class="headerlink" title="打包部署后端项目"></a>打包部署后端项目</h2><ol><li><p>在前端项目路径下执行打包指令</p><pre class=" language-shell"><code class="language-shell">npm run build</code></pre></li><li><p>build目录的文件拷贝到宿主机的/home/fn1/renren-vue、/home/fn2/renren-vue、/home/fn3/renren-vue的目录下面</p></li><li><p>创建3节点的Nginx，部署前端项目</p><p>宿主机/home/fn1/nginx.conf的配置文件</p><pre><code>user  nginx;worker_processes  1;error_log  /var/log/nginx/error.log warn;pid        /var/run/nginx.pid;events {    worker_connections  1024;}http {    include       /etc/nginx/mime.types;    default_type  application/octet-stream;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log  /var/log/nginx/access.log  main;    sendfile        on;    #tcp_nopush     on;    keepalive_timeout  65;    #gzip  on;    proxy_redirect          off;    proxy_set_header        Host $host;    proxy_set_header        X-Real-IP $remote_addr;    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;    client_max_body_size    10m;    client_body_buffer_size   128k;    proxy_connect_timeout   5s;    proxy_send_timeout      5s;    proxy_read_timeout      5s;    proxy_buffer_size        4k;    proxy_buffers           4 32k;    proxy_busy_buffers_size  64k;    proxy_temp_file_write_size 64k;    server {        listen 6501;        server_name  192.168.99.104;        location  /  {            root  /home/fn1/renren-vue;            index  index.html;        }    }}</code></pre><pre class=" language-shell"><code class="language-shell">#启动第fn1节点docker run -it -d --name fn1 -v /home/fn1/nginx.conf:/etc/nginx/nginx.conf -v /home/fn1/renren-vue:/home/fn1/renren-vue --privileged --net=host nginx</code></pre><p>宿主机/home/fn2/nginx.conf的配置文件</p><pre class=" language-shell"><code class="language-shell">user  nginx;worker_processes  1;error_log  /var/log/nginx/error.log warn;pid        /var/run/nginx.pid;events {    worker_connections  1024;}http {    include       /etc/nginx/mime.types;    default_type  application/octet-stream;    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    access_log  /var/log/nginx/access.log  main;    sendfile        on;    #tcp_nopush     on;    keepalive_timeout  65;    #gzip  on;    proxy_redirect          off;    proxy_set_header        Host $host;    proxy_set_header        X-Real-IP $remote_addr;    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;    client_max_body_size    10m;    client_body_buffer_size   128k;    proxy_connect_timeout   5s;    proxy_send_timeout      5s;    proxy_read_timeout      5s;    proxy_buffer_size        4k;    proxy_buffers           4 32k;    proxy_busy_buffers_size  64k;    proxy_temp_file_write_size 64k;    server {        listen 6502;        server_name  192.168.99.104;        location  /  {            root  /home/fn2/renren-vue;            index  index.html;        }    }}</code></pre><pre class=" language-shell"><code class="language-shell">#启动第fn2节点docker run -it -d --name fn2 -v /home/fn2/nginx.conf:/etc/nginx/nginx.conf -v /home/fn2/renren-vue:/home/fn2/renren-vue --privileged --net=host nginx</code></pre><p>宿主机/home/fn3/nginx.conf的配置文件</p><pre class=" language-shell"><code class="language-shell">user  nginx;worker_processes  1;error_log  /var/log/nginx/error.log warn;pid        /var/run/nginx.pid;events {    worker_connections  1024;}http {    include       /etc/nginx/mime.types;    default_type  application/octet-stream;    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    access_log  /var/log/nginx/access.log  main;    sendfile        on;    #tcp_nopush     on;    keepalive_timeout  65;    #gzip  on;    proxy_redirect          off;    proxy_set_header        Host $host;    proxy_set_header        X-Real-IP $remote_addr;    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;    client_max_body_size    10m;    client_body_buffer_size   128k;    proxy_connect_timeout   5s;    proxy_send_timeout      5s;    proxy_read_timeout      5s;    proxy_buffer_size        4k;    proxy_buffers           4 32k;    proxy_busy_buffers_size  64k;    proxy_temp_file_write_size 64k;    server {        listen 6503;        server_name  192.168.99.104;        location  /  {            root  /home/fn3/renren-vue;            index  index.html;        }    }}</code></pre><p>启动fn3节点</p><pre class=" language-shell"><code class="language-shell">#启动第fn3节点docker run -it -d --name fn3 -v /home/fn3/nginx.conf:/etc/nginx/nginx.conf -v /home/fn3/renren-vue:/home/fn3/renren-vue --privileged --net=host nginx</code></pre></li><li><p>配置负载均衡</p><p>宿主机/home/ff1/nginx.conf配置文件</p><pre class=" language-shell"><code class="language-shell">user  nginx;worker_processes  1;error_log  /var/log/nginx/error.log warn;pid        /var/run/nginx.pid;events {    worker_connections  1024;}http {    include       /etc/nginx/mime.types;    default_type  application/octet-stream;    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    access_log  /var/log/nginx/access.log  main;    sendfile        on;    #tcp_nopush     on;    keepalive_timeout  65;    #gzip  on;    proxy_redirect          off;    proxy_set_header        Host $host;    proxy_set_header        X-Real-IP $remote_addr;    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;    client_max_body_size    10m;    client_body_buffer_size   128k;    proxy_connect_timeout   5s;    proxy_send_timeout      5s;    proxy_read_timeout      5s;    proxy_buffer_size        4k;    proxy_buffers           4 32k;    proxy_busy_buffers_size  64k;    proxy_temp_file_write_size 64k;    upstream fn {        server 192.168.99.104:6501;        server 192.168.99.104:6502;        server 192.168.99.104:6503;    }    server {        listen       6601;        server_name  192.168.99.104;         location / {              proxy_pass   http://fn;            index  index.html index.htm;          }      }}</code></pre><pre class=" language-shell"><code class="language-shell">#启动ff1节点docker run -it -d --name ff1 -v /home/ff1/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</code></pre><p>宿主机/home/ff2/nginx.conf配置文件</p><pre class=" language-shell"><code class="language-shell">user  nginx;worker_processes  1;error_log  /var/log/nginx/error.log warn;pid        /var/run/nginx.pid;events {    worker_connections  1024;}http {    include       /etc/nginx/mime.types;    default_type  application/octet-stream;    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    access_log  /var/log/nginx/access.log  main;    sendfile        on;    #tcp_nopush     on;    keepalive_timeout  65;    #gzip  on;    proxy_redirect          off;    proxy_set_header        Host $host;    proxy_set_header        X-Real-IP $remote_addr;    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;    client_max_body_size    10m;    client_body_buffer_size   128k;    proxy_connect_timeout   5s;    proxy_send_timeout      5s;    proxy_read_timeout      5s;    proxy_buffer_size        4k;    proxy_buffers           4 32k;    proxy_busy_buffers_size  64k;    proxy_temp_file_write_size 64k;    upstream fn {        server 192.168.99.104:6501;        server 192.168.99.104:6502;        server 192.168.99.104:6503;    }    server {        listen       6602;        server_name  192.168.99.104;         location / {              proxy_pass   http://fn;            index  index.html index.htm;          }      }}</code></pre><pre class=" language-shell"><code class="language-shell">#启动ff2节点docker run -it -d --name ff2 -v /home/ff2/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</code></pre></li><li><p>配置双机热备</p><pre class=" language-shell"><code class="language-shell">#进入ff1节点docker exec -it ff1 bash#更新软件包apt-get update#安装VIMapt-get install vim#安装Keepalivedapt-get install keepalived#编辑Keepalived配置文件(如下)vim /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start</code></pre><pre class=" language-shell"><code class="language-shell">vrrp_instance VI_1 {    state MASTER    interface ens33    virtual_router_id 52    priority 100    advert_int 1    authentication {        auth_type PASS        auth_pass 123456    }    virtual_ipaddress {        192.168.99.152    }}virtual_server 192.168.99.151 6701 {    delay_loop 3    lb_algo rr    lb_kind NAT    persistence_timeout 50    protocol TCP    real_server 192.168.99.104 6601 {        weight 1    }}</code></pre><pre class=" language-shell"><code class="language-shell">#进入ff1节点docker exec -it ff2 bash#更新软件包apt-get update#安装VIMapt-get install vim#安装Keepalivedapt-get install keepalived#编辑Keepalived配置文件(如下)vim /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start</code></pre><pre class=" language-shell"><code class="language-shell">vrrp_instance VI_1 {    state MASTER    interface ens33    virtual_router_id 52    priority 100    advert_int 1    authentication {        auth_type PASS        auth_pass 123456    }    virtual_ipaddress {        192.168.99.152    }}virtual_server 192.168.99.151 6701 {    delay_loop 3    lb_algo rr    lb_kind NAT    persistence_timeout 50    protocol TCP    real_server 192.168.99.104 6602 {        weight 1    }}</code></pre><p>​</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
